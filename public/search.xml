<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue常见问题</title>
      <link href="/2020/07/15/vue-chang-jian-wen-ti/"/>
      <url>/2020/07/15/vue-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="vue常见问题"><a href="#vue常见问题" class="headerlink" title="vue常见问题"></a>vue常见问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个系列的博客将记录我在vue中遇到的一些问题和解决思路</p><h2 id="vue变量复制"><a href="#vue变量复制" class="headerlink" title="vue变量复制"></a>vue变量复制</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_42693164/article/details/102546335" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42693164/article/details/102546335</a></p><p>我在使用vue变量的传递时出现了下面的问题</p><pre><code>//我们有两个对象 a,b  都有一个x的属性//初始化this.a = {x:1}this.b = {x:2} console.log(this.a,this.b) //{x: 1} {x: 2}this.a = this.bconsole.log(this.a,this.b) //{x: 2} {x: 2}this.b.x =10console.log(this.a,this.b) //{x: 10} {x: 10}this.a.x =11console.log(this.a,this.b) //{x: 11} {x: 11}</code></pre><p>可以发现 当我们把b赋值给a时，后续对a或者b的修改 都会影响到另外一个变量</p><p>但是如果是基本类型 就不会有这种现象，如字符串类型或者整形</p><p>出现这种情况的原因是js的浅复制和深复制</p><p>首先复习一下，在js中有两种数据类型</p><pre><code>（1） 基本数据类型：number、string、boolean、null、undefined、symbol（ES6）（2） 引用数据类型：object、function（函数实际也是对象）</code></pre><p>其次js有两种内存模式</p><pre><code>（1）栈内存：空间小，有默认大小（2）堆内存：空间大，可以自适应大小所以从他们的特点很容易看出栈内存一般用于存储基本数据类型，而堆内存一般用于存储引用数据类型</code></pre><p>我们知道一般的js都是在栈中由上至下执行的（有一些资料显示，js并没有从严格意义上去区分栈和堆，在一些场景下也是有所区分的，例如：浅复制和深复制），而堆内存的数据一般是在栈内存存了一个地址指向对应的堆内存，js执行的时候便通过这个地址来找到对应的堆内存和数据</p><p>所以这个问题便知道了发生的原因，我们在进行引用数据类型的复制时，直接将引用数据类型赋给了另外一个引用数据类型，那么实际在栈中，只是简单的复制了一下栈中存放的地址，并不是这个对象实际的值，同一个地址指向的当然就是同一个值。所以改了一个，另外一个也会发生变化。这个也被称为浅复制。</p><p>如何解决：深复制</p><pre><code>最简单的深复制var a = JSON.parse(JSON.stringify(b))</code></pre><p>这个实际就是利用JSON.stringify（obj）将对象的内容转换成字符串，那么在栈内存中就会给他一个空间存储，之后这个字符串想去外面的世界看看有多精彩，通过JSON.parse还原回原来的对象，带着家一起出走到了堆内存中，在栈内存中留下了联系方式（地址），从而实现了深复制。</p><p>注意：JSON.parse(JSON.stringify(obj))不能复制函数类型，obj也是要可以枚举才行，在IE7以下浏览器会报错</p><pre><code>递归方法实现深复制//递归的方法:function deepClone(ob) {    //根据不同对象类型赋值    let cloneObj= Array.isArray(obj)?[]:{}    //传入值不能为空且为对象类型    if(obj &amp; typeof obj === &quot;object&quot; ){    //对象的遍历方法        for(key in obJ){            //bj. hasOwnProperty (key)是验证对象自身属性中是否有指定的属性，会忽略掉原型链上继承的属性            //在遍历对象时要包略维承属性，因为for... in循环只能遍历到可枚举属性(一般默认enumerable=true )            //如果检测一个对象任意属性可以用obj. prototype. hasOwmProperty (key)            1f (obj.hasOmnProperty (key)){                //判断子元素是否为对象                if(obj,[key]&amp;&amp;typeof obj[key] === &quot;object&quot;){                    //执行递归                    cloneObj = deepClone(obj[key])                }else{                    //不是就直按赋值                    clone0bj = obyfkey]                }            }        }    }    //返回结果    return cloneObj}</code></pre><p>特别说明：对于js基本数据类型的赋值谈不上是深复制,因为每每声明一个变量时，栈内存中就会给其一个固定空间，如下面的a和b，实际他们两个都在各自的空间，空间里面都放着实际值，互不干扰。</p><p>番外：Null的数据类型实际是object类型，为何会在基本数据类型里面呢？？？<br>查看资料很多都说是一个将错就错的bug<br>实际想一下，很多关于提高性能的书里面都有提到一个“对象不用时就obj=null“，这是因为浏览器有一个垃圾回收机制，当检测到这原有的堆内存没有被占用了就会被销毁，null就相当于一个对象的空地址,值就是固定的，占用空间是固定的，这可能就是将错就错的原因，没有用的全局对象不手动销毁，浏览器在不能检测这个变量何时不再使用，就不会销毁，会造成内存泄漏。</p><h2 id="vue-alert问题"><a href="#vue-alert问题" class="headerlink" title="vue alert问题"></a>vue alert问题</h2><pre><code>//有时候我们在vue里面直接写alert(&quot;hello&quot;)//是不起效果的//我们可以更改写法widow.alert(&quot;hello&quot;)//这样是有效果的//原因是vue this的指向问题</code></pre>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric搭建（二）</title>
      <link href="/2020/07/14/fabric-da-jian-er/"/>
      <url>/2020/07/14/fabric-da-jian-er/</url>
      
        <content type="html"><![CDATA[<h1 id="fabric搭建（二）"><a href="#fabric搭建（二）" class="headerlink" title="fabric搭建（二）"></a>fabric搭建（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一节我们搭建了fabric所需要的基本环境 docker、docker-compose、go语言环境等，今天进行Fabric源码及镜像文件处理</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://www.cnblogs.com/aberic/p/7532114.html" target="_blank" rel="noopener">https://www.cnblogs.com/aberic/p/7532114.html</a></p><p><a href="https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/" target="_blank" rel="noopener">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p><h2 id="Fabric源码及镜像文件处理"><a href="#Fabric源码及镜像文件处理" class="headerlink" title="Fabric源码及镜像文件处理"></a>Fabric源码及镜像文件处理</h2><h3 id="下载Fabric源码"><a href="#下载Fabric源码" class="headerlink" title="下载Fabric源码"></a>下载Fabric源码</h3><p>首先我们需要去到昨天下的go语言目录，因为下载的fabric列子和工具都需要go的环境</p><p>通过命令</p><pre><code>echo $GOPATH</code></pre><p>可以查看运行go的位置</p><p>运行结果</p><p><img src="/2020/07/14/fabric-da-jian-er/go-path.png" alt> </p><p>在去到刚刚go的目录</p><pre><code>cd /opt/gopath</code></pre><p>接下来需要用git下载源码，可以省事用下面的命令</p><pre><code>go get github.com/hyperledger/fabric</code></pre><p>如果没有git环境的话，请跳至<a href="###Git安装">Git安装</a></p><p>安装好了之后 进入到项目的目录，切换分支  可以根据自己的要求切换分支</p><pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/git checkout -b release-2.2 </code></pre><p>项目文件结构<br><img src="/2020/07/14/fabric-da-jian-er/fabric-file.png" alt> </p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>当你的linux上没有git时，我们需要安装git来完成某些拉取的功能</p><p>参考链接：<a href="https://git-scm.com/book/zh/v2/起步-安装-Git" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</a></p><p><a href="https://www.cnblogs.com/wulixia/p/11016684.html" target="_blank" rel="noopener">https://www.cnblogs.com/wulixia/p/11016684.html</a></p><p>我采用的yum安装</p><pre><code>yum -y install gitgit --version</code></pre><p>运行结果<br><img src="/2020/07/14/fabric-da-jian-er/git-version.png" alt> </p><h3 id="下载Fabric相关镜像文件"><a href="#下载Fabric相关镜像文件" class="headerlink" title="下载Fabric相关镜像文件"></a>下载Fabric相关镜像文件</h3><p>本质上我们可以直接利用在/opt/gopath/src/github.com/hyperledger/fabric/scripts目录下有一个bootstrap-1.0.0.sh脚本文件，事实上如果外网访问条件优越的情况下，直接运行该脚本即可下载所有所需的fabric镜像文件及官方指定所需的二进制文件。</p><pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/scripts./bootstrap.sh </code></pre><p>网络不好的情况下考虑下面的做法</p><p>利用docker下载fabric镜像</p><pre><code>#后面的版本号可以不填 默认最新 但是用最新的可能会有pull出错的情况docker pull hyperledger/fabric-peer:2.2docker pull hyperledger/fabric-tools:2.2docker pull hyperledger/fabric-orderer:2.2docker pull hyperledger/fabric-couchdb:amd64-0.4docker pull hyperledger/fabric-kafka:amd64-0.4docker pull hyperledger/fabric-ca:1.4docker pull hyperledger/fabric-zookeeper:amd64-0.4docker pull hyperledger/fabric-baseos:2.2常用镜像hyperledger/fabric-peerhyperledger/fabric-toolshyperledger/fabric-ordererhyperledger/fabric-couchdbhyperledger/fabric-kafkahyperledger/fabric-cahyperledger/fabric-zookeeperhyperledger/fabric-baseos</code></pre><p>为了方便docker-compose的配置，我们将所有的镜像tag都改为latest，执行如下格式的命令：</p><pre><code>docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）docker tag 5eb2356665e7 docker.io/hyperledger/fabric-tools:latestdocker tag 760f304a3282 docker.io/hyperledger/fabric-peer:latestdocker tag 5fb8e97da88d docker.io/hyperledger/fabric-orderer:latestdocker tag aa2bdf8013af docker.io/hyperledger/fabric-baseos:latestdocker tag bbcd552150f4 docker.io/hyperledger/fabric-zookeeper:latestdocker tag 7e0396b6d64e docker.io/hyperledger/fabric-kafka:latestdocker tag b967e8b98b6b docker.io/hyperledger/fabric-couchdb:latestdocker tag 743a758fae29 docker.io/hyperledger/fabric-ca:latest</code></pre>]]></content>
      
      
      <categories>
          
          <category> Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric搭建（一）</title>
      <link href="/2020/07/13/fabric-da-jian-yi/"/>
      <url>/2020/07/13/fabric-da-jian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="fabric搭建（一）"><a href="#fabric搭建（一）" class="headerlink" title="fabric搭建（一）"></a>fabric搭建（一）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开始学fabric，这几篇博文将记录下，我搭建的过程和出现的一些问题</p><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://www.cnblogs.com/aberic/p/7531202.html" target="_blank" rel="noopener">https://www.cnblogs.com/aberic/p/7531202.html</a></p><p><a href="https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/" target="_blank" rel="noopener">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>用docker来搭建需要的环境</p><p>卸载旧版docker</p><pre><code>$ sudo yum remove docker \ docker-common \ docker-selinux \ docker-engine</code></pre><p>安装docker </p><p>参考链接：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p><pre><code>$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2$ sudo yum-config-manager \    --add-repo \https://download.docker.com/linux/centos/docker-ce.repo$ sudo yum-config-manager --enable docker-ce-edge$ sudo yum-config-manager --enable docker-ce-test$ sudo yum-config-manager --disable docker-ce-edge$ sudo yum makecache fast$ sudo yum install docker-ce</code></pre><p>查询安装的dockers版本号</p><pre><code>docker --version</code></pre><p>运行结果</p><p><img src="/2020/07/13/fabric-da-jian-yi/docker-version.png" alt> </p><p>此外还可以设置镜像加速、启动和停止等，此次不做说明</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h3><p>需要使用curl命令下载 docker-compose</p><p>下载curl</p><pre><code>yum install curl</code></pre><p>安装Compose</p><p>参考链接：<a href="https://www.runoob.com/docker/docker-compose.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-compose.html</a></p><p>可以更换1.24.1来安装其他版本</p><pre><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><p>查看安装好的版本</p><pre><code>docker-compose --version</code></pre><p>运行结果</p><p><img src="/2020/07/13/fabric-da-jian-yi/docker-compose-version.png" alt> </p><p>关于docker常用命令和dockers-compass的用法可以查看上面的参考链接</p><h3 id="Go语言安装"><a href="#Go语言安装" class="headerlink" title="Go语言安装"></a>Go语言安装</h3><p>可以去<a href="https://golang.org/" target="_blank" rel="noopener">go官网</a>查找linux版本的下载路径</p><p>安装参考链接：<a href="https://www.runoob.com/go/go-environment.html" target="_blank" rel="noopener">https://www.runoob.com/go/go-environment.html</a></p><pre><code>wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz</code></pre><p>查看下好的压缩包大小</p><pre><code>du -sh go1.14.4.linux-amd64.tar.gz</code></pre><p>运行截图</p><p><img src="/2020/07/13/fabric-da-jian-yi/go-size.png" alt> </p><p>解压命令</p><pre><code>tar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz</code></pre><p>配置go环境变量</p><pre><code># 打开配置文件vi /etc/profile# 文件末尾加上export PATH=$PATH:/usr/local/go/binexport GOPATH=/opt/gopath</code></pre><p>修改完成后 执行</p><pre><code># 进入etc目录cd /etc#使环境变量生效source profile</code></pre><p>查看是否生效</p><pre><code>echo $PATH</code></pre><p>运行结果</p><p><img src="/2020/07/13/fabric-da-jian-yi/go-path.png" alt> </p><p>查看安装的go版本</p><pre><code>go version</code></pre><p>运行结果</p><p><img src="/2020/07/13/fabric-da-jian-yi/go-version.png" alt> </p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此farbic需要的基础环境都已搭好</p>]]></content>
      
      
      <categories>
          
          <category> Fabric </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea快捷键</title>
      <link href="/2020/07/04/idea-kuai-jie-jian/"/>
      <url>/2020/07/04/idea-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea快捷键"><a href="#Idea快捷键" class="headerlink" title="Idea快捷键"></a>Idea快捷键</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键<br>Ctrl+E，最近的文件<br>Ctrl+Shift+E，最近更改的文件<br>Shift+Click，可以关闭文件<br>Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br>Ctrl+F12，可以显示当前文件的结构<br>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br>Ctrl+N，可以快速打开类<br>Ctrl+Shift+N，可以快速打开文件<br>Alt+Q，可以看到当前方法的声明<br>Ctrl+P，可以显示参数信息<br>Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br>Alt+Insert，可以生成构造器/Getter/Setter等<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br>Ctrl+Enter，导入包，自动修正<br>Ctrl+Alt+L，格式化代码<br>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br>Ctrl+Alt+O，优化导入的类和包<br>Ctrl+R，替换文本<br>Ctrl+F，查找文本<br>Ctrl+Shift+Space，自动补全代码<br>Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br>Ctrl+Shift+Alt+N，查找类中的方法或变量<br>Alt+Shift+C，最近的更改<br>Alt+Shift+Up/Down，上/下移一行<br>Shift+F6，重构 – 重命名<br>Ctrl+X，删除行<br>Ctrl+D，复制行<br>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br>Ctrl+J，自动代码（例如：serr）<br>Ctrl+Alt+J，用动态模板环绕<br>Ctrl+H，显示类结构图（类的继承层次）<br>Ctrl+Q，显示注释文档<br>Alt+F1，查找代码所在位置<br>Alt+1，快速打开或隐藏工程面板<br>Ctrl+Alt+left/right，返回至上次浏览的位置<br>Alt+left/right，切换代码视图<br>Alt+Up/Down，在方法间快速移动定位<br>Ctrl+Shift+Up/Down，向上/下移动语句<br>F2 或 Shift+F2，高亮错误或警告快速定位<br>Tab，代码标签输入完成后，按 Tab，生成代码<br>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br>Alt+F3，逐个往下查找相同文本，并高亮显示<br>Ctrl+Up/Down，光标中转到第一行或最后一行下<br>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br>Ctrl+Alt+B，跳转到方法实现处<br>Ctrl+Shift+Backspace，跳转到上次编辑的地方<br>Ctrl+O，重写方法<br>Ctrl+Alt+Space，类名自动完成<br>Ctrl+Alt+Up/Down，快速跳转搜索结果<br>Ctrl+Shift+J，整合两行<br>Alt+F8，计算变量值<br>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br>Ctrl+Alt+Shift+V，简单粘贴<br>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br>F12，把焦点从编辑器移到最近使用的工具窗口<br>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br>Ctrl+W，可以选择单词继而语句继而行继而函数<br>Ctrl+Shift+W，取消选择光标所在词<br>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br>Ctrl+I，实现方法<br>Ctrl+Shift+U，大小写转化</p><h2 id="复制及跳转"><a href="#复制及跳转" class="headerlink" title="复制及跳转"></a>复制及跳转</h2><p>Ctrl+Y，删除当前行<br>Shift+Enter，向下插入新行<br>psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br>Ctrl+Shift+F，全局查找<br>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br>Ctrl+Shift+S，高级搜索<br>Ctrl+U，转到父类<br>Ctrl+Alt+S，打开设置对话框<br>Alt+Shift+Inert，开启/关闭列选择模式<br>Ctrl+Alt+Shift+S，打开当前项目/模块属性<br>Ctrl+G，定位行<br>Alt+Home，跳转到导航栏<br>Ctrl+Enter，上插一行<br>Ctrl+Backspace，按单词删除<br>Ctrl+”+/-”，当前方法展开、折叠<br>Ctrl+Shift+”+/-”，全部展开、折叠</p><h2 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h2><p>Ctrl+F2，停止<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F10，运行<br>Ctrl+Shift+F8，查看断点<br>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目<br>Alt+1，项目<br>Alt+2，收藏<br>Alt+6，TODO<br>Alt+7，结构<br>Ctrl+Shift+C，复制路径<br>Ctrl+Alt+Shift+C，复制引用，必须选择类名<br>Ctrl+Alt+Y，同步<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br>Shift+F12，还原默认布局<br>Ctrl+Shift+F12，隐藏/恢复所有窗口<br>Ctrl+F4，关闭<br>Ctrl+Shift+F4，关闭活动选项卡<br>Ctrl+Tab，转到下一个拆分器<br>Ctrl+Shift+Tab，转到上一个拆分器</p><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器快捷键</title>
      <link href="/2020/07/04/chrome-liu-lan-qi-kuai-jie-jian/"/>
      <url>/2020/07/04/chrome-liu-lan-qi-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome浏览器快捷键"><a href="#Chrome浏览器快捷键" class="headerlink" title="Chrome浏览器快捷键"></a>Chrome浏览器快捷键</h1><p>打开新窗口 Ctrl + n<br>在无痕模式下打开新窗口 Ctrl + Shift + n<br>打开新的标签页，并跳转到该标签页 Ctrl + t<br>重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t<br>跳转到特定标签页 Ctrl + 1 到 Ctrl + 8<br>跳转到最后一个标签页 Ctrl + 9<br>在当前标签页中打开主页 Alt + Home<br>打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键<br>打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键<br>关闭当前窗口 Ctrl + Shift + w<br>最小化当前窗口 Alt + 空格键 + n<br>全屏 F11<br>打开书签管理器 Ctrl + Shift + o<br>在新标签页中打开“历史记录”页 Ctrl + h<br>在新标签页中打开“下载内容”页 Ctrl + j<br>打开 Chrome 任务管理器 Shift + Esc<br>打开“清除浏览数据”选项 Ctrl + Shift + Delete<br>使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m</p>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse常用快捷键</title>
      <link href="/2020/07/04/eclipse-chang-yong-kuai-jie-jian/"/>
      <url>/2020/07/04/eclipse-chang-yong-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="eclipse常用快捷键"><a href="#eclipse常用快捷键" class="headerlink" title="eclipse常用快捷键"></a>eclipse常用快捷键</h1><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><p>Ctrl+1    快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）<br>Ctrl+Shift+F    格式化当前代码<br>Ctrl+Shift+M    添加类的import导入<br>Ctrl+Shift+O    组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）<br>Ctrl+Y    重做（与撤销Ctrl+Z相反）<br>Alt+/    内容辅助（帮你省了多少次键盘敲打，太常用了）<br>Ctrl+D    删除当前行或者多行<br>Alt+↓    当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）<br>Alt+↑    当前行和上面一行交互位置（同上）<br>Ctrl+Alt+↓    复制当前行到下一行（复制增加）<br>Ctrl+Alt+↑    复制当前行到上一行（复制增加）<br>Shift+Enter    在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）<br>Ctrl+/    注释当前行,再按则取消注释</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>Alt+Shift+↑    选择封装元素<br>Alt+Shift+←    选择上一个元素<br>Alt+Shift+→    选择下一个元素<br>Shift+←    从光标处开始往左选择字符<br>Shift+→    从光标处开始往右选择字符<br>Ctrl+Shift+←    选中光标左边的单词<br>Ctrl+Shift+→    选中光标右边的单词</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>Ctrl+←    光标移到左边单词的开头，相当于vim的b<br>Ctrl+→    光标移到右边单词的末尾，相当于vim的e</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>Ctrl+K    参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）<br>Ctrl+Shift+K    参照选中的Word快速定位到上一个<br>Ctrl+J    正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）<br>Ctrl+Shift+J    反向增量查找（和上条相同,只不过是从后往前查）<br>Ctrl+Shift+U    列出所有包含字符串的行<br>Ctrl+H    打开搜索对话框<br>Ctrl+G    工作区中的声明<br>Ctrl+Shift+G    工作区中的引用</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>Ctrl+Shift+T    搜索类（包括工程和关联的第三jar包）<br>Ctrl+Shift+R    搜索工程中的文件<br>Ctrl+E    快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）<br>F4    打开类型层次结构<br>F3    跳转到声明处<br>Alt+←    前一个编辑的页面<br>Alt+→    下一个编辑的页面（当然是针对上面那条来说了）<br>Ctrl+PageUp/PageDown    在编辑器中，切换已经打开的文件</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>F5    单步跳入<br>F6    单步跳过<br>F7    单步返回<br>F8    继续<br>Ctrl+Shift+D    显示变量的值<br>Ctrl+Shift+B    在当前行设置或者去掉断点<br>Ctrl+R    运行至行(超好用，可以节省好多的断点)</p><h2 id="重构（一般重构的快捷键都是Alt-Shift开头的了）"><a href="#重构（一般重构的快捷键都是Alt-Shift开头的了）" class="headerlink" title="重构（一般重构的快捷键都是Alt+Shift开头的了）"></a>重构（一般重构的快捷键都是Alt+Shift开头的了）</h2><p>Alt+Shift+R    重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）<br>Alt+Shift+M    把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）<br>Alt+Shift+C    修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）<br>Alt+Shift+L    抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）<br>Alt+Shift+F    把Class中的local变量变为field变量 （比较实用的功能）<br>Alt+Shift+I    合并变量（可能这样说有点不妥Inline）<br>Alt+Shift+V    移动函数和变量（不怎么常用）<br>Alt+Shift+Z    重构的后悔药（Undo）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Alt+Enter    显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径<br>Ctrl+↑    文本编辑器 上滚行<br>Ctrl+↓    文本编辑器 下滚行<br>Ctrl+M    最大化当前的Edit或View （再按则反之）<br>Ctrl+O    快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）<br>Ctrl+T    快速显示当前类的继承结构<br>Ctrl+W    关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）<br>Ctrl+L    文本编辑器 转至行<br>F2    显示工具提示描述</p>]]></content>
      
      
      <categories>
          
          <category> eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/16/hello-world/"/>
      <url>/2020/06/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
