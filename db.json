{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1592279332381},{"_id":"themes/hexo-theme-matery/README.md","hash":"782dd718b954143448d0efcc6b5128cdb3a660f0","modified":1592279332382},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"5f5b192fa9ebc7bc41d84ab7477ebba38c97b97c","modified":1592279332382},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b982bb1887ec4033c8e9c2bbb19881713b6c372f","modified":1594947504962},{"_id":"source/_posts/Chrome浏览器快捷键.md","hash":"5f9ea93849f2a2e3556bb81f3ba713be2420878b","modified":1593828280656},{"_id":"source/_posts/Idea快捷键.md","hash":"6881e6785012eeb0b932ddf238d5279a7304a6f6","modified":1593828562959},{"_id":"source/_posts/eclipse常用快捷键.md","hash":"0906bdff450ad10e75a23888902bb20becbab61c","modified":1593827179046},{"_id":"source/_posts/element文件上传.md","hash":"1c86c5fa76821a7e15c611e5d7206a9d263de39d","modified":1594979490821},{"_id":"source/_posts/fabric搭建（一）.md","hash":"0208139ca57c97aabdb1c3f0bb191081f53f90ea","modified":1594632942915},{"_id":"source/_posts/fabric搭建（二）.md","hash":"5b2d68a49b4234a21b2cd8c86777624730f72a85","modified":1594778627402},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1592299375563},{"_id":"source/_posts/vue常见问题.md","hash":"41ac23d0331beb5df1f87ca80b9a39fbb645fdef","modified":1594863582347},{"_id":"source/_posts/定时任务quartz 管理和日志.md","hash":"3415b36991fe37ef9097c511fff8b01827f71b3a","modified":1601362096306},{"_id":"source/_posts/定时任务quartz.md","hash":"fa05c550c6c73fa2331acc4817d4a35eed254a64","modified":1601358440203},{"_id":"source/_posts/文件字符串替换.md","hash":"7e60440b801b746bfa4759a93d6761c4aab717fb","modified":1594884380298},{"_id":"source/_data/friends.json","hash":"2425397269af174e2638873845492cf0c364f8a9","modified":1592302618938},{"_id":"source/about/index.md","hash":"5606c1407c2395f27319334ffc0573b73f24e3f5","modified":1592299375563},{"_id":"source/categories/index.md","hash":"9553328ba6a362967e44e9aa768fa37ff830c087","modified":1592299375564},{"_id":"source/contact/index.md","hash":"7ab0f1c91c9b94d8a9ddb2c16799392f68cb36d2","modified":1592300218408},{"_id":"source/friends/index.md","hash":"576071c1e74494ba63414a0981981b18aac4a452","modified":1592299375564},{"_id":"source/tags/index.md","hash":"81130ae7b612f59a6bef77424e968f73980577ec","modified":1592299375565},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1592279332384},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1592279332384},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1592279332409},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1592279332409},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1592279332410},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1592279332410},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1592279332409},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1592279332410},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"3cabb8e3680858c1412277def37bdef73981be0f","modified":1592279332411},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"e179c72cb4eef88e5168cadafa2e1c3b46fd1486","modified":1592279332411},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1592279332412},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1592279332412},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1592279332412},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1592279332414},{"_id":"source/_posts/fabric搭建（一）/docker-compose-version.png","hash":"23ef9a8fccb1595d317cdf8196481595c2ad8c5a","modified":1594632609177},{"_id":"source/_posts/fabric搭建（一）/docker-version.png","hash":"1f4aff0c1b0397402f0286268941f5ea89348a74","modified":1594632427039},{"_id":"source/_posts/fabric搭建（一）/go-size.png","hash":"a56467caf510af9af05cf4eaea6cb6995bf3ba10","modified":1594632845848},{"_id":"source/_posts/fabric搭建（一）/go-path.png","hash":"62966cbc31a20796f4188cfc8433c7364f01ac28","modified":1594632900095},{"_id":"source/_posts/fabric搭建（一）/go-version.png","hash":"4a959a124a9c54a0d31acbcf85eea1f9f410b806","modified":1594632929349},{"_id":"source/_posts/fabric搭建（二）/fabric-file.png","hash":"7ea40540325778c8a66fb9edd1e25ffb4ce5bbd0","modified":1594706144873},{"_id":"source/_posts/fabric搭建（二）/git-version.png","hash":"181975290e0739ad9e4d32a711e818e99dbe07a3","modified":1594691540069},{"_id":"source/_posts/fabric搭建（二）/go-path.png","hash":"714e904af941acfc2a9cc1dee969866f53968dcd","modified":1594689442550},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1592279332385},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1592279332386},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1592279332386},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1592279332386},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1592279332387},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1592279332387},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"78228c5e91fc2e6fed6949d971bf78a1f5081812","modified":1592279332387},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1592279332388},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1592279332388},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1592279332388},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1592279332389},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"adaeca6ae9064c41047c3fb4f8bd046b736ae457","modified":1592279332389},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1592279332390},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6dc2522bc03b65d0b421a643b21a78a59c8213c1","modified":1592279332398},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1592279332399},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1592279332399},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1592279332399},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1592279332400},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1592279332400},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ea50a5669847740894d5737a6330bf1013ae2e65","modified":1592279332401},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1592279332400},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1592279332401},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1592279332401},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"908ddab5b5d5662c50b46ada0e03e06fe0a6c310","modified":1592279332402},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1592279332402},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1592279332403},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c5f1a2de30363f370c8c37994140d6ef4fd0c4b7","modified":1592279332403},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1592279332403},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1592279332404},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1592279332404},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1592279332404},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1592279332405},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1592279332405},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1592279332405},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1592279332406},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1592279332406},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1592279332406},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1592279332407},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1592279332407},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"416f2f47f34df031fe4eef050fc21a2de06fdb83","modified":1592279332407},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1592279332408},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1592279332408},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1592279332408},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1592279332413},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"68757e16d2e0d65bf8723ce1e351a8daae019a95","modified":1592279332413},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1592279332414},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1592279332414},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1592279332415},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1592279332415},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"a8d117bec7b31e867877acb9f3ea468aa5e7b746","modified":1592287875803},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1592279332496},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1592279332516},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1592279332516},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1592279332416},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1592279332417},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1592279332417},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1592279332418},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1592279332443},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1592279332443},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1592279332444},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1592279332444},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1592279332445},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1592279332445},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1592279332445},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1592279332446},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1592279332447},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1592279332447},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1592279332468},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1592279332470},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1592279332471},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1592279332472},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1592279332472},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1592279332478},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1592279332481},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1592279332481},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1592279332481},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1592279332485},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1592279332486},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1592279332497},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1592279332499},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1592279332502},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1592279332504},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1592279332511},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1592279332511},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1592279332512},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1592279332513},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1592279332514},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1592279332515},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"d2bbed4117e686b046a2361fbea003a5fc9b1a64","modified":1592287081917},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"84455e24ffc7cf91550f43ef2542749c63071b23","modified":1592287104417},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1592279332419},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1592279332463},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1592279332471},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1592279332473},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1592279332487},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1592279332492},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1592279332498},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1592279332499},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1592279332500},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1592279332501},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1592279332503},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1592279332507},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1592279332508},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1592279332508},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1592279332509},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1592279332510},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1592279332510},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1592279332513},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1592279332514},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1592279332516},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1592279332429},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1592279332431},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1592279332431},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1592279332432},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1592279332470},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1592279332474},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1592279332474},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1592279332475},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1592279332475},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1592279332475},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1592279332476},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1592279332476},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1592279332476},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1592279332477},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1592279332478},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1592279332479},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1592279332480},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1592279332482},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1592279332483},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1592279332483},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1592279332483},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1592279332484},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1592279332484},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1592279332485},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1592279332488},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1592279332489},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1592279332491},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1592279332492},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1592279332495},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1592279332496},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1592279332502},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1592279332429},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1592279332442},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1592279332420},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1592279332421},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1592279332428},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1592279332442},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1592279332427},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1592279332430},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1592279332434},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1592279332441},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1592279332494},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1592279332468},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1592279332439},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1592279332426},{"_id":"public/search.xml","hash":"d6fbd51d7fd2a1b1fdfa7a7568e46a8b79eb0d43","modified":1601362106753},{"_id":"public/atom.xml","hash":"c8de1d5eac37afa21d920e532ed39e7420dc7fa2","modified":1601362106753},{"_id":"public/categories/index.html","hash":"23d0047729393103ae62e36a4feab8301e907010","modified":1601362106753},{"_id":"public/about/index.html","hash":"80bca6f102d164415c6bd0aff8050000ea6676ee","modified":1601362106753},{"_id":"public/friends/index.html","hash":"5c21c8803fb7e8e817a1b1f688d67642d139f1f1","modified":1601362106753},{"_id":"public/contact/index.html","hash":"b86ccb31db32e8cfa5a4a66b4642eb49b1367ef9","modified":1601362106753},{"_id":"public/tags/index.html","hash":"67795a4a6749de7151923094667318280642c566","modified":1601362106753},{"_id":"public/2020/09/29/ding-shi-ren-wu-quartz-guan-li-he-ri-zhi/index.html","hash":"ca75f4f3e54452275de466eb18342b0b3258e2dc","modified":1601362106753},{"_id":"public/2020/09/29/ding-shi-ren-wu-quartz/index.html","hash":"44d104ca2ecd5e77c2035ea01c4533a6dc4620bf","modified":1601362106753},{"_id":"public/2020/07/17/element-wen-jian-shang-chuan/index.html","hash":"8c59b64b508db7b3b1417df84b624960f3aaa647","modified":1601362106753},{"_id":"public/2020/07/16/wen-jian-zi-fu-chuan-ti-huan/index.html","hash":"0671a287cbe0ce71a4664a05df737081b5a55af2","modified":1601362106753},{"_id":"public/2020/07/15/vue-chang-jian-wen-ti/index.html","hash":"101302f4d4d6087bc0a1b913522602dd484ed723","modified":1601362106753},{"_id":"public/2020/07/14/fabric-da-jian-er/index.html","hash":"a140c05364438e1d7763b7d949658ac75c90adb3","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/index.html","hash":"816c00f8b176f1c0eaa3d39d8d2600029199235a","modified":1601362106753},{"_id":"public/2020/07/04/idea-kuai-jie-jian/index.html","hash":"b099a055644e5cf1f78df3eba920b102e7084b91","modified":1601362106753},{"_id":"public/2020/07/04/chrome-liu-lan-qi-kuai-jie-jian/index.html","hash":"ec9768a169469f81a5c3756282b4400da85c3fc2","modified":1601362106753},{"_id":"public/2020/07/04/eclipse-chang-yong-kuai-jie-jian/index.html","hash":"7ec27142738770c89d1b46bf0aac36d0c95ad4dd","modified":1601362106753},{"_id":"public/archives/index.html","hash":"70db43f5701d265a0aeeb36e057efe03425aec47","modified":1601362106753},{"_id":"public/2020/06/16/hello-world/index.html","hash":"98d35c484b356b86ab80ae55eaccdb0f630368da","modified":1601362106753},{"_id":"public/archives/page/2/index.html","hash":"45836b240ec507bc19e9f3037addbf10051e7453","modified":1601362106753},{"_id":"public/archives/2020/index.html","hash":"13c04950b388aa0bf7a278461e90c66d3e1d557c","modified":1601362106753},{"_id":"public/archives/2020/06/index.html","hash":"3cd453a12d97423d21cbafbe1ba2ef240958f39d","modified":1601362106753},{"_id":"public/archives/2020/page/2/index.html","hash":"2eb16a74d004f5a5fd14207801787e1506d86e2b","modified":1601362106753},{"_id":"public/archives/2020/07/index.html","hash":"19099d643760cb866eda01f6230a6ccf6b8985b6","modified":1601362106753},{"_id":"public/archives/2020/09/index.html","hash":"f72adc5fb1624c22115298f2aeb1682bd6e7235b","modified":1601362106753},{"_id":"public/categories/Chrome/index.html","hash":"bcc7fcb0df27b7d2b3997241bfc94878ca752e98","modified":1601362106753},{"_id":"public/categories/Idea/index.html","hash":"cb8c081b8a2311069bdca842845b728274bbe826","modified":1601362106753},{"_id":"public/categories/eclipse/index.html","hash":"563441bf5696acd457e81272de881b07311c755e","modified":1601362106753},{"_id":"public/categories/Fabric/index.html","hash":"ad4810e2284e4c0d0bea54e413529450ab693bc4","modified":1601362106753},{"_id":"public/categories/vue/index.html","hash":"2a852c154318bcb43f531d172d18db2af44e3f94","modified":1601362106753},{"_id":"public/categories/Quartz/index.html","hash":"e0166cfc3e62a5dbe68934dfa3f7590f6f5ed03d","modified":1601362106753},{"_id":"public/categories/脚本/index.html","hash":"ffd49df54349a3157527e314c434368212f7a69a","modified":1601362106753},{"_id":"public/tags/Chrome/index.html","hash":"dd6c7dc97833fbfdc27077626508aa585eee5785","modified":1601362106753},{"_id":"public/tags/Idea/index.html","hash":"4b10e877b96506d8a90ad8b3d5cacceaa7464b52","modified":1601362106753},{"_id":"public/index.html","hash":"e6f7586150689a954eabffa5cabcc86c11a6913e","modified":1601362106753},{"_id":"public/tags/eclipse/index.html","hash":"90c3555c34dcfff02d10187c148f133455185928","modified":1601362106753},{"_id":"public/tags/Fabric/index.html","hash":"8fd1a96f1f27ccd74abd68ce973cdbb8871dd103","modified":1601362106753},{"_id":"public/tags/vue/index.html","hash":"49be7f740ad8ccc491fc79a5580dcbd36a8ba47c","modified":1601362106753},{"_id":"public/tags/Quartz/index.html","hash":"176f4860b2cdf2ec9ea794bfd3616e7f2e2b6729","modified":1601362106753},{"_id":"public/tags/脚本/index.html","hash":"ecf80fb8e4c49056b2ae40c959db23098f824581","modified":1601362106753},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1601362106753},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1601362106753},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1601362106753},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1601362106753},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1601362106753},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1601362106753},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1601362106753},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1601362106753},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1601362106753},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1601362106753},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1601362106753},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1601362106753},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1601362106753},{"_id":"public/medias/reward/alipay.jpg","hash":"d2bbed4117e686b046a2361fbea003a5fc9b1a64","modified":1601362106753},{"_id":"public/medias/reward/wechat.png","hash":"84455e24ffc7cf91550f43ef2542749c63071b23","modified":1601362106753},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1601362106753},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1601362106753},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1601362106753},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1601362106753},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1601362106753},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1601362106753},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1601362106753},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1601362106753},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1601362106753},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1601362106753},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1601362106753},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1601362106753},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1601362106753},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1601362106753},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1601362106753},{"_id":"public/medias/avatar.jpg","hash":"a8d117bec7b31e867877acb9f3ea468aa5e7b746","modified":1601362106753},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1601362106753},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1601362106753},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1601362106753},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1601362106753},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1601362106753},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1601362106753},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1601362106753},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1601362106753},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1601362106753},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1601362106753},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1601362106753},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1601362106753},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1601362106753},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1601362106753},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1601362106753},{"_id":"public/2020/07/14/fabric-da-jian-er/fabric-file.png","hash":"7ea40540325778c8a66fb9edd1e25ffb4ce5bbd0","modified":1601362106753},{"_id":"public/2020/07/14/fabric-da-jian-er/go-path.png","hash":"714e904af941acfc2a9cc1dee969866f53968dcd","modified":1601362106753},{"_id":"public/2020/07/14/fabric-da-jian-er/git-version.png","hash":"181975290e0739ad9e4d32a711e818e99dbe07a3","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/docker-compose-version.png","hash":"23ef9a8fccb1595d317cdf8196481595c2ad8c5a","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/docker-version.png","hash":"1f4aff0c1b0397402f0286268941f5ea89348a74","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/go-size.png","hash":"a56467caf510af9af05cf4eaea6cb6995bf3ba10","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/go-path.png","hash":"62966cbc31a20796f4188cfc8433c7364f01ac28","modified":1601362106753},{"_id":"public/2020/07/13/fabric-da-jian-yi/go-version.png","hash":"4a959a124a9c54a0d31acbcf85eea1f9f410b806","modified":1601362106753},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1601362106753},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1601362106753},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1601362106753},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1601362106753},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1601362106753},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1601362106753},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1601362106753},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1601362106753},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1601362106753},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1601362106753},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1601362106753},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1601362106753},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1601362106753},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1601362106753},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1601362106753},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1601362106753},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1601362106753},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1601362106753},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1601362106753},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1601362106753},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1601362106753},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1601362106753},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1601362106753},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1601362106753},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1601362106753},{"_id":"public/css/matery.css","hash":"dd541544372e3cf7c1193ffe690dba8b26d568cd","modified":1601362106753},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1601362106753},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1601362106753},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1601362106753},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1601362106753},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1601362106753},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1601362106753},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1601362106753},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1601362106753},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1601362106753},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1601362106753},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1601362106753},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1601362106753},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1601362106753},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1601362106753},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1601362106753},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1601362106753},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1601362106753},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1601362106753},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1601362106753},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1601362106753},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1601362106753},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1601362106753},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1601362106753},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1601362106753},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1601362106753},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1601362106753},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1601362106753},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1601362106753}],"Category":[{"name":"Chrome","_id":"ckfnlni670004hcqah3sx535h"},{"name":"Idea","_id":"ckfnlni6c000bhcqa2atihp5o"},{"name":"eclipse","_id":"ckfnlni6f000ihcqa6fhj8980"},{"name":"Fabric","_id":"ckfnlni6i000ohcqacwzi3dn8"},{"name":"vue","_id":"ckfnlni6k000uhcqafnv53usd"},{"name":"Quartz","_id":"ckfnlni6n0015hcqaa4zd3qwz"},{"name":"脚本","_id":"ckfnlni6o001ahcqa1bto2ukg"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}],"Page":[{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-06-16T09:22:55.564Z","path":"categories/index.html","comments":1,"_id":"ckfnlni650001hcqagm6b5alv","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-06-16T09:22:55.563Z","path":"about/index.html","comments":1,"_id":"ckfnlni660003hcqa9trj5wq0","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2020-06-16T09:22:55.564Z","path":"friends/index.html","comments":1,"_id":"ckfnlni6a0007hcqabi0mg3c7","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-06-16T09:36:58.408Z","path":"contact/index.html","comments":1,"_id":"ckfnlni6b0009hcqa3rk5dy0h","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-06-16T09:22:55.565Z","path":"tags/index.html","comments":1,"_id":"ckfnlni6d000dhcqafcurdopo","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Chrome浏览器快捷键","date":"2020-07-04T01:59:43.000Z","_content":"# Chrome浏览器快捷键\n打开新窗口 Ctrl + n\n在无痕模式下打开新窗口 Ctrl + Shift + n\n打开新的标签页，并跳转到该标签页 Ctrl + t\n重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t\n跳转到特定标签页 Ctrl + 1 到 Ctrl + 8\n跳转到最后一个标签页 Ctrl + 9\n在当前标签页中打开主页 Alt + Home\n打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键\n打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键\n关闭当前窗口 Ctrl + Shift + w\n最小化当前窗口 Alt + 空格键 + n\n全屏 F11\n打开书签管理器 Ctrl + Shift + o\n在新标签页中打开“历史记录”页 Ctrl + h\n在新标签页中打开“下载内容”页 Ctrl + j\n打开 Chrome 任务管理器 Shift + Esc\n打开“清除浏览数据”选项 Ctrl + Shift + Delete\n使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m\n","source":"_posts/Chrome浏览器快捷键.md","raw":"---\nlayout: post\ntitle: Chrome浏览器快捷键\ndate: 2020-07-04 09:59:43\ntags: Chrome\ncategories: Chrome\n---\n# Chrome浏览器快捷键\n打开新窗口 Ctrl + n\n在无痕模式下打开新窗口 Ctrl + Shift + n\n打开新的标签页，并跳转到该标签页 Ctrl + t\n重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t\n跳转到特定标签页 Ctrl + 1 到 Ctrl + 8\n跳转到最后一个标签页 Ctrl + 9\n在当前标签页中打开主页 Alt + Home\n打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键\n打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键\n关闭当前窗口 Ctrl + Shift + w\n最小化当前窗口 Alt + 空格键 + n\n全屏 F11\n打开书签管理器 Ctrl + Shift + o\n在新标签页中打开“历史记录”页 Ctrl + h\n在新标签页中打开“下载内容”页 Ctrl + j\n打开 Chrome 任务管理器 Shift + Esc\n打开“清除浏览数据”选项 Ctrl + Shift + Delete\n使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m\n","slug":"Chrome浏览器快捷键","published":1,"updated":"2020-07-04T02:04:40.656Z","comments":1,"photos":[],"link":"","_id":"ckfnlni600000hcqa256qf3ar","content":"<h1 id=\"Chrome浏览器快捷键\"><a href=\"#Chrome浏览器快捷键\" class=\"headerlink\" title=\"Chrome浏览器快捷键\"></a>Chrome浏览器快捷键</h1><p>打开新窗口 Ctrl + n<br>在无痕模式下打开新窗口 Ctrl + Shift + n<br>打开新的标签页，并跳转到该标签页 Ctrl + t<br>重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t<br>跳转到特定标签页 Ctrl + 1 到 Ctrl + 8<br>跳转到最后一个标签页 Ctrl + 9<br>在当前标签页中打开主页 Alt + Home<br>打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键<br>打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键<br>关闭当前窗口 Ctrl + Shift + w<br>最小化当前窗口 Alt + 空格键 + n<br>全屏 F11<br>打开书签管理器 Ctrl + Shift + o<br>在新标签页中打开“历史记录”页 Ctrl + h<br>在新标签页中打开“下载内容”页 Ctrl + j<br>打开 Chrome 任务管理器 Shift + Esc<br>打开“清除浏览数据”选项 Ctrl + Shift + Delete<br>使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Chrome浏览器快捷键\"><a href=\"#Chrome浏览器快捷键\" class=\"headerlink\" title=\"Chrome浏览器快捷键\"></a>Chrome浏览器快捷键</h1><p>打开新窗口 Ctrl + n<br>在无痕模式下打开新窗口 Ctrl + Shift + n<br>打开新的标签页，并跳转到该标签页 Ctrl + t<br>重新打开最后关闭的标签页，并跳转到该标签页 Ctrl + Shift + t<br>跳转到特定标签页 Ctrl + 1 到 Ctrl + 8<br>跳转到最后一个标签页 Ctrl + 9<br>在当前标签页中打开主页 Alt + Home<br>打开当前标签页浏览记录中记录的上一个页面 Alt + 向左箭头键<br>打开当前标签页浏览记录中记录的下一个页面 Alt + 向右箭头键<br>关闭当前窗口 Ctrl + Shift + w<br>最小化当前窗口 Alt + 空格键 + n<br>全屏 F11<br>打开书签管理器 Ctrl + Shift + o<br>在新标签页中打开“历史记录”页 Ctrl + h<br>在新标签页中打开“下载内容”页 Ctrl + j<br>打开 Chrome 任务管理器 Shift + Esc<br>打开“清除浏览数据”选项 Ctrl + Shift + Delete<br>使用其他帐号登录或以访客身份浏览 Ctrl + Shift + m</p>\n"},{"layout":"post","title":"Idea快捷键","date":"2020-07-04T02:05:18.000Z","_content":"\n# Idea快捷键\n\n## 基础\nCtrl+Shift + Enter，语句完成\n“！”，否定完成，输入表达式时按 “！”键\nCtrl+E，最近的文件\nCtrl+Shift+E，最近更改的文件\nShift+Click，可以关闭文件\nCtrl+[ OR ]，可以跑到大括号的开头与结尾\nCtrl+F12，可以显示当前文件的结构\nCtrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择\nCtrl+N，可以快速打开类\nCtrl+Shift+N，可以快速打开文件\nAlt+Q，可以看到当前方法的声明\nCtrl+P，可以显示参数信息\nCtrl+Shift+Insert，可以选择剪贴板内容并插入\nAlt+Insert，可以生成构造器/Getter/Setter等\nCtrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义\nCtrl+Alt+T，可以把代码包在一个块内，例如：try/catch\nCtrl+Enter，导入包，自动修正\nCtrl+Alt+L，格式化代码\nCtrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作\nCtrl+Alt+O，优化导入的类和包\nCtrl+R，替换文本\nCtrl+F，查找文本\nCtrl+Shift+Space，自动补全代码\nCtrl+空格，代码提示（与系统输入法快捷键冲突）\nCtrl+Shift+Alt+N，查找类中的方法或变量\nAlt+Shift+C，最近的更改\nAlt+Shift+Up/Down，上/下移一行\nShift+F6，重构 – 重命名\nCtrl+X，删除行\nCtrl+D，复制行\nCtrl+/或Ctrl+Shift+/，注释（//或者/**/）\nCtrl+J，自动代码（例如：serr）\nCtrl+Alt+J，用动态模板环绕\nCtrl+H，显示类结构图（类的继承层次）\nCtrl+Q，显示注释文档\nAlt+F1，查找代码所在位置\nAlt+1，快速打开或隐藏工程面板\nCtrl+Alt+left/right，返回至上次浏览的位置\nAlt+left/right，切换代码视图\nAlt+Up/Down，在方法间快速移动定位\nCtrl+Shift+Up/Down，向上/下移动语句\nF2 或 Shift+F2，高亮错误或警告快速定位\nTab，代码标签输入完成后，按 Tab，生成代码\nCtrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失\nAlt+F3，逐个往下查找相同文本，并高亮显示\nCtrl+Up/Down，光标中转到第一行或最后一行下\nCtrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）\nCtrl+Alt+B，跳转到方法实现处\nCtrl+Shift+Backspace，跳转到上次编辑的地方\nCtrl+O，重写方法\nCtrl+Alt+Space，类名自动完成\nCtrl+Alt+Up/Down，快速跳转搜索结果\nCtrl+Shift+J，整合两行\nAlt+F8，计算变量值\nCtrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本\nCtrl+Alt+Shift+V，简单粘贴\nShift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口\nF12，把焦点从编辑器移到最近使用的工具窗口\nShift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器\nCtrl+W，可以选择单词继而语句继而行继而函数\nCtrl+Shift+W，取消选择光标所在词\nAlt+F7，查找整个工程中使用地某一个类、方法或者变量的位置\nCtrl+I，实现方法\nCtrl+Shift+U，大小写转化\n\n## 复制及跳转\nCtrl+Y，删除当前行\nShift+Enter，向下插入新行\npsvm/sout，main/System.out.println(); Ctrl+J，查看更多\nCtrl+Shift+F，全局查找\nCtrl+F，查找/Shift+F3，向上查找/F3，向下查找\nCtrl+Shift+S，高级搜索\nCtrl+U，转到父类\nCtrl+Alt+S，打开设置对话框\nAlt+Shift+Inert，开启/关闭列选择模式\nCtrl+Alt+Shift+S，打开当前项目/模块属性\nCtrl+G，定位行\nAlt+Home，跳转到导航栏\nCtrl+Enter，上插一行\nCtrl+Backspace，按单词删除\nCtrl+”+/-”，当前方法展开、折叠\nCtrl+Shift+”+/-”，全部展开、折叠\n\n## 调试部分、编译\nCtrl+F2，停止\nAlt+Shift+F9，选择 Debug\nAlt+Shift+F10，选择 Run\nCtrl+Shift+F9，编译\nCtrl+Shift+F10，运行\nCtrl+Shift+F8，查看断点\nF8，步过\nF7，步入\nShift+F7，智能步入\nShift+F8，步出\nAlt+Shift+F8，强制步过\nAlt+Shift+F7，强制步入\nAlt+F9，运行至光标处\nCtrl+Alt+F9，强制运行至光标处\nF9，恢复程序\nAlt+F10，定位到断点\nCtrl+F8，切换行断点\nCtrl+F9，生成项目\nAlt+1，项目\nAlt+2，收藏\nAlt+6，TODO\nAlt+7，结构\nCtrl+Shift+C，复制路径\nCtrl+Alt+Shift+C，复制引用，必须选择类名\nCtrl+Alt+Y，同步\nCtrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）\nShift+F12，还原默认布局\nCtrl+Shift+F12，隐藏/恢复所有窗口\nCtrl+F4，关闭\nCtrl+Shift+F4，关闭活动选项卡\nCtrl+Tab，转到下一个拆分器\nCtrl+Shift+Tab，转到上一个拆分器\n\n## 重构\nCtrl+Alt+Shift+T，弹出重构菜单\nShift+F6，重命名\nF6，移动\nF5，复制\nAlt+Delete，安全删除\nCtrl+Alt+N，内联\n\n## 查找\nCtrl+F，查找\nCtrl+R，替换\nF3，查找下一个\nShift+F3，查找上一个\nCtrl+Shift+F，在路径中查找\nCtrl+Shift+R，在路径中替换\nCtrl+Shift+S，搜索结构\nCtrl+Shift+M，替换结构\nAlt+F7，查找用法\nCtrl+Alt+F7，显示用法\nCtrl+F7，在文件中查找用法\nCtrl+Shift+F7，在文件中高亮显示用法","source":"_posts/Idea快捷键.md","raw":"---\nlayout: post\ntitle: Idea快捷键\ndate: 2020-07-04 10:05:18\ntags: Idea\ncategories: Idea\n---\n\n# Idea快捷键\n\n## 基础\nCtrl+Shift + Enter，语句完成\n“！”，否定完成，输入表达式时按 “！”键\nCtrl+E，最近的文件\nCtrl+Shift+E，最近更改的文件\nShift+Click，可以关闭文件\nCtrl+[ OR ]，可以跑到大括号的开头与结尾\nCtrl+F12，可以显示当前文件的结构\nCtrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择\nCtrl+N，可以快速打开类\nCtrl+Shift+N，可以快速打开文件\nAlt+Q，可以看到当前方法的声明\nCtrl+P，可以显示参数信息\nCtrl+Shift+Insert，可以选择剪贴板内容并插入\nAlt+Insert，可以生成构造器/Getter/Setter等\nCtrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义\nCtrl+Alt+T，可以把代码包在一个块内，例如：try/catch\nCtrl+Enter，导入包，自动修正\nCtrl+Alt+L，格式化代码\nCtrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作\nCtrl+Alt+O，优化导入的类和包\nCtrl+R，替换文本\nCtrl+F，查找文本\nCtrl+Shift+Space，自动补全代码\nCtrl+空格，代码提示（与系统输入法快捷键冲突）\nCtrl+Shift+Alt+N，查找类中的方法或变量\nAlt+Shift+C，最近的更改\nAlt+Shift+Up/Down，上/下移一行\nShift+F6，重构 – 重命名\nCtrl+X，删除行\nCtrl+D，复制行\nCtrl+/或Ctrl+Shift+/，注释（//或者/**/）\nCtrl+J，自动代码（例如：serr）\nCtrl+Alt+J，用动态模板环绕\nCtrl+H，显示类结构图（类的继承层次）\nCtrl+Q，显示注释文档\nAlt+F1，查找代码所在位置\nAlt+1，快速打开或隐藏工程面板\nCtrl+Alt+left/right，返回至上次浏览的位置\nAlt+left/right，切换代码视图\nAlt+Up/Down，在方法间快速移动定位\nCtrl+Shift+Up/Down，向上/下移动语句\nF2 或 Shift+F2，高亮错误或警告快速定位\nTab，代码标签输入完成后，按 Tab，生成代码\nCtrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失\nAlt+F3，逐个往下查找相同文本，并高亮显示\nCtrl+Up/Down，光标中转到第一行或最后一行下\nCtrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）\nCtrl+Alt+B，跳转到方法实现处\nCtrl+Shift+Backspace，跳转到上次编辑的地方\nCtrl+O，重写方法\nCtrl+Alt+Space，类名自动完成\nCtrl+Alt+Up/Down，快速跳转搜索结果\nCtrl+Shift+J，整合两行\nAlt+F8，计算变量值\nCtrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本\nCtrl+Alt+Shift+V，简单粘贴\nShift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口\nF12，把焦点从编辑器移到最近使用的工具窗口\nShift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器\nCtrl+W，可以选择单词继而语句继而行继而函数\nCtrl+Shift+W，取消选择光标所在词\nAlt+F7，查找整个工程中使用地某一个类、方法或者变量的位置\nCtrl+I，实现方法\nCtrl+Shift+U，大小写转化\n\n## 复制及跳转\nCtrl+Y，删除当前行\nShift+Enter，向下插入新行\npsvm/sout，main/System.out.println(); Ctrl+J，查看更多\nCtrl+Shift+F，全局查找\nCtrl+F，查找/Shift+F3，向上查找/F3，向下查找\nCtrl+Shift+S，高级搜索\nCtrl+U，转到父类\nCtrl+Alt+S，打开设置对话框\nAlt+Shift+Inert，开启/关闭列选择模式\nCtrl+Alt+Shift+S，打开当前项目/模块属性\nCtrl+G，定位行\nAlt+Home，跳转到导航栏\nCtrl+Enter，上插一行\nCtrl+Backspace，按单词删除\nCtrl+”+/-”，当前方法展开、折叠\nCtrl+Shift+”+/-”，全部展开、折叠\n\n## 调试部分、编译\nCtrl+F2，停止\nAlt+Shift+F9，选择 Debug\nAlt+Shift+F10，选择 Run\nCtrl+Shift+F9，编译\nCtrl+Shift+F10，运行\nCtrl+Shift+F8，查看断点\nF8，步过\nF7，步入\nShift+F7，智能步入\nShift+F8，步出\nAlt+Shift+F8，强制步过\nAlt+Shift+F7，强制步入\nAlt+F9，运行至光标处\nCtrl+Alt+F9，强制运行至光标处\nF9，恢复程序\nAlt+F10，定位到断点\nCtrl+F8，切换行断点\nCtrl+F9，生成项目\nAlt+1，项目\nAlt+2，收藏\nAlt+6，TODO\nAlt+7，结构\nCtrl+Shift+C，复制路径\nCtrl+Alt+Shift+C，复制引用，必须选择类名\nCtrl+Alt+Y，同步\nCtrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）\nShift+F12，还原默认布局\nCtrl+Shift+F12，隐藏/恢复所有窗口\nCtrl+F4，关闭\nCtrl+Shift+F4，关闭活动选项卡\nCtrl+Tab，转到下一个拆分器\nCtrl+Shift+Tab，转到上一个拆分器\n\n## 重构\nCtrl+Alt+Shift+T，弹出重构菜单\nShift+F6，重命名\nF6，移动\nF5，复制\nAlt+Delete，安全删除\nCtrl+Alt+N，内联\n\n## 查找\nCtrl+F，查找\nCtrl+R，替换\nF3，查找下一个\nShift+F3，查找上一个\nCtrl+Shift+F，在路径中查找\nCtrl+Shift+R，在路径中替换\nCtrl+Shift+S，搜索结构\nCtrl+Shift+M，替换结构\nAlt+F7，查找用法\nCtrl+Alt+F7，显示用法\nCtrl+F7，在文件中查找用法\nCtrl+Shift+F7，在文件中高亮显示用法","slug":"Idea快捷键","published":1,"updated":"2020-07-04T02:09:22.959Z","comments":1,"photos":[],"link":"","_id":"ckfnlni650002hcqa4vtg0ok7","content":"<h1 id=\"Idea快捷键\"><a href=\"#Idea快捷键\" class=\"headerlink\" title=\"Idea快捷键\"></a>Idea快捷键</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键<br>Ctrl+E，最近的文件<br>Ctrl+Shift+E，最近更改的文件<br>Shift+Click，可以关闭文件<br>Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br>Ctrl+F12，可以显示当前文件的结构<br>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br>Ctrl+N，可以快速打开类<br>Ctrl+Shift+N，可以快速打开文件<br>Alt+Q，可以看到当前方法的声明<br>Ctrl+P，可以显示参数信息<br>Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br>Alt+Insert，可以生成构造器/Getter/Setter等<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br>Ctrl+Enter，导入包，自动修正<br>Ctrl+Alt+L，格式化代码<br>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br>Ctrl+Alt+O，优化导入的类和包<br>Ctrl+R，替换文本<br>Ctrl+F，查找文本<br>Ctrl+Shift+Space，自动补全代码<br>Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br>Ctrl+Shift+Alt+N，查找类中的方法或变量<br>Alt+Shift+C，最近的更改<br>Alt+Shift+Up/Down，上/下移一行<br>Shift+F6，重构 – 重命名<br>Ctrl+X，删除行<br>Ctrl+D，复制行<br>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br>Ctrl+J，自动代码（例如：serr）<br>Ctrl+Alt+J，用动态模板环绕<br>Ctrl+H，显示类结构图（类的继承层次）<br>Ctrl+Q，显示注释文档<br>Alt+F1，查找代码所在位置<br>Alt+1，快速打开或隐藏工程面板<br>Ctrl+Alt+left/right，返回至上次浏览的位置<br>Alt+left/right，切换代码视图<br>Alt+Up/Down，在方法间快速移动定位<br>Ctrl+Shift+Up/Down，向上/下移动语句<br>F2 或 Shift+F2，高亮错误或警告快速定位<br>Tab，代码标签输入完成后，按 Tab，生成代码<br>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br>Alt+F3，逐个往下查找相同文本，并高亮显示<br>Ctrl+Up/Down，光标中转到第一行或最后一行下<br>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br>Ctrl+Alt+B，跳转到方法实现处<br>Ctrl+Shift+Backspace，跳转到上次编辑的地方<br>Ctrl+O，重写方法<br>Ctrl+Alt+Space，类名自动完成<br>Ctrl+Alt+Up/Down，快速跳转搜索结果<br>Ctrl+Shift+J，整合两行<br>Alt+F8，计算变量值<br>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br>Ctrl+Alt+Shift+V，简单粘贴<br>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br>F12，把焦点从编辑器移到最近使用的工具窗口<br>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br>Ctrl+W，可以选择单词继而语句继而行继而函数<br>Ctrl+Shift+W，取消选择光标所在词<br>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br>Ctrl+I，实现方法<br>Ctrl+Shift+U，大小写转化</p>\n<h2 id=\"复制及跳转\"><a href=\"#复制及跳转\" class=\"headerlink\" title=\"复制及跳转\"></a>复制及跳转</h2><p>Ctrl+Y，删除当前行<br>Shift+Enter，向下插入新行<br>psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br>Ctrl+Shift+F，全局查找<br>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br>Ctrl+Shift+S，高级搜索<br>Ctrl+U，转到父类<br>Ctrl+Alt+S，打开设置对话框<br>Alt+Shift+Inert，开启/关闭列选择模式<br>Ctrl+Alt+Shift+S，打开当前项目/模块属性<br>Ctrl+G，定位行<br>Alt+Home，跳转到导航栏<br>Ctrl+Enter，上插一行<br>Ctrl+Backspace，按单词删除<br>Ctrl+”+/-”，当前方法展开、折叠<br>Ctrl+Shift+”+/-”，全部展开、折叠</p>\n<h2 id=\"调试部分、编译\"><a href=\"#调试部分、编译\" class=\"headerlink\" title=\"调试部分、编译\"></a>调试部分、编译</h2><p>Ctrl+F2，停止<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F10，运行<br>Ctrl+Shift+F8，查看断点<br>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目<br>Alt+1，项目<br>Alt+2，收藏<br>Alt+6，TODO<br>Alt+7，结构<br>Ctrl+Shift+C，复制路径<br>Ctrl+Alt+Shift+C，复制引用，必须选择类名<br>Ctrl+Alt+Y，同步<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br>Shift+F12，还原默认布局<br>Ctrl+Shift+F12，隐藏/恢复所有窗口<br>Ctrl+F4，关闭<br>Ctrl+Shift+F4，关闭活动选项卡<br>Ctrl+Tab，转到下一个拆分器<br>Ctrl+Shift+Tab，转到上一个拆分器</p>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联</p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Idea快捷键\"><a href=\"#Idea快捷键\" class=\"headerlink\" title=\"Idea快捷键\"></a>Idea快捷键</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键<br>Ctrl+E，最近的文件<br>Ctrl+Shift+E，最近更改的文件<br>Shift+Click，可以关闭文件<br>Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br>Ctrl+F12，可以显示当前文件的结构<br>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br>Ctrl+N，可以快速打开类<br>Ctrl+Shift+N，可以快速打开文件<br>Alt+Q，可以看到当前方法的声明<br>Ctrl+P，可以显示参数信息<br>Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br>Alt+Insert，可以生成构造器/Getter/Setter等<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br>Ctrl+Enter，导入包，自动修正<br>Ctrl+Alt+L，格式化代码<br>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br>Ctrl+Alt+O，优化导入的类和包<br>Ctrl+R，替换文本<br>Ctrl+F，查找文本<br>Ctrl+Shift+Space，自动补全代码<br>Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br>Ctrl+Shift+Alt+N，查找类中的方法或变量<br>Alt+Shift+C，最近的更改<br>Alt+Shift+Up/Down，上/下移一行<br>Shift+F6，重构 – 重命名<br>Ctrl+X，删除行<br>Ctrl+D，复制行<br>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br>Ctrl+J，自动代码（例如：serr）<br>Ctrl+Alt+J，用动态模板环绕<br>Ctrl+H，显示类结构图（类的继承层次）<br>Ctrl+Q，显示注释文档<br>Alt+F1，查找代码所在位置<br>Alt+1，快速打开或隐藏工程面板<br>Ctrl+Alt+left/right，返回至上次浏览的位置<br>Alt+left/right，切换代码视图<br>Alt+Up/Down，在方法间快速移动定位<br>Ctrl+Shift+Up/Down，向上/下移动语句<br>F2 或 Shift+F2，高亮错误或警告快速定位<br>Tab，代码标签输入完成后，按 Tab，生成代码<br>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br>Alt+F3，逐个往下查找相同文本，并高亮显示<br>Ctrl+Up/Down，光标中转到第一行或最后一行下<br>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br>Ctrl+Alt+B，跳转到方法实现处<br>Ctrl+Shift+Backspace，跳转到上次编辑的地方<br>Ctrl+O，重写方法<br>Ctrl+Alt+Space，类名自动完成<br>Ctrl+Alt+Up/Down，快速跳转搜索结果<br>Ctrl+Shift+J，整合两行<br>Alt+F8，计算变量值<br>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br>Ctrl+Alt+Shift+V，简单粘贴<br>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br>F12，把焦点从编辑器移到最近使用的工具窗口<br>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br>Ctrl+W，可以选择单词继而语句继而行继而函数<br>Ctrl+Shift+W，取消选择光标所在词<br>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br>Ctrl+I，实现方法<br>Ctrl+Shift+U，大小写转化</p>\n<h2 id=\"复制及跳转\"><a href=\"#复制及跳转\" class=\"headerlink\" title=\"复制及跳转\"></a>复制及跳转</h2><p>Ctrl+Y，删除当前行<br>Shift+Enter，向下插入新行<br>psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br>Ctrl+Shift+F，全局查找<br>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br>Ctrl+Shift+S，高级搜索<br>Ctrl+U，转到父类<br>Ctrl+Alt+S，打开设置对话框<br>Alt+Shift+Inert，开启/关闭列选择模式<br>Ctrl+Alt+Shift+S，打开当前项目/模块属性<br>Ctrl+G，定位行<br>Alt+Home，跳转到导航栏<br>Ctrl+Enter，上插一行<br>Ctrl+Backspace，按单词删除<br>Ctrl+”+/-”，当前方法展开、折叠<br>Ctrl+Shift+”+/-”，全部展开、折叠</p>\n<h2 id=\"调试部分、编译\"><a href=\"#调试部分、编译\" class=\"headerlink\" title=\"调试部分、编译\"></a>调试部分、编译</h2><p>Ctrl+F2，停止<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F10，运行<br>Ctrl+Shift+F8，查看断点<br>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目<br>Alt+1，项目<br>Alt+2，收藏<br>Alt+6，TODO<br>Alt+7，结构<br>Ctrl+Shift+C，复制路径<br>Ctrl+Alt+Shift+C，复制引用，必须选择类名<br>Ctrl+Alt+Y，同步<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br>Shift+F12，还原默认布局<br>Ctrl+Shift+F12，隐藏/恢复所有窗口<br>Ctrl+F4，关闭<br>Ctrl+Shift+F4，关闭活动选项卡<br>Ctrl+Tab，转到下一个拆分器<br>Ctrl+Shift+Tab，转到上一个拆分器</p>\n<h2 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h2><p>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联</p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>\n"},{"layout":"post","title":"eclipse常用快捷键","date":"2020-07-04T01:30:28.000Z","_content":"\n\n# eclipse常用快捷键\n\n## 编辑\nCtrl+1\t快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）\nCtrl+Shift+F\t格式化当前代码\nCtrl+Shift+M\t添加类的import导入\nCtrl+Shift+O\t组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）\nCtrl+Y\t重做（与撤销Ctrl+Z相反）\nAlt+/\t内容辅助（帮你省了多少次键盘敲打，太常用了）\nCtrl+D\t删除当前行或者多行\nAlt+↓\t当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）\nAlt+↑\t当前行和上面一行交互位置（同上）\nCtrl+Alt+↓\t复制当前行到下一行（复制增加）\nCtrl+Alt+↑\t复制当前行到上一行（复制增加）\nShift+Enter\t在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）\nCtrl+/\t注释当前行,再按则取消注释\n## 选择\nAlt+Shift+↑\t选择封装元素\nAlt+Shift+←\t选择上一个元素\nAlt+Shift+→\t选择下一个元素\nShift+←\t从光标处开始往左选择字符\nShift+→\t从光标处开始往右选择字符\nCtrl+Shift+←\t选中光标左边的单词\nCtrl+Shift+→\t选中光标右边的单词\n## 移动\nCtrl+←\t光标移到左边单词的开头，相当于vim的b\nCtrl+→\t光标移到右边单词的末尾，相当于vim的e\n## 搜索\nCtrl+K\t参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）\nCtrl+Shift+K\t参照选中的Word快速定位到上一个\nCtrl+J\t正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）\nCtrl+Shift+J\t反向增量查找（和上条相同,只不过是从后往前查）\nCtrl+Shift+U\t列出所有包含字符串的行\nCtrl+H\t打开搜索对话框\nCtrl+G\t工作区中的声明\nCtrl+Shift+G\t工作区中的引用\n## 导航\nCtrl+Shift+T\t搜索类（包括工程和关联的第三jar包）\nCtrl+Shift+R\t搜索工程中的文件\nCtrl+E\t快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）\nF4\t打开类型层次结构\nF3\t跳转到声明处\nAlt+←\t前一个编辑的页面\nAlt+→\t下一个编辑的页面（当然是针对上面那条来说了）\nCtrl+PageUp/PageDown\t在编辑器中，切换已经打开的文件\n## 调试\nF5\t单步跳入\nF6\t单步跳过\nF7\t单步返回\nF8\t继续\nCtrl+Shift+D\t显示变量的值\nCtrl+Shift+B\t在当前行设置或者去掉断点\nCtrl+R\t运行至行(超好用，可以节省好多的断点)\n## 重构（一般重构的快捷键都是Alt+Shift开头的了）\nAlt+Shift+R\t重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）\nAlt+Shift+M\t把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）\nAlt+Shift+C\t修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）\nAlt+Shift+L\t抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）\nAlt+Shift+F\t把Class中的local变量变为field变量 （比较实用的功能）\nAlt+Shift+I\t合并变量（可能这样说有点不妥Inline）\nAlt+Shift+V\t移动函数和变量（不怎么常用）\nAlt+Shift+Z\t重构的后悔药（Undo）\n## 其他\nAlt+Enter\t显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径\nCtrl+↑\t文本编辑器 上滚行\nCtrl+↓\t文本编辑器 下滚行\nCtrl+M\t最大化当前的Edit或View （再按则反之）\nCtrl+O\t快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）\nCtrl+T\t快速显示当前类的继承结构\nCtrl+W\t关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）\nCtrl+L\t文本编辑器 转至行\nF2\t显示工具提示描述\n","source":"_posts/eclipse常用快捷键.md","raw":"---\nlayout: post\ntitle: eclipse常用快捷键\ndate: 2020-07-04 09:30:28\ntags: eclipse\ncategories: eclipse\n---\n\n\n# eclipse常用快捷键\n\n## 编辑\nCtrl+1\t快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）\nCtrl+Shift+F\t格式化当前代码\nCtrl+Shift+M\t添加类的import导入\nCtrl+Shift+O\t组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）\nCtrl+Y\t重做（与撤销Ctrl+Z相反）\nAlt+/\t内容辅助（帮你省了多少次键盘敲打，太常用了）\nCtrl+D\t删除当前行或者多行\nAlt+↓\t当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）\nAlt+↑\t当前行和上面一行交互位置（同上）\nCtrl+Alt+↓\t复制当前行到下一行（复制增加）\nCtrl+Alt+↑\t复制当前行到上一行（复制增加）\nShift+Enter\t在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）\nCtrl+/\t注释当前行,再按则取消注释\n## 选择\nAlt+Shift+↑\t选择封装元素\nAlt+Shift+←\t选择上一个元素\nAlt+Shift+→\t选择下一个元素\nShift+←\t从光标处开始往左选择字符\nShift+→\t从光标处开始往右选择字符\nCtrl+Shift+←\t选中光标左边的单词\nCtrl+Shift+→\t选中光标右边的单词\n## 移动\nCtrl+←\t光标移到左边单词的开头，相当于vim的b\nCtrl+→\t光标移到右边单词的末尾，相当于vim的e\n## 搜索\nCtrl+K\t参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）\nCtrl+Shift+K\t参照选中的Word快速定位到上一个\nCtrl+J\t正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）\nCtrl+Shift+J\t反向增量查找（和上条相同,只不过是从后往前查）\nCtrl+Shift+U\t列出所有包含字符串的行\nCtrl+H\t打开搜索对话框\nCtrl+G\t工作区中的声明\nCtrl+Shift+G\t工作区中的引用\n## 导航\nCtrl+Shift+T\t搜索类（包括工程和关联的第三jar包）\nCtrl+Shift+R\t搜索工程中的文件\nCtrl+E\t快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）\nF4\t打开类型层次结构\nF3\t跳转到声明处\nAlt+←\t前一个编辑的页面\nAlt+→\t下一个编辑的页面（当然是针对上面那条来说了）\nCtrl+PageUp/PageDown\t在编辑器中，切换已经打开的文件\n## 调试\nF5\t单步跳入\nF6\t单步跳过\nF7\t单步返回\nF8\t继续\nCtrl+Shift+D\t显示变量的值\nCtrl+Shift+B\t在当前行设置或者去掉断点\nCtrl+R\t运行至行(超好用，可以节省好多的断点)\n## 重构（一般重构的快捷键都是Alt+Shift开头的了）\nAlt+Shift+R\t重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）\nAlt+Shift+M\t把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）\nAlt+Shift+C\t修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）\nAlt+Shift+L\t抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）\nAlt+Shift+F\t把Class中的local变量变为field变量 （比较实用的功能）\nAlt+Shift+I\t合并变量（可能这样说有点不妥Inline）\nAlt+Shift+V\t移动函数和变量（不怎么常用）\nAlt+Shift+Z\t重构的后悔药（Undo）\n## 其他\nAlt+Enter\t显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径\nCtrl+↑\t文本编辑器 上滚行\nCtrl+↓\t文本编辑器 下滚行\nCtrl+M\t最大化当前的Edit或View （再按则反之）\nCtrl+O\t快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）\nCtrl+T\t快速显示当前类的继承结构\nCtrl+W\t关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）\nCtrl+L\t文本编辑器 转至行\nF2\t显示工具提示描述\n","slug":"eclipse常用快捷键","published":1,"updated":"2020-07-04T01:46:19.046Z","comments":1,"photos":[],"link":"","_id":"ckfnlni690006hcqac46r79eg","content":"<h1 id=\"eclipse常用快捷键\"><a href=\"#eclipse常用快捷键\" class=\"headerlink\" title=\"eclipse常用快捷键\"></a>eclipse常用快捷键</h1><h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><p>Ctrl+1    快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）<br>Ctrl+Shift+F    格式化当前代码<br>Ctrl+Shift+M    添加类的import导入<br>Ctrl+Shift+O    组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）<br>Ctrl+Y    重做（与撤销Ctrl+Z相反）<br>Alt+/    内容辅助（帮你省了多少次键盘敲打，太常用了）<br>Ctrl+D    删除当前行或者多行<br>Alt+↓    当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）<br>Alt+↑    当前行和上面一行交互位置（同上）<br>Ctrl+Alt+↓    复制当前行到下一行（复制增加）<br>Ctrl+Alt+↑    复制当前行到上一行（复制增加）<br>Shift+Enter    在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）<br>Ctrl+/    注释当前行,再按则取消注释</p>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><p>Alt+Shift+↑    选择封装元素<br>Alt+Shift+←    选择上一个元素<br>Alt+Shift+→    选择下一个元素<br>Shift+←    从光标处开始往左选择字符<br>Shift+→    从光标处开始往右选择字符<br>Ctrl+Shift+←    选中光标左边的单词<br>Ctrl+Shift+→    选中光标右边的单词</p>\n<h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><p>Ctrl+←    光标移到左边单词的开头，相当于vim的b<br>Ctrl+→    光标移到右边单词的末尾，相当于vim的e</p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>Ctrl+K    参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）<br>Ctrl+Shift+K    参照选中的Word快速定位到上一个<br>Ctrl+J    正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）<br>Ctrl+Shift+J    反向增量查找（和上条相同,只不过是从后往前查）<br>Ctrl+Shift+U    列出所有包含字符串的行<br>Ctrl+H    打开搜索对话框<br>Ctrl+G    工作区中的声明<br>Ctrl+Shift+G    工作区中的引用</p>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>Ctrl+Shift+T    搜索类（包括工程和关联的第三jar包）<br>Ctrl+Shift+R    搜索工程中的文件<br>Ctrl+E    快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）<br>F4    打开类型层次结构<br>F3    跳转到声明处<br>Alt+←    前一个编辑的页面<br>Alt+→    下一个编辑的页面（当然是针对上面那条来说了）<br>Ctrl+PageUp/PageDown    在编辑器中，切换已经打开的文件</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>F5    单步跳入<br>F6    单步跳过<br>F7    单步返回<br>F8    继续<br>Ctrl+Shift+D    显示变量的值<br>Ctrl+Shift+B    在当前行设置或者去掉断点<br>Ctrl+R    运行至行(超好用，可以节省好多的断点)</p>\n<h2 id=\"重构（一般重构的快捷键都是Alt-Shift开头的了）\"><a href=\"#重构（一般重构的快捷键都是Alt-Shift开头的了）\" class=\"headerlink\" title=\"重构（一般重构的快捷键都是Alt+Shift开头的了）\"></a>重构（一般重构的快捷键都是Alt+Shift开头的了）</h2><p>Alt+Shift+R    重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）<br>Alt+Shift+M    把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）<br>Alt+Shift+C    修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）<br>Alt+Shift+L    抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）<br>Alt+Shift+F    把Class中的local变量变为field变量 （比较实用的功能）<br>Alt+Shift+I    合并变量（可能这样说有点不妥Inline）<br>Alt+Shift+V    移动函数和变量（不怎么常用）<br>Alt+Shift+Z    重构的后悔药（Undo）</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Alt+Enter    显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径<br>Ctrl+↑    文本编辑器 上滚行<br>Ctrl+↓    文本编辑器 下滚行<br>Ctrl+M    最大化当前的Edit或View （再按则反之）<br>Ctrl+O    快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）<br>Ctrl+T    快速显示当前类的继承结构<br>Ctrl+W    关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）<br>Ctrl+L    文本编辑器 转至行<br>F2    显示工具提示描述</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"eclipse常用快捷键\"><a href=\"#eclipse常用快捷键\" class=\"headerlink\" title=\"eclipse常用快捷键\"></a>eclipse常用快捷键</h1><h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><p>Ctrl+1    快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）<br>Ctrl+Shift+F    格式化当前代码<br>Ctrl+Shift+M    添加类的import导入<br>Ctrl+Shift+O    组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）<br>Ctrl+Y    重做（与撤销Ctrl+Z相反）<br>Alt+/    内容辅助（帮你省了多少次键盘敲打，太常用了）<br>Ctrl+D    删除当前行或者多行<br>Alt+↓    当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）<br>Alt+↑    当前行和上面一行交互位置（同上）<br>Ctrl+Alt+↓    复制当前行到下一行（复制增加）<br>Ctrl+Alt+↑    复制当前行到上一行（复制增加）<br>Shift+Enter    在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）<br>Ctrl+/    注释当前行,再按则取消注释</p>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><p>Alt+Shift+↑    选择封装元素<br>Alt+Shift+←    选择上一个元素<br>Alt+Shift+→    选择下一个元素<br>Shift+←    从光标处开始往左选择字符<br>Shift+→    从光标处开始往右选择字符<br>Ctrl+Shift+←    选中光标左边的单词<br>Ctrl+Shift+→    选中光标右边的单词</p>\n<h2 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h2><p>Ctrl+←    光标移到左边单词的开头，相当于vim的b<br>Ctrl+→    光标移到右边单词的末尾，相当于vim的e</p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>Ctrl+K    参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）<br>Ctrl+Shift+K    参照选中的Word快速定位到上一个<br>Ctrl+J    正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）<br>Ctrl+Shift+J    反向增量查找（和上条相同,只不过是从后往前查）<br>Ctrl+Shift+U    列出所有包含字符串的行<br>Ctrl+H    打开搜索对话框<br>Ctrl+G    工作区中的声明<br>Ctrl+Shift+G    工作区中的引用</p>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><p>Ctrl+Shift+T    搜索类（包括工程和关联的第三jar包）<br>Ctrl+Shift+R    搜索工程中的文件<br>Ctrl+E    快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）<br>F4    打开类型层次结构<br>F3    跳转到声明处<br>Alt+←    前一个编辑的页面<br>Alt+→    下一个编辑的页面（当然是针对上面那条来说了）<br>Ctrl+PageUp/PageDown    在编辑器中，切换已经打开的文件</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>F5    单步跳入<br>F6    单步跳过<br>F7    单步返回<br>F8    继续<br>Ctrl+Shift+D    显示变量的值<br>Ctrl+Shift+B    在当前行设置或者去掉断点<br>Ctrl+R    运行至行(超好用，可以节省好多的断点)</p>\n<h2 id=\"重构（一般重构的快捷键都是Alt-Shift开头的了）\"><a href=\"#重构（一般重构的快捷键都是Alt-Shift开头的了）\" class=\"headerlink\" title=\"重构（一般重构的快捷键都是Alt+Shift开头的了）\"></a>重构（一般重构的快捷键都是Alt+Shift开头的了）</h2><p>Alt+Shift+R    重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）<br>Alt+Shift+M    把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）<br>Alt+Shift+C    修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）<br>Alt+Shift+L    抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）<br>Alt+Shift+F    把Class中的local变量变为field变量 （比较实用的功能）<br>Alt+Shift+I    合并变量（可能这样说有点不妥Inline）<br>Alt+Shift+V    移动函数和变量（不怎么常用）<br>Alt+Shift+Z    重构的后悔药（Undo）</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Alt+Enter    显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径<br>Ctrl+↑    文本编辑器 上滚行<br>Ctrl+↓    文本编辑器 下滚行<br>Ctrl+M    最大化当前的Edit或View （再按则反之）<br>Ctrl+O    快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）<br>Ctrl+T    快速显示当前类的继承结构<br>Ctrl+W    关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）<br>Ctrl+L    文本编辑器 转至行<br>F2    显示工具提示描述</p>\n"},{"layout":"post","title":"fabric搭建（一）","date":"2020-07-13T06:40:18.000Z","_content":"\n# fabric搭建（一）\n\n## 前言\n\n最近开始学fabric，这几篇博文将记录下，我搭建的过程和出现的一些问题\n\n## 参考连接\n\nhttps://www.cnblogs.com/aberic/p/7531202.html\n\nhttps://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\n\nhttps://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\n\n\n## 环境搭建\n\n### Docker安装\n\n用docker来搭建需要的环境\n\n卸载旧版docker\n\n```\n$ sudo yum remove docker \\ docker-common \\ docker-selinux \\ docker-engine\n```\n\n安装docker \n\n参考链接：https://www.runoob.com/docker/ubuntu-docker-install.html\n\n```\n$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n$ sudo yum-config-manager \\\n    --add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n$ sudo yum-config-manager --enable docker-ce-edge\n\n$ sudo yum-config-manager --enable docker-ce-test\n\n$ sudo yum-config-manager --disable docker-ce-edge\n\n$ sudo yum makecache fast\n\n$ sudo yum install docker-ce\n```\n\n查询安装的dockers版本号\n\n```\ndocker --version\n```\n\n运行结果\n\n![](fabric搭建（一）/docker-version.png) \n\n此外还可以设置镜像加速、启动和停止等，此次不做说明\n\n### Docker-Compose\n\n需要使用curl命令下载 docker-compose\n\n下载curl\n\n```\nyum install curl\n```\n\n安装Compose\n\n参考链接：https://www.runoob.com/docker/docker-compose.html\n\n可以更换1.24.1来安装其他版本\n\n```\n$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n查看安装好的版本\n\n```\ndocker-compose --version\n```\n\n运行结果\n\n![](fabric搭建（一）/docker-compose-version.png) \n\n关于docker常用命令和dockers-compass的用法可以查看上面的参考链接\n\n\n\n### Go语言安装\n\n\n\n可以去[go官网](https://golang.org/)查找linux版本的下载路径\n\n安装参考链接：https://www.runoob.com/go/go-environment.html\n\n```\nwget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz\n```\n\n查看下好的压缩包大小\n\n```\ndu -sh go1.14.4.linux-amd64.tar.gz\n```\n\n运行截图\n\n![](fabric搭建（一）/go-size.png) \n\n解压命令\n\n```\ntar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz\n```\n\n配置go环境变量\n\n```\n# 打开配置文件\nvi /etc/profile\n\n# 文件末尾加上\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=/opt/gopath\n```\n\n修改完成后 执行\n\n```\n# 进入etc目录\ncd /etc\n#使环境变量生效\nsource profile\n```\n\n查看是否生效\n\n```\necho $PATH\n```\n\n运行结果\n\n![](fabric搭建（一）/go-path.png) \n\n查看安装的go版本\n\n```\ngo version\n```\n\n运行结果\n\n![](fabric搭建（一）/go-version.png) \n\n## 结语\n\n至此farbic需要的基础环境都已搭好","source":"_posts/fabric搭建（一）.md","raw":"---\nlayout: post\ntitle: fabric搭建（一）\ndate: 2020-07-13 14:40:18\ntags: Fabric\ncategories: Fabric\n\n---\n\n# fabric搭建（一）\n\n## 前言\n\n最近开始学fabric，这几篇博文将记录下，我搭建的过程和出现的一些问题\n\n## 参考连接\n\nhttps://www.cnblogs.com/aberic/p/7531202.html\n\nhttps://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\n\nhttps://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\n\n\n## 环境搭建\n\n### Docker安装\n\n用docker来搭建需要的环境\n\n卸载旧版docker\n\n```\n$ sudo yum remove docker \\ docker-common \\ docker-selinux \\ docker-engine\n```\n\n安装docker \n\n参考链接：https://www.runoob.com/docker/ubuntu-docker-install.html\n\n```\n$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n$ sudo yum-config-manager \\\n    --add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n$ sudo yum-config-manager --enable docker-ce-edge\n\n$ sudo yum-config-manager --enable docker-ce-test\n\n$ sudo yum-config-manager --disable docker-ce-edge\n\n$ sudo yum makecache fast\n\n$ sudo yum install docker-ce\n```\n\n查询安装的dockers版本号\n\n```\ndocker --version\n```\n\n运行结果\n\n![](fabric搭建（一）/docker-version.png) \n\n此外还可以设置镜像加速、启动和停止等，此次不做说明\n\n### Docker-Compose\n\n需要使用curl命令下载 docker-compose\n\n下载curl\n\n```\nyum install curl\n```\n\n安装Compose\n\n参考链接：https://www.runoob.com/docker/docker-compose.html\n\n可以更换1.24.1来安装其他版本\n\n```\n$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n查看安装好的版本\n\n```\ndocker-compose --version\n```\n\n运行结果\n\n![](fabric搭建（一）/docker-compose-version.png) \n\n关于docker常用命令和dockers-compass的用法可以查看上面的参考链接\n\n\n\n### Go语言安装\n\n\n\n可以去[go官网](https://golang.org/)查找linux版本的下载路径\n\n安装参考链接：https://www.runoob.com/go/go-environment.html\n\n```\nwget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz\n```\n\n查看下好的压缩包大小\n\n```\ndu -sh go1.14.4.linux-amd64.tar.gz\n```\n\n运行截图\n\n![](fabric搭建（一）/go-size.png) \n\n解压命令\n\n```\ntar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz\n```\n\n配置go环境变量\n\n```\n# 打开配置文件\nvi /etc/profile\n\n# 文件末尾加上\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=/opt/gopath\n```\n\n修改完成后 执行\n\n```\n# 进入etc目录\ncd /etc\n#使环境变量生效\nsource profile\n```\n\n查看是否生效\n\n```\necho $PATH\n```\n\n运行结果\n\n![](fabric搭建（一）/go-path.png) \n\n查看安装的go版本\n\n```\ngo version\n```\n\n运行结果\n\n![](fabric搭建（一）/go-version.png) \n\n## 结语\n\n至此farbic需要的基础环境都已搭好","slug":"fabric搭建（一）","published":1,"updated":"2020-07-13T09:35:42.915Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6a0008hcqa3imi0bxy","content":"<h1 id=\"fabric搭建（一）\"><a href=\"#fabric搭建（一）\" class=\"headerlink\" title=\"fabric搭建（一）\"></a>fabric搭建（一）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近开始学fabric，这几篇博文将记录下，我搭建的过程和出现的一些问题</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><p><a href=\"https://www.cnblogs.com/aberic/p/7531202.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aberic/p/7531202.html</a></p>\n<p><a href=\"https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\" target=\"_blank\" rel=\"noopener\">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p>\n<p><a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\" target=\"_blank\" rel=\"noopener\">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><p>用docker来搭建需要的环境</p>\n<p>卸载旧版docker</p>\n<pre><code>$ sudo yum remove docker \\ docker-common \\ docker-selinux \\ docker-engine</code></pre><p>安装docker </p>\n<p>参考链接：<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p>\n<pre><code>$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n$ sudo yum-config-manager \\\n    --add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n$ sudo yum-config-manager --enable docker-ce-edge\n\n$ sudo yum-config-manager --enable docker-ce-test\n\n$ sudo yum-config-manager --disable docker-ce-edge\n\n$ sudo yum makecache fast\n\n$ sudo yum install docker-ce</code></pre><p>查询安装的dockers版本号</p>\n<pre><code>docker --version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/docker-version.png\" alt> </p>\n<p>此外还可以设置镜像加速、启动和停止等，此次不做说明</p>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker-Compose\"></a>Docker-Compose</h3><p>需要使用curl命令下载 docker-compose</p>\n<p>下载curl</p>\n<pre><code>yum install curl</code></pre><p>安装Compose</p>\n<p>参考链接：<a href=\"https://www.runoob.com/docker/docker-compose.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/docker-compose.html</a></p>\n<p>可以更换1.24.1来安装其他版本</p>\n<pre><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><p>查看安装好的版本</p>\n<pre><code>docker-compose --version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/docker-compose-version.png\" alt> </p>\n<p>关于docker常用命令和dockers-compass的用法可以查看上面的参考链接</p>\n<h3 id=\"Go语言安装\"><a href=\"#Go语言安装\" class=\"headerlink\" title=\"Go语言安装\"></a>Go语言安装</h3><p>可以去<a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">go官网</a>查找linux版本的下载路径</p>\n<p>安装参考链接：<a href=\"https://www.runoob.com/go/go-environment.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/go/go-environment.html</a></p>\n<pre><code>wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz</code></pre><p>查看下好的压缩包大小</p>\n<pre><code>du -sh go1.14.4.linux-amd64.tar.gz</code></pre><p>运行截图</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-size.png\" alt> </p>\n<p>解压命令</p>\n<pre><code>tar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz</code></pre><p>配置go环境变量</p>\n<pre><code># 打开配置文件\nvi /etc/profile\n\n# 文件末尾加上\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=/opt/gopath</code></pre><p>修改完成后 执行</p>\n<pre><code># 进入etc目录\ncd /etc\n#使环境变量生效\nsource profile</code></pre><p>查看是否生效</p>\n<pre><code>echo $PATH</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-path.png\" alt> </p>\n<p>查看安装的go版本</p>\n<pre><code>go version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-version.png\" alt> </p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此farbic需要的基础环境都已搭好</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"fabric搭建（一）\"><a href=\"#fabric搭建（一）\" class=\"headerlink\" title=\"fabric搭建（一）\"></a>fabric搭建（一）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近开始学fabric，这几篇博文将记录下，我搭建的过程和出现的一些问题</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><p><a href=\"https://www.cnblogs.com/aberic/p/7531202.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aberic/p/7531202.html</a></p>\n<p><a href=\"https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\" target=\"_blank\" rel=\"noopener\">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p>\n<p><a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\" target=\"_blank\" rel=\"noopener\">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><p>用docker来搭建需要的环境</p>\n<p>卸载旧版docker</p>\n<pre><code>$ sudo yum remove docker \\ docker-common \\ docker-selinux \\ docker-engine</code></pre><p>安装docker </p>\n<p>参考链接：<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p>\n<pre><code>$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n$ sudo yum-config-manager \\\n    --add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n$ sudo yum-config-manager --enable docker-ce-edge\n\n$ sudo yum-config-manager --enable docker-ce-test\n\n$ sudo yum-config-manager --disable docker-ce-edge\n\n$ sudo yum makecache fast\n\n$ sudo yum install docker-ce</code></pre><p>查询安装的dockers版本号</p>\n<pre><code>docker --version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/docker-version.png\" alt> </p>\n<p>此外还可以设置镜像加速、启动和停止等，此次不做说明</p>\n<h3 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker-Compose\"></a>Docker-Compose</h3><p>需要使用curl命令下载 docker-compose</p>\n<p>下载curl</p>\n<pre><code>yum install curl</code></pre><p>安装Compose</p>\n<p>参考链接：<a href=\"https://www.runoob.com/docker/docker-compose.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/docker/docker-compose.html</a></p>\n<p>可以更换1.24.1来安装其他版本</p>\n<pre><code>$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><p>查看安装好的版本</p>\n<pre><code>docker-compose --version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/docker-compose-version.png\" alt> </p>\n<p>关于docker常用命令和dockers-compass的用法可以查看上面的参考链接</p>\n<h3 id=\"Go语言安装\"><a href=\"#Go语言安装\" class=\"headerlink\" title=\"Go语言安装\"></a>Go语言安装</h3><p>可以去<a href=\"https://golang.org/\" target=\"_blank\" rel=\"noopener\">go官网</a>查找linux版本的下载路径</p>\n<p>安装参考链接：<a href=\"https://www.runoob.com/go/go-environment.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/go/go-environment.html</a></p>\n<pre><code>wget https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz</code></pre><p>查看下好的压缩包大小</p>\n<pre><code>du -sh go1.14.4.linux-amd64.tar.gz</code></pre><p>运行截图</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-size.png\" alt> </p>\n<p>解压命令</p>\n<pre><code>tar -C /usr/local -xzf go1.14.4.linux-amd64.tar.gz</code></pre><p>配置go环境变量</p>\n<pre><code># 打开配置文件\nvi /etc/profile\n\n# 文件末尾加上\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=/opt/gopath</code></pre><p>修改完成后 执行</p>\n<pre><code># 进入etc目录\ncd /etc\n#使环境变量生效\nsource profile</code></pre><p>查看是否生效</p>\n<pre><code>echo $PATH</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-path.png\" alt> </p>\n<p>查看安装的go版本</p>\n<pre><code>go version</code></pre><p>运行结果</p>\n<p><img src=\"/2020/07/13/fabric-da-jian-yi/go-version.png\" alt> </p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>至此farbic需要的基础环境都已搭好</p>\n"},{"layout":"post","title":"element文件上传","date":"2020-07-17T09:11:17.000Z","_content":"\n# element文件上传\n\n## 前言\n\n今天进行了element 文件上传组件的运用，写一下心得\n\n## 前端组件配置\n\n具体组件配置官方文档里面有，我就不一一说明了\n\n```\n//自定义上传\n<el-upload id=\"el-upload\" \n    ref=\"uploadForm\" \n    :auto-upload=\"false\" \n    :http-request=\"upLoad\" \n    :on-remove=\"onRemove\" \n    :before-upload=\"beforeUpload\"\n    > \n     <el-button slot=\"trigger\" size=\"small\" type=\"primary\">\n      点击上传\n     </el-button> \n    </template> \n   </el-upload> \n```\n\n这里主要说明两种情况：\n\n第一种直接用action配置上传地址，这种的优点就是方便、省心，element会直接把文件调用后端接口，但是不够灵活，无法传递额外的参数，也只能一个个文件上传。\n\n第二种用http-request覆盖掉默认的上传方式，可以在这里调用后端地址，配置相关请求头，增加参数等等，这里可以设置取消自动上传，然后通过按钮触发组件的上传方法，但是这种方法其实也是一个个发请求的。\n\n而且我的需求是需要在点击提交的时候根据输入的编码传给后端，然后生成文件夹的名字，所有还需要进行一些改造。\n\n```\n//我的上传方法并没有写任何东西，因为我的上传是通过点击提交的时候再自定义上传的\n//之所以要写一个空方法是因为需要获取到组件的file数组\n//如果不写这个方法  会取action里面的值来进行上传（就算action为空也会）\nupLoad(params){\n\t\n},\n```\n\n```\n//fileList是我定义的用于存储file数组的变量\n//在上传前，将文件存储到fileList里面\nbeforeUpload(file){\n\tthis.fileList.push(file)\n},\n//移除方法，将fileList里面的file去掉\nonRemove(file){\n\tlet index = this.fileList.findIndex(fileItem => fileItem.uid === file.uid);\n\tthis.fileList.splice(index, 1);\n}\n```\n\n```\n//点击提交的时候触发的方法\n//第一句话是触发上传组件的上传方法 这样才能触发beforeUpload（因为我们写了取消自动上传）\nthis.$refs.uploadForm.submit()\n//对fileList用formData拼接\nlet formData = new FormData();\nthis.fileList.forEach((item)=>{\n    formData.append(\"file\",item);\n})\n//这里设置下请求头和传递的额外参数\n$http.post(\"bmp/v1/chaincode/uploadEnclosure/\"+this.data.code, formData,{headers: {'Content-Type': 'multipart/form-data'}}).then(data => {\n\tconsole.log(data)\n}).catch(error => {\n    \tthis.$message({\n        message: \"error\",\n        type: 'error'\n        })\n    })\n```\n\n现在前端基本配置好了，调用接口就可以实现文件上传了\n\n## 后端接口\n\ncontroller\n\n```\n\t@POST\n\t@Path(\"/chaincode/uploadEnclosure/{code}\")\n\t@Consumes(MediaType.MULTIPART_FORM_DATA)\n\t@ApiOperation(\"文件上传\")\n\tpublic List<Map<String, Object>> uploadEnclosure(@Context HttpServletRequest request,@PathParam(value = \"code\") String code) {\n\t\tStandardMultipartHttpServletRequest standardRequest = new StandardMultipartHttpServletRequest(request);\n\t\tMultiValueMap<String, MultipartFile> multiFileMap = standardRequest.getMultiFileMap();\n\t\tList<MultipartFile> fileList = null;\n\t\tfor (String key : multiFileMap.keySet()) {\n\t\t\tfileList = multiFileMap.get(key);\n\t\t}\n\t\tif(null == fileList || fileList.size()==0) {\n\t\t\tthrow new Exception(\"文件为空\");\n\t\t}\n\t\tList<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n\t\tString realPath = request.getServletContext().getRealPath(\"/\");\n\t\tString baseUrl = realPath+code + File.separator;\n\t\tfor(MultipartFile file : fileList) {\n\t\t\tMap<String, Object> uploadFile = fileService.uploadFile(file,baseUrl,  file.getOriginalFilename());\n\t\t\tresult.add(uploadFile);\n\t\t}\n\t\n\t\treturn result;\t\n\t}\n```\n\n```\n//另外种方式\n /**\n     * 实现多文件上传\n     **/\n    @RequestMapping(value = \"/multifile\", method = RequestMethod.POST)\n    @ResponseBody\n    public ResultUtil multifileUpload(\n            @RequestParam(\"fileName\") List<MultipartFile> files) {\n        if (files.isEmpty()) {\n            return ResultUtil.failed(\"文件为空\");\n        }\n        for (MultipartFile file : files) {\n            String fileName = file.getOriginalFilename();\n            int size = (int) file.getSize();\n            logger.info(fileName + \"-->\" + size);\n\n            if (file.isEmpty()) {\n                return ResultUtil.failed(\"文件为空\");\n            } else {\n                File dest = new File(path + \"/\" + fileName);\n                if (!dest.getParentFile().exists()) {\n                    dest.getParentFile().mkdir();\n                }\n                try {\n                    file.transferTo(dest);\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                    return ResultUtil.failed();\n                }\n            }\n        }\n        return ResultUtil.success(null);\n    }\n\n```\n\nservice\n\n```\npublic Map<String, Object> uploadFile(MultipartFile file,String baseUrl,String fileName) {\n\t\tif (file.isEmpty()) {\n\t\t\tthrow new Exception(\"文件为空\");\n        }\n        File dest = new File(baseUrl+fileName);\n\t\tif (!dest.getParentFile().exists()) {\n\t\t\tdest.getParentFile().mkdirs();\n        }\n        try {\n            file.transferTo(dest);\n            Map<String,Object> result =new HashMap<String,Object>();\n            result.put(\"name\", fileName);\n            String hash = getFileSHA1(dest);\n            result.put(\"hash\", hash);\n            return result;\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n            throw new Exception(\"文件为空\");\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new Exception(\"文件为空\");\n        } \n\t}\n```\n\n## sha256获取文件hash\n\n这些方法也是写在service里面的\n\n```\nprivate static String getFileSHA1(File file) {\n        String str = \"\";\n        try {\n            str = getHash(file, \"SHA-256\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\t\n\tprivate static String getHash(File file, String hashType) throws Exception {\n        InputStream fis = new FileInputStream(file);\n        byte buffer[] = new byte[1024];\n        MessageDigest md5 = MessageDigest.getInstance(hashType);\n        for (int numRead = 0; (numRead = fis.read(buffer)) > 0; ) {\n            md5.update(buffer, 0, numRead);\n        }\n        fis.close();\n        return toHexString(md5.digest());\n    }\n\t\n\t private static String toHexString(byte b[]) {\n        StringBuilder sb = new StringBuilder();\n        for (byte aB : b) {\n            sb.append(Integer.toHexString(aB & 0xFF));\n        }\n        return sb.toString();\n\t }\n```\n\n","source":"_posts/element文件上传.md","raw":"---\nlayout: post\ntitle: element文件上传\ndate: 2020-07-17 17:11:17\ntags: vue\ncategories: vue\n---\n\n# element文件上传\n\n## 前言\n\n今天进行了element 文件上传组件的运用，写一下心得\n\n## 前端组件配置\n\n具体组件配置官方文档里面有，我就不一一说明了\n\n```\n//自定义上传\n<el-upload id=\"el-upload\" \n    ref=\"uploadForm\" \n    :auto-upload=\"false\" \n    :http-request=\"upLoad\" \n    :on-remove=\"onRemove\" \n    :before-upload=\"beforeUpload\"\n    > \n     <el-button slot=\"trigger\" size=\"small\" type=\"primary\">\n      点击上传\n     </el-button> \n    </template> \n   </el-upload> \n```\n\n这里主要说明两种情况：\n\n第一种直接用action配置上传地址，这种的优点就是方便、省心，element会直接把文件调用后端接口，但是不够灵活，无法传递额外的参数，也只能一个个文件上传。\n\n第二种用http-request覆盖掉默认的上传方式，可以在这里调用后端地址，配置相关请求头，增加参数等等，这里可以设置取消自动上传，然后通过按钮触发组件的上传方法，但是这种方法其实也是一个个发请求的。\n\n而且我的需求是需要在点击提交的时候根据输入的编码传给后端，然后生成文件夹的名字，所有还需要进行一些改造。\n\n```\n//我的上传方法并没有写任何东西，因为我的上传是通过点击提交的时候再自定义上传的\n//之所以要写一个空方法是因为需要获取到组件的file数组\n//如果不写这个方法  会取action里面的值来进行上传（就算action为空也会）\nupLoad(params){\n\t\n},\n```\n\n```\n//fileList是我定义的用于存储file数组的变量\n//在上传前，将文件存储到fileList里面\nbeforeUpload(file){\n\tthis.fileList.push(file)\n},\n//移除方法，将fileList里面的file去掉\nonRemove(file){\n\tlet index = this.fileList.findIndex(fileItem => fileItem.uid === file.uid);\n\tthis.fileList.splice(index, 1);\n}\n```\n\n```\n//点击提交的时候触发的方法\n//第一句话是触发上传组件的上传方法 这样才能触发beforeUpload（因为我们写了取消自动上传）\nthis.$refs.uploadForm.submit()\n//对fileList用formData拼接\nlet formData = new FormData();\nthis.fileList.forEach((item)=>{\n    formData.append(\"file\",item);\n})\n//这里设置下请求头和传递的额外参数\n$http.post(\"bmp/v1/chaincode/uploadEnclosure/\"+this.data.code, formData,{headers: {'Content-Type': 'multipart/form-data'}}).then(data => {\n\tconsole.log(data)\n}).catch(error => {\n    \tthis.$message({\n        message: \"error\",\n        type: 'error'\n        })\n    })\n```\n\n现在前端基本配置好了，调用接口就可以实现文件上传了\n\n## 后端接口\n\ncontroller\n\n```\n\t@POST\n\t@Path(\"/chaincode/uploadEnclosure/{code}\")\n\t@Consumes(MediaType.MULTIPART_FORM_DATA)\n\t@ApiOperation(\"文件上传\")\n\tpublic List<Map<String, Object>> uploadEnclosure(@Context HttpServletRequest request,@PathParam(value = \"code\") String code) {\n\t\tStandardMultipartHttpServletRequest standardRequest = new StandardMultipartHttpServletRequest(request);\n\t\tMultiValueMap<String, MultipartFile> multiFileMap = standardRequest.getMultiFileMap();\n\t\tList<MultipartFile> fileList = null;\n\t\tfor (String key : multiFileMap.keySet()) {\n\t\t\tfileList = multiFileMap.get(key);\n\t\t}\n\t\tif(null == fileList || fileList.size()==0) {\n\t\t\tthrow new Exception(\"文件为空\");\n\t\t}\n\t\tList<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n\t\tString realPath = request.getServletContext().getRealPath(\"/\");\n\t\tString baseUrl = realPath+code + File.separator;\n\t\tfor(MultipartFile file : fileList) {\n\t\t\tMap<String, Object> uploadFile = fileService.uploadFile(file,baseUrl,  file.getOriginalFilename());\n\t\t\tresult.add(uploadFile);\n\t\t}\n\t\n\t\treturn result;\t\n\t}\n```\n\n```\n//另外种方式\n /**\n     * 实现多文件上传\n     **/\n    @RequestMapping(value = \"/multifile\", method = RequestMethod.POST)\n    @ResponseBody\n    public ResultUtil multifileUpload(\n            @RequestParam(\"fileName\") List<MultipartFile> files) {\n        if (files.isEmpty()) {\n            return ResultUtil.failed(\"文件为空\");\n        }\n        for (MultipartFile file : files) {\n            String fileName = file.getOriginalFilename();\n            int size = (int) file.getSize();\n            logger.info(fileName + \"-->\" + size);\n\n            if (file.isEmpty()) {\n                return ResultUtil.failed(\"文件为空\");\n            } else {\n                File dest = new File(path + \"/\" + fileName);\n                if (!dest.getParentFile().exists()) {\n                    dest.getParentFile().mkdir();\n                }\n                try {\n                    file.transferTo(dest);\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                    return ResultUtil.failed();\n                }\n            }\n        }\n        return ResultUtil.success(null);\n    }\n\n```\n\nservice\n\n```\npublic Map<String, Object> uploadFile(MultipartFile file,String baseUrl,String fileName) {\n\t\tif (file.isEmpty()) {\n\t\t\tthrow new Exception(\"文件为空\");\n        }\n        File dest = new File(baseUrl+fileName);\n\t\tif (!dest.getParentFile().exists()) {\n\t\t\tdest.getParentFile().mkdirs();\n        }\n        try {\n            file.transferTo(dest);\n            Map<String,Object> result =new HashMap<String,Object>();\n            result.put(\"name\", fileName);\n            String hash = getFileSHA1(dest);\n            result.put(\"hash\", hash);\n            return result;\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n            throw new Exception(\"文件为空\");\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new Exception(\"文件为空\");\n        } \n\t}\n```\n\n## sha256获取文件hash\n\n这些方法也是写在service里面的\n\n```\nprivate static String getFileSHA1(File file) {\n        String str = \"\";\n        try {\n            str = getHash(file, \"SHA-256\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\t\n\tprivate static String getHash(File file, String hashType) throws Exception {\n        InputStream fis = new FileInputStream(file);\n        byte buffer[] = new byte[1024];\n        MessageDigest md5 = MessageDigest.getInstance(hashType);\n        for (int numRead = 0; (numRead = fis.read(buffer)) > 0; ) {\n            md5.update(buffer, 0, numRead);\n        }\n        fis.close();\n        return toHexString(md5.digest());\n    }\n\t\n\t private static String toHexString(byte b[]) {\n        StringBuilder sb = new StringBuilder();\n        for (byte aB : b) {\n            sb.append(Integer.toHexString(aB & 0xFF));\n        }\n        return sb.toString();\n\t }\n```\n\n","slug":"element文件上传","published":1,"updated":"2020-07-17T09:51:30.821Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6b000ahcqah75tdpcj","content":"<h1 id=\"element文件上传\"><a href=\"#element文件上传\" class=\"headerlink\" title=\"element文件上传\"></a>element文件上传</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天进行了element 文件上传组件的运用，写一下心得</p>\n<h2 id=\"前端组件配置\"><a href=\"#前端组件配置\" class=\"headerlink\" title=\"前端组件配置\"></a>前端组件配置</h2><p>具体组件配置官方文档里面有，我就不一一说明了</p>\n<pre><code>//自定义上传\n&lt;el-upload id=&quot;el-upload&quot; \n    ref=&quot;uploadForm&quot; \n    :auto-upload=&quot;false&quot; \n    :http-request=&quot;upLoad&quot; \n    :on-remove=&quot;onRemove&quot; \n    :before-upload=&quot;beforeUpload&quot;\n    &gt; \n     &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;&gt;\n      点击上传\n     &lt;/el-button&gt; \n    &lt;/template&gt; \n   &lt;/el-upload&gt; </code></pre><p>这里主要说明两种情况：</p>\n<p>第一种直接用action配置上传地址，这种的优点就是方便、省心，element会直接把文件调用后端接口，但是不够灵活，无法传递额外的参数，也只能一个个文件上传。</p>\n<p>第二种用http-request覆盖掉默认的上传方式，可以在这里调用后端地址，配置相关请求头，增加参数等等，这里可以设置取消自动上传，然后通过按钮触发组件的上传方法，但是这种方法其实也是一个个发请求的。</p>\n<p>而且我的需求是需要在点击提交的时候根据输入的编码传给后端，然后生成文件夹的名字，所有还需要进行一些改造。</p>\n<pre><code>//我的上传方法并没有写任何东西，因为我的上传是通过点击提交的时候再自定义上传的\n//之所以要写一个空方法是因为需要获取到组件的file数组\n//如果不写这个方法  会取action里面的值来进行上传（就算action为空也会）\nupLoad(params){\n\n},</code></pre><pre><code>//fileList是我定义的用于存储file数组的变量\n//在上传前，将文件存储到fileList里面\nbeforeUpload(file){\n    this.fileList.push(file)\n},\n//移除方法，将fileList里面的file去掉\nonRemove(file){\n    let index = this.fileList.findIndex(fileItem =&gt; fileItem.uid === file.uid);\n    this.fileList.splice(index, 1);\n}</code></pre><pre><code>//点击提交的时候触发的方法\n//第一句话是触发上传组件的上传方法 这样才能触发beforeUpload（因为我们写了取消自动上传）\nthis.$refs.uploadForm.submit()\n//对fileList用formData拼接\nlet formData = new FormData();\nthis.fileList.forEach((item)=&gt;{\n    formData.append(&quot;file&quot;,item);\n})\n//这里设置下请求头和传递的额外参数\n$http.post(&quot;bmp/v1/chaincode/uploadEnclosure/&quot;+this.data.code, formData,{headers: {&#39;Content-Type&#39;: &#39;multipart/form-data&#39;}}).then(data =&gt; {\n    console.log(data)\n}).catch(error =&gt; {\n        this.$message({\n        message: &quot;error&quot;,\n        type: &#39;error&#39;\n        })\n    })</code></pre><p>现在前端基本配置好了，调用接口就可以实现文件上传了</p>\n<h2 id=\"后端接口\"><a href=\"#后端接口\" class=\"headerlink\" title=\"后端接口\"></a>后端接口</h2><p>controller</p>\n<pre><code>    @POST\n    @Path(&quot;/chaincode/uploadEnclosure/{code}&quot;)\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    @ApiOperation(&quot;文件上传&quot;)\n    public List&lt;Map&lt;String, Object&gt;&gt; uploadEnclosure(@Context HttpServletRequest request,@PathParam(value = &quot;code&quot;) String code) {\n        StandardMultipartHttpServletRequest standardRequest = new StandardMultipartHttpServletRequest(request);\n        MultiValueMap&lt;String, MultipartFile&gt; multiFileMap = standardRequest.getMultiFileMap();\n        List&lt;MultipartFile&gt; fileList = null;\n        for (String key : multiFileMap.keySet()) {\n            fileList = multiFileMap.get(key);\n        }\n        if(null == fileList || fileList.size()==0) {\n            throw new Exception(&quot;文件为空&quot;);\n        }\n        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();\n        String realPath = request.getServletContext().getRealPath(&quot;/&quot;);\n        String baseUrl = realPath+code + File.separator;\n        for(MultipartFile file : fileList) {\n            Map&lt;String, Object&gt; uploadFile = fileService.uploadFile(file,baseUrl,  file.getOriginalFilename());\n            result.add(uploadFile);\n        }\n\n        return result;    \n    }</code></pre><pre><code>//另外种方式\n /**\n     * 实现多文件上传\n     **/\n    @RequestMapping(value = &quot;/multifile&quot;, method = RequestMethod.POST)\n    @ResponseBody\n    public ResultUtil multifileUpload(\n            @RequestParam(&quot;fileName&quot;) List&lt;MultipartFile&gt; files) {\n        if (files.isEmpty()) {\n            return ResultUtil.failed(&quot;文件为空&quot;);\n        }\n        for (MultipartFile file : files) {\n            String fileName = file.getOriginalFilename();\n            int size = (int) file.getSize();\n            logger.info(fileName + &quot;--&gt;&quot; + size);\n\n            if (file.isEmpty()) {\n                return ResultUtil.failed(&quot;文件为空&quot;);\n            } else {\n                File dest = new File(path + &quot;/&quot; + fileName);\n                if (!dest.getParentFile().exists()) {\n                    dest.getParentFile().mkdir();\n                }\n                try {\n                    file.transferTo(dest);\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                    return ResultUtil.failed();\n                }\n            }\n        }\n        return ResultUtil.success(null);\n    }\n</code></pre><p>service</p>\n<pre><code>public Map&lt;String, Object&gt; uploadFile(MultipartFile file,String baseUrl,String fileName) {\n        if (file.isEmpty()) {\n            throw new Exception(&quot;文件为空&quot;);\n        }\n        File dest = new File(baseUrl+fileName);\n        if (!dest.getParentFile().exists()) {\n            dest.getParentFile().mkdirs();\n        }\n        try {\n            file.transferTo(dest);\n            Map&lt;String,Object&gt; result =new HashMap&lt;String,Object&gt;();\n            result.put(&quot;name&quot;, fileName);\n            String hash = getFileSHA1(dest);\n            result.put(&quot;hash&quot;, hash);\n            return result;\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n            throw new Exception(&quot;文件为空&quot;);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new Exception(&quot;文件为空&quot;);\n        } \n    }</code></pre><h2 id=\"sha256获取文件hash\"><a href=\"#sha256获取文件hash\" class=\"headerlink\" title=\"sha256获取文件hash\"></a>sha256获取文件hash</h2><p>这些方法也是写在service里面的</p>\n<pre><code>private static String getFileSHA1(File file) {\n        String str = &quot;&quot;;\n        try {\n            str = getHash(file, &quot;SHA-256&quot;);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\n    private static String getHash(File file, String hashType) throws Exception {\n        InputStream fis = new FileInputStream(file);\n        byte buffer[] = new byte[1024];\n        MessageDigest md5 = MessageDigest.getInstance(hashType);\n        for (int numRead = 0; (numRead = fis.read(buffer)) &gt; 0; ) {\n            md5.update(buffer, 0, numRead);\n        }\n        fis.close();\n        return toHexString(md5.digest());\n    }\n\n     private static String toHexString(byte b[]) {\n        StringBuilder sb = new StringBuilder();\n        for (byte aB : b) {\n            sb.append(Integer.toHexString(aB &amp; 0xFF));\n        }\n        return sb.toString();\n     }</code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"element文件上传\"><a href=\"#element文件上传\" class=\"headerlink\" title=\"element文件上传\"></a>element文件上传</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天进行了element 文件上传组件的运用，写一下心得</p>\n<h2 id=\"前端组件配置\"><a href=\"#前端组件配置\" class=\"headerlink\" title=\"前端组件配置\"></a>前端组件配置</h2><p>具体组件配置官方文档里面有，我就不一一说明了</p>\n<pre><code>//自定义上传\n&lt;el-upload id=&quot;el-upload&quot; \n    ref=&quot;uploadForm&quot; \n    :auto-upload=&quot;false&quot; \n    :http-request=&quot;upLoad&quot; \n    :on-remove=&quot;onRemove&quot; \n    :before-upload=&quot;beforeUpload&quot;\n    &gt; \n     &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;&gt;\n      点击上传\n     &lt;/el-button&gt; \n    &lt;/template&gt; \n   &lt;/el-upload&gt; </code></pre><p>这里主要说明两种情况：</p>\n<p>第一种直接用action配置上传地址，这种的优点就是方便、省心，element会直接把文件调用后端接口，但是不够灵活，无法传递额外的参数，也只能一个个文件上传。</p>\n<p>第二种用http-request覆盖掉默认的上传方式，可以在这里调用后端地址，配置相关请求头，增加参数等等，这里可以设置取消自动上传，然后通过按钮触发组件的上传方法，但是这种方法其实也是一个个发请求的。</p>\n<p>而且我的需求是需要在点击提交的时候根据输入的编码传给后端，然后生成文件夹的名字，所有还需要进行一些改造。</p>\n<pre><code>//我的上传方法并没有写任何东西，因为我的上传是通过点击提交的时候再自定义上传的\n//之所以要写一个空方法是因为需要获取到组件的file数组\n//如果不写这个方法  会取action里面的值来进行上传（就算action为空也会）\nupLoad(params){\n\n},</code></pre><pre><code>//fileList是我定义的用于存储file数组的变量\n//在上传前，将文件存储到fileList里面\nbeforeUpload(file){\n    this.fileList.push(file)\n},\n//移除方法，将fileList里面的file去掉\nonRemove(file){\n    let index = this.fileList.findIndex(fileItem =&gt; fileItem.uid === file.uid);\n    this.fileList.splice(index, 1);\n}</code></pre><pre><code>//点击提交的时候触发的方法\n//第一句话是触发上传组件的上传方法 这样才能触发beforeUpload（因为我们写了取消自动上传）\nthis.$refs.uploadForm.submit()\n//对fileList用formData拼接\nlet formData = new FormData();\nthis.fileList.forEach((item)=&gt;{\n    formData.append(&quot;file&quot;,item);\n})\n//这里设置下请求头和传递的额外参数\n$http.post(&quot;bmp/v1/chaincode/uploadEnclosure/&quot;+this.data.code, formData,{headers: {&#39;Content-Type&#39;: &#39;multipart/form-data&#39;}}).then(data =&gt; {\n    console.log(data)\n}).catch(error =&gt; {\n        this.$message({\n        message: &quot;error&quot;,\n        type: &#39;error&#39;\n        })\n    })</code></pre><p>现在前端基本配置好了，调用接口就可以实现文件上传了</p>\n<h2 id=\"后端接口\"><a href=\"#后端接口\" class=\"headerlink\" title=\"后端接口\"></a>后端接口</h2><p>controller</p>\n<pre><code>    @POST\n    @Path(&quot;/chaincode/uploadEnclosure/{code}&quot;)\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    @ApiOperation(&quot;文件上传&quot;)\n    public List&lt;Map&lt;String, Object&gt;&gt; uploadEnclosure(@Context HttpServletRequest request,@PathParam(value = &quot;code&quot;) String code) {\n        StandardMultipartHttpServletRequest standardRequest = new StandardMultipartHttpServletRequest(request);\n        MultiValueMap&lt;String, MultipartFile&gt; multiFileMap = standardRequest.getMultiFileMap();\n        List&lt;MultipartFile&gt; fileList = null;\n        for (String key : multiFileMap.keySet()) {\n            fileList = multiFileMap.get(key);\n        }\n        if(null == fileList || fileList.size()==0) {\n            throw new Exception(&quot;文件为空&quot;);\n        }\n        List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();\n        String realPath = request.getServletContext().getRealPath(&quot;/&quot;);\n        String baseUrl = realPath+code + File.separator;\n        for(MultipartFile file : fileList) {\n            Map&lt;String, Object&gt; uploadFile = fileService.uploadFile(file,baseUrl,  file.getOriginalFilename());\n            result.add(uploadFile);\n        }\n\n        return result;    \n    }</code></pre><pre><code>//另外种方式\n /**\n     * 实现多文件上传\n     **/\n    @RequestMapping(value = &quot;/multifile&quot;, method = RequestMethod.POST)\n    @ResponseBody\n    public ResultUtil multifileUpload(\n            @RequestParam(&quot;fileName&quot;) List&lt;MultipartFile&gt; files) {\n        if (files.isEmpty()) {\n            return ResultUtil.failed(&quot;文件为空&quot;);\n        }\n        for (MultipartFile file : files) {\n            String fileName = file.getOriginalFilename();\n            int size = (int) file.getSize();\n            logger.info(fileName + &quot;--&gt;&quot; + size);\n\n            if (file.isEmpty()) {\n                return ResultUtil.failed(&quot;文件为空&quot;);\n            } else {\n                File dest = new File(path + &quot;/&quot; + fileName);\n                if (!dest.getParentFile().exists()) {\n                    dest.getParentFile().mkdir();\n                }\n                try {\n                    file.transferTo(dest);\n                } catch (Exception e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                    return ResultUtil.failed();\n                }\n            }\n        }\n        return ResultUtil.success(null);\n    }\n</code></pre><p>service</p>\n<pre><code>public Map&lt;String, Object&gt; uploadFile(MultipartFile file,String baseUrl,String fileName) {\n        if (file.isEmpty()) {\n            throw new Exception(&quot;文件为空&quot;);\n        }\n        File dest = new File(baseUrl+fileName);\n        if (!dest.getParentFile().exists()) {\n            dest.getParentFile().mkdirs();\n        }\n        try {\n            file.transferTo(dest);\n            Map&lt;String,Object&gt; result =new HashMap&lt;String,Object&gt;();\n            result.put(&quot;name&quot;, fileName);\n            String hash = getFileSHA1(dest);\n            result.put(&quot;hash&quot;, hash);\n            return result;\n        } catch (IllegalStateException e) {\n            e.printStackTrace();\n            throw new Exception(&quot;文件为空&quot;);\n        } catch (IOException e) {\n            e.printStackTrace();\n            throw new Exception(&quot;文件为空&quot;);\n        } \n    }</code></pre><h2 id=\"sha256获取文件hash\"><a href=\"#sha256获取文件hash\" class=\"headerlink\" title=\"sha256获取文件hash\"></a>sha256获取文件hash</h2><p>这些方法也是写在service里面的</p>\n<pre><code>private static String getFileSHA1(File file) {\n        String str = &quot;&quot;;\n        try {\n            str = getHash(file, &quot;SHA-256&quot;);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n\n    private static String getHash(File file, String hashType) throws Exception {\n        InputStream fis = new FileInputStream(file);\n        byte buffer[] = new byte[1024];\n        MessageDigest md5 = MessageDigest.getInstance(hashType);\n        for (int numRead = 0; (numRead = fis.read(buffer)) &gt; 0; ) {\n            md5.update(buffer, 0, numRead);\n        }\n        fis.close();\n        return toHexString(md5.digest());\n    }\n\n     private static String toHexString(byte b[]) {\n        StringBuilder sb = new StringBuilder();\n        for (byte aB : b) {\n            sb.append(Integer.toHexString(aB &amp; 0xFF));\n        }\n        return sb.toString();\n     }</code></pre>"},{"layout":"post","title":"vue常见问题","date":"2020-07-15T08:00:26.000Z","_content":"\n# vue常见问题\n\n## 前言\n\n这个系列的博客将记录我在vue中遇到的一些问题和解决思路\n\n## vue变量复制\n\n参考链接：https://blog.csdn.net/weixin_42693164/article/details/102546335\n\n我在使用vue变量的传递时出现了下面的问题\n\n```\n//我们有两个对象 a,b  都有一个x的属性\n//初始化\nthis.a = {x:1}\nthis.b = {x:2} \nconsole.log(this.a,this.b) //{x: 1} {x: 2}\nthis.a = this.b\nconsole.log(this.a,this.b) //{x: 2} {x: 2}\nthis.b.x =10\nconsole.log(this.a,this.b) //{x: 10} {x: 10}\nthis.a.x =11\nconsole.log(this.a,this.b) //{x: 11} {x: 11}\n```\n\n可以发现 当我们把b赋值给a时，后续对a或者b的修改 都会影响到另外一个变量\n\n但是如果是基本类型 就不会有这种现象，如字符串类型或者整形\n\n出现这种情况的原因是js的浅复制和深复制\n\n首先复习一下，在js中有两种数据类型\n\n```\n（1） 基本数据类型：number、string、boolean、null、undefined、symbol（ES6）\n（2） 引用数据类型：object、function（函数实际也是对象）\n```\n\n其次js有两种内存模式\n\n```\n（1）栈内存：空间小，有默认大小\n（2）堆内存：空间大，可以自适应大小\n所以从他们的特点很容易看出栈内存一般用于存储基本数据类型，而堆内存一般用于存储引用数据类型\n```\n\n我们知道一般的js都是在栈中由上至下执行的（有一些资料显示，js并没有从严格意义上去区分栈和堆，在一些场景下也是有所区分的，例如：浅复制和深复制），而堆内存的数据一般是在栈内存存了一个地址指向对应的堆内存，js执行的时候便通过这个地址来找到对应的堆内存和数据\n\n所以这个问题便知道了发生的原因，我们在进行引用数据类型的复制时，直接将引用数据类型赋给了另外一个引用数据类型，那么实际在栈中，只是简单的复制了一下栈中存放的地址，并不是这个对象实际的值，同一个地址指向的当然就是同一个值。所以改了一个，另外一个也会发生变化。这个也被称为浅复制。\n\n如何解决：深复制\n\n```\n最简单的深复制\nvar a = JSON.parse(JSON.stringify(b))\n```\n\n这个实际就是利用JSON.stringify（obj）将对象的内容转换成字符串，那么在栈内存中就会给他一个空间存储，之后这个字符串想去外面的世界看看有多精彩，通过JSON.parse还原回原来的对象，带着家一起出走到了堆内存中，在栈内存中留下了联系方式（地址），从而实现了深复制。\n\n注意：JSON.parse(JSON.stringify(obj))不能复制函数类型，obj也是要可以枚举才行，在IE7以下浏览器会报错\n\n```\n递归方法实现深复制\n\n//递归的方法:\n\nfunction deepClone(ob) {\n\t//根据不同对象类型赋值\n\tlet cloneObj= Array.isArray(obj)?[]:{}\n\t//传入值不能为空且为对象类型\n\tif(obj & typeof obj === \"object\" ){\n\t//对象的遍历方法\n\t\tfor(key in obJ){\n\t\t\t//bj. hasOwnProperty (key)是验证对象自身属性中是否有指定的属性，会忽略掉原型链上继承的属性\n\t\t\t//在遍历对象时要包略维承属性，因为for... in循环只能遍历到可枚举属性(一般默认enumerable=true )\n\t\t\t//如果检测一个对象任意属性可以用obj. prototype. hasOwmProperty (key)\n\t\t\t1f (obj.hasOmnProperty (key)){\n\t\t\t\t//判断子元素是否为对象\n\t\t\t\tif(obj,[key]&&typeof obj[key] === \"object\"){\n\t\t\t\t\t//执行递归\n\t\t\t\t\tcloneObj = deepClone(obj[key])\n\t\t\t\t}else{\n\t\t\t\t\t//不是就直按赋值\n\t\t\t\t\tclone0bj = obyfkey]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//返回结果\n\treturn cloneObj\n}\n\n```\n\n特别说明：对于js基本数据类型的赋值谈不上是深复制,因为每每声明一个变量时，栈内存中就会给其一个固定空间，如下面的a和b，实际他们两个都在各自的空间，空间里面都放着实际值，互不干扰。\n\n番外：Null的数据类型实际是object类型，为何会在基本数据类型里面呢？？？\n查看资料很多都说是一个将错就错的bug\n实际想一下，很多关于提高性能的书里面都有提到一个“对象不用时就obj=null“，这是因为浏览器有一个垃圾回收机制，当检测到这原有的堆内存没有被占用了就会被销毁，null就相当于一个对象的空地址,值就是固定的，占用空间是固定的，这可能就是将错就错的原因，没有用的全局对象不手动销毁，浏览器在不能检测这个变量何时不再使用，就不会销毁，会造成内存泄漏。\n\n\n\n## vue alert问题\n\n```\n//有时候我们在vue里面直接写\nalert(\"hello\")\n//是不起效果的\n//我们可以更改写法\nwidow.alert(\"hello\")\n//这样是有效果的\n//原因是vue this的指向问题\n```\n\n","source":"_posts/vue常见问题.md","raw":"---\nlayout: post\ntitle: vue常见问题\ndate: 2020-07-15 16:00:26\ntags: vue\ncategories: vue\n---\n\n# vue常见问题\n\n## 前言\n\n这个系列的博客将记录我在vue中遇到的一些问题和解决思路\n\n## vue变量复制\n\n参考链接：https://blog.csdn.net/weixin_42693164/article/details/102546335\n\n我在使用vue变量的传递时出现了下面的问题\n\n```\n//我们有两个对象 a,b  都有一个x的属性\n//初始化\nthis.a = {x:1}\nthis.b = {x:2} \nconsole.log(this.a,this.b) //{x: 1} {x: 2}\nthis.a = this.b\nconsole.log(this.a,this.b) //{x: 2} {x: 2}\nthis.b.x =10\nconsole.log(this.a,this.b) //{x: 10} {x: 10}\nthis.a.x =11\nconsole.log(this.a,this.b) //{x: 11} {x: 11}\n```\n\n可以发现 当我们把b赋值给a时，后续对a或者b的修改 都会影响到另外一个变量\n\n但是如果是基本类型 就不会有这种现象，如字符串类型或者整形\n\n出现这种情况的原因是js的浅复制和深复制\n\n首先复习一下，在js中有两种数据类型\n\n```\n（1） 基本数据类型：number、string、boolean、null、undefined、symbol（ES6）\n（2） 引用数据类型：object、function（函数实际也是对象）\n```\n\n其次js有两种内存模式\n\n```\n（1）栈内存：空间小，有默认大小\n（2）堆内存：空间大，可以自适应大小\n所以从他们的特点很容易看出栈内存一般用于存储基本数据类型，而堆内存一般用于存储引用数据类型\n```\n\n我们知道一般的js都是在栈中由上至下执行的（有一些资料显示，js并没有从严格意义上去区分栈和堆，在一些场景下也是有所区分的，例如：浅复制和深复制），而堆内存的数据一般是在栈内存存了一个地址指向对应的堆内存，js执行的时候便通过这个地址来找到对应的堆内存和数据\n\n所以这个问题便知道了发生的原因，我们在进行引用数据类型的复制时，直接将引用数据类型赋给了另外一个引用数据类型，那么实际在栈中，只是简单的复制了一下栈中存放的地址，并不是这个对象实际的值，同一个地址指向的当然就是同一个值。所以改了一个，另外一个也会发生变化。这个也被称为浅复制。\n\n如何解决：深复制\n\n```\n最简单的深复制\nvar a = JSON.parse(JSON.stringify(b))\n```\n\n这个实际就是利用JSON.stringify（obj）将对象的内容转换成字符串，那么在栈内存中就会给他一个空间存储，之后这个字符串想去外面的世界看看有多精彩，通过JSON.parse还原回原来的对象，带着家一起出走到了堆内存中，在栈内存中留下了联系方式（地址），从而实现了深复制。\n\n注意：JSON.parse(JSON.stringify(obj))不能复制函数类型，obj也是要可以枚举才行，在IE7以下浏览器会报错\n\n```\n递归方法实现深复制\n\n//递归的方法:\n\nfunction deepClone(ob) {\n\t//根据不同对象类型赋值\n\tlet cloneObj= Array.isArray(obj)?[]:{}\n\t//传入值不能为空且为对象类型\n\tif(obj & typeof obj === \"object\" ){\n\t//对象的遍历方法\n\t\tfor(key in obJ){\n\t\t\t//bj. hasOwnProperty (key)是验证对象自身属性中是否有指定的属性，会忽略掉原型链上继承的属性\n\t\t\t//在遍历对象时要包略维承属性，因为for... in循环只能遍历到可枚举属性(一般默认enumerable=true )\n\t\t\t//如果检测一个对象任意属性可以用obj. prototype. hasOwmProperty (key)\n\t\t\t1f (obj.hasOmnProperty (key)){\n\t\t\t\t//判断子元素是否为对象\n\t\t\t\tif(obj,[key]&&typeof obj[key] === \"object\"){\n\t\t\t\t\t//执行递归\n\t\t\t\t\tcloneObj = deepClone(obj[key])\n\t\t\t\t}else{\n\t\t\t\t\t//不是就直按赋值\n\t\t\t\t\tclone0bj = obyfkey]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//返回结果\n\treturn cloneObj\n}\n\n```\n\n特别说明：对于js基本数据类型的赋值谈不上是深复制,因为每每声明一个变量时，栈内存中就会给其一个固定空间，如下面的a和b，实际他们两个都在各自的空间，空间里面都放着实际值，互不干扰。\n\n番外：Null的数据类型实际是object类型，为何会在基本数据类型里面呢？？？\n查看资料很多都说是一个将错就错的bug\n实际想一下，很多关于提高性能的书里面都有提到一个“对象不用时就obj=null“，这是因为浏览器有一个垃圾回收机制，当检测到这原有的堆内存没有被占用了就会被销毁，null就相当于一个对象的空地址,值就是固定的，占用空间是固定的，这可能就是将错就错的原因，没有用的全局对象不手动销毁，浏览器在不能检测这个变量何时不再使用，就不会销毁，会造成内存泄漏。\n\n\n\n## vue alert问题\n\n```\n//有时候我们在vue里面直接写\nalert(\"hello\")\n//是不起效果的\n//我们可以更改写法\nwidow.alert(\"hello\")\n//这样是有效果的\n//原因是vue this的指向问题\n```\n\n","slug":"vue常见问题","published":1,"updated":"2020-07-16T01:39:42.347Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6d000fhcqa0bpm9o9f","content":"<h1 id=\"vue常见问题\"><a href=\"#vue常见问题\" class=\"headerlink\" title=\"vue常见问题\"></a>vue常见问题</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个系列的博客将记录我在vue中遇到的一些问题和解决思路</p>\n<h2 id=\"vue变量复制\"><a href=\"#vue变量复制\" class=\"headerlink\" title=\"vue变量复制\"></a>vue变量复制</h2><p>参考链接：<a href=\"https://blog.csdn.net/weixin_42693164/article/details/102546335\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42693164/article/details/102546335</a></p>\n<p>我在使用vue变量的传递时出现了下面的问题</p>\n<pre><code>//我们有两个对象 a,b  都有一个x的属性\n//初始化\nthis.a = {x:1}\nthis.b = {x:2} \nconsole.log(this.a,this.b) //{x: 1} {x: 2}\nthis.a = this.b\nconsole.log(this.a,this.b) //{x: 2} {x: 2}\nthis.b.x =10\nconsole.log(this.a,this.b) //{x: 10} {x: 10}\nthis.a.x =11\nconsole.log(this.a,this.b) //{x: 11} {x: 11}</code></pre><p>可以发现 当我们把b赋值给a时，后续对a或者b的修改 都会影响到另外一个变量</p>\n<p>但是如果是基本类型 就不会有这种现象，如字符串类型或者整形</p>\n<p>出现这种情况的原因是js的浅复制和深复制</p>\n<p>首先复习一下，在js中有两种数据类型</p>\n<pre><code>（1） 基本数据类型：number、string、boolean、null、undefined、symbol（ES6）\n（2） 引用数据类型：object、function（函数实际也是对象）</code></pre><p>其次js有两种内存模式</p>\n<pre><code>（1）栈内存：空间小，有默认大小\n（2）堆内存：空间大，可以自适应大小\n所以从他们的特点很容易看出栈内存一般用于存储基本数据类型，而堆内存一般用于存储引用数据类型</code></pre><p>我们知道一般的js都是在栈中由上至下执行的（有一些资料显示，js并没有从严格意义上去区分栈和堆，在一些场景下也是有所区分的，例如：浅复制和深复制），而堆内存的数据一般是在栈内存存了一个地址指向对应的堆内存，js执行的时候便通过这个地址来找到对应的堆内存和数据</p>\n<p>所以这个问题便知道了发生的原因，我们在进行引用数据类型的复制时，直接将引用数据类型赋给了另外一个引用数据类型，那么实际在栈中，只是简单的复制了一下栈中存放的地址，并不是这个对象实际的值，同一个地址指向的当然就是同一个值。所以改了一个，另外一个也会发生变化。这个也被称为浅复制。</p>\n<p>如何解决：深复制</p>\n<pre><code>最简单的深复制\nvar a = JSON.parse(JSON.stringify(b))</code></pre><p>这个实际就是利用JSON.stringify（obj）将对象的内容转换成字符串，那么在栈内存中就会给他一个空间存储，之后这个字符串想去外面的世界看看有多精彩，通过JSON.parse还原回原来的对象，带着家一起出走到了堆内存中，在栈内存中留下了联系方式（地址），从而实现了深复制。</p>\n<p>注意：JSON.parse(JSON.stringify(obj))不能复制函数类型，obj也是要可以枚举才行，在IE7以下浏览器会报错</p>\n<pre><code>递归方法实现深复制\n\n//递归的方法:\n\nfunction deepClone(ob) {\n    //根据不同对象类型赋值\n    let cloneObj= Array.isArray(obj)?[]:{}\n    //传入值不能为空且为对象类型\n    if(obj &amp; typeof obj === &quot;object&quot; ){\n    //对象的遍历方法\n        for(key in obJ){\n            //bj. hasOwnProperty (key)是验证对象自身属性中是否有指定的属性，会忽略掉原型链上继承的属性\n            //在遍历对象时要包略维承属性，因为for... in循环只能遍历到可枚举属性(一般默认enumerable=true )\n            //如果检测一个对象任意属性可以用obj. prototype. hasOwmProperty (key)\n            1f (obj.hasOmnProperty (key)){\n                //判断子元素是否为对象\n                if(obj,[key]&amp;&amp;typeof obj[key] === &quot;object&quot;){\n                    //执行递归\n                    cloneObj = deepClone(obj[key])\n                }else{\n                    //不是就直按赋值\n                    clone0bj = obyfkey]\n                }\n            }\n        }\n    }\n    //返回结果\n    return cloneObj\n}\n</code></pre><p>特别说明：对于js基本数据类型的赋值谈不上是深复制,因为每每声明一个变量时，栈内存中就会给其一个固定空间，如下面的a和b，实际他们两个都在各自的空间，空间里面都放着实际值，互不干扰。</p>\n<p>番外：Null的数据类型实际是object类型，为何会在基本数据类型里面呢？？？<br>查看资料很多都说是一个将错就错的bug<br>实际想一下，很多关于提高性能的书里面都有提到一个“对象不用时就obj=null“，这是因为浏览器有一个垃圾回收机制，当检测到这原有的堆内存没有被占用了就会被销毁，null就相当于一个对象的空地址,值就是固定的，占用空间是固定的，这可能就是将错就错的原因，没有用的全局对象不手动销毁，浏览器在不能检测这个变量何时不再使用，就不会销毁，会造成内存泄漏。</p>\n<h2 id=\"vue-alert问题\"><a href=\"#vue-alert问题\" class=\"headerlink\" title=\"vue alert问题\"></a>vue alert问题</h2><pre><code>//有时候我们在vue里面直接写\nalert(&quot;hello&quot;)\n//是不起效果的\n//我们可以更改写法\nwidow.alert(&quot;hello&quot;)\n//这样是有效果的\n//原因是vue this的指向问题</code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"vue常见问题\"><a href=\"#vue常见问题\" class=\"headerlink\" title=\"vue常见问题\"></a>vue常见问题</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这个系列的博客将记录我在vue中遇到的一些问题和解决思路</p>\n<h2 id=\"vue变量复制\"><a href=\"#vue变量复制\" class=\"headerlink\" title=\"vue变量复制\"></a>vue变量复制</h2><p>参考链接：<a href=\"https://blog.csdn.net/weixin_42693164/article/details/102546335\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_42693164/article/details/102546335</a></p>\n<p>我在使用vue变量的传递时出现了下面的问题</p>\n<pre><code>//我们有两个对象 a,b  都有一个x的属性\n//初始化\nthis.a = {x:1}\nthis.b = {x:2} \nconsole.log(this.a,this.b) //{x: 1} {x: 2}\nthis.a = this.b\nconsole.log(this.a,this.b) //{x: 2} {x: 2}\nthis.b.x =10\nconsole.log(this.a,this.b) //{x: 10} {x: 10}\nthis.a.x =11\nconsole.log(this.a,this.b) //{x: 11} {x: 11}</code></pre><p>可以发现 当我们把b赋值给a时，后续对a或者b的修改 都会影响到另外一个变量</p>\n<p>但是如果是基本类型 就不会有这种现象，如字符串类型或者整形</p>\n<p>出现这种情况的原因是js的浅复制和深复制</p>\n<p>首先复习一下，在js中有两种数据类型</p>\n<pre><code>（1） 基本数据类型：number、string、boolean、null、undefined、symbol（ES6）\n（2） 引用数据类型：object、function（函数实际也是对象）</code></pre><p>其次js有两种内存模式</p>\n<pre><code>（1）栈内存：空间小，有默认大小\n（2）堆内存：空间大，可以自适应大小\n所以从他们的特点很容易看出栈内存一般用于存储基本数据类型，而堆内存一般用于存储引用数据类型</code></pre><p>我们知道一般的js都是在栈中由上至下执行的（有一些资料显示，js并没有从严格意义上去区分栈和堆，在一些场景下也是有所区分的，例如：浅复制和深复制），而堆内存的数据一般是在栈内存存了一个地址指向对应的堆内存，js执行的时候便通过这个地址来找到对应的堆内存和数据</p>\n<p>所以这个问题便知道了发生的原因，我们在进行引用数据类型的复制时，直接将引用数据类型赋给了另外一个引用数据类型，那么实际在栈中，只是简单的复制了一下栈中存放的地址，并不是这个对象实际的值，同一个地址指向的当然就是同一个值。所以改了一个，另外一个也会发生变化。这个也被称为浅复制。</p>\n<p>如何解决：深复制</p>\n<pre><code>最简单的深复制\nvar a = JSON.parse(JSON.stringify(b))</code></pre><p>这个实际就是利用JSON.stringify（obj）将对象的内容转换成字符串，那么在栈内存中就会给他一个空间存储，之后这个字符串想去外面的世界看看有多精彩，通过JSON.parse还原回原来的对象，带着家一起出走到了堆内存中，在栈内存中留下了联系方式（地址），从而实现了深复制。</p>\n<p>注意：JSON.parse(JSON.stringify(obj))不能复制函数类型，obj也是要可以枚举才行，在IE7以下浏览器会报错</p>\n<pre><code>递归方法实现深复制\n\n//递归的方法:\n\nfunction deepClone(ob) {\n    //根据不同对象类型赋值\n    let cloneObj= Array.isArray(obj)?[]:{}\n    //传入值不能为空且为对象类型\n    if(obj &amp; typeof obj === &quot;object&quot; ){\n    //对象的遍历方法\n        for(key in obJ){\n            //bj. hasOwnProperty (key)是验证对象自身属性中是否有指定的属性，会忽略掉原型链上继承的属性\n            //在遍历对象时要包略维承属性，因为for... in循环只能遍历到可枚举属性(一般默认enumerable=true )\n            //如果检测一个对象任意属性可以用obj. prototype. hasOwmProperty (key)\n            1f (obj.hasOmnProperty (key)){\n                //判断子元素是否为对象\n                if(obj,[key]&amp;&amp;typeof obj[key] === &quot;object&quot;){\n                    //执行递归\n                    cloneObj = deepClone(obj[key])\n                }else{\n                    //不是就直按赋值\n                    clone0bj = obyfkey]\n                }\n            }\n        }\n    }\n    //返回结果\n    return cloneObj\n}\n</code></pre><p>特别说明：对于js基本数据类型的赋值谈不上是深复制,因为每每声明一个变量时，栈内存中就会给其一个固定空间，如下面的a和b，实际他们两个都在各自的空间，空间里面都放着实际值，互不干扰。</p>\n<p>番外：Null的数据类型实际是object类型，为何会在基本数据类型里面呢？？？<br>查看资料很多都说是一个将错就错的bug<br>实际想一下，很多关于提高性能的书里面都有提到一个“对象不用时就obj=null“，这是因为浏览器有一个垃圾回收机制，当检测到这原有的堆内存没有被占用了就会被销毁，null就相当于一个对象的空地址,值就是固定的，占用空间是固定的，这可能就是将错就错的原因，没有用的全局对象不手动销毁，浏览器在不能检测这个变量何时不再使用，就不会销毁，会造成内存泄漏。</p>\n<h2 id=\"vue-alert问题\"><a href=\"#vue-alert问题\" class=\"headerlink\" title=\"vue alert问题\"></a>vue alert问题</h2><pre><code>//有时候我们在vue里面直接写\nalert(&quot;hello&quot;)\n//是不起效果的\n//我们可以更改写法\nwidow.alert(&quot;hello&quot;)\n//这样是有效果的\n//原因是vue this的指向问题</code></pre>"},{"layout":"post","title":"fabric搭建（二）","date":"2020-07-14T01:05:18.000Z","_content":"\n# fabric搭建（二）\n\n\n## 前言\n\n上一节我们搭建了fabric所需要的基本环境 docker、docker-compose、go语言环境等，今天进行Fabric源码及镜像文件处理\n\n## 参考连接\n\nhttps://www.cnblogs.com/aberic/p/7532114.html\n\nhttps://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\n\nhttps://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\n\n## Fabric源码及镜像文件处理\n\n### 下载Fabric源码\n\n首先我们需要去到昨天下的go语言目录，因为下载的fabric列子和工具都需要go的环境\n\n通过命令\n\n```\necho $GOPATH\n```\n\n可以查看运行go的位置\n\n运行结果\n\n![](fabric搭建（二）/go-path.png) \n\n\n\n在去到刚刚go的目录\n\n```\ncd /opt/gopath\n```\n\n接下来需要用git下载源码，可以省事用下面的命令\n\n```\ngo get github.com/hyperledger/fabric\n```\n\n如果没有git环境的话，请跳至[Git安装](###Git安装)\n\n安装好了之后 进入到项目的目录，切换分支  可以根据自己的要求切换分支\n\n```\ncd /opt/gopath/src/github.com/hyperledger/fabric/\ngit checkout -b release-2.2 \n```\n\n项目文件结构\n![](fabric搭建（二）/fabric-file.png) \n\n### Git安装\n\n当你的linux上没有git时，我们需要安装git来完成某些拉取的功能\n\n参考链接：[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git](https://git-scm.com/book/zh/v2/起步-安装-Git)\n\nhttps://www.cnblogs.com/wulixia/p/11016684.html\n\n我采用的yum安装\n\n```\nyum -y install git\ngit --version\n```\n\n运行结果\n![](fabric搭建（二）/git-version.png) \n\n\n\n### 下载Fabric相关镜像文件\n\n本质上我们可以直接利用在/opt/gopath/src/github.com/hyperledger/fabric/scripts目录下有一个bootstrap-1.0.0.sh脚本文件，事实上如果外网访问条件优越的情况下，直接运行该脚本即可下载所有所需的fabric镜像文件及官方指定所需的二进制文件。\n\n```\ncd /opt/gopath/src/github.com/hyperledger/fabric/scripts\n./bootstrap.sh \n```\n\n网络不好的情况下考虑下面的做法\n\n利用docker下载fabric镜像\n\n```\n#后面的版本号可以不填 默认最新 但是用最新的可能会有pull出错的情况\ndocker pull hyperledger/fabric-peer:2.2\ndocker pull hyperledger/fabric-tools:2.2\ndocker pull hyperledger/fabric-orderer:2.2\ndocker pull hyperledger/fabric-couchdb:amd64-0.4\ndocker pull hyperledger/fabric-kafka:amd64-0.4\ndocker pull hyperledger/fabric-ca:1.4\ndocker pull hyperledger/fabric-zookeeper:amd64-0.4\ndocker pull hyperledger/fabric-baseos:2.2\n常用镜像\nhyperledger/fabric-peer\nhyperledger/fabric-tools\nhyperledger/fabric-orderer\nhyperledger/fabric-couchdb\nhyperledger/fabric-kafka\nhyperledger/fabric-ca\nhyperledger/fabric-zookeeper\nhyperledger/fabric-baseos\n```\n\n为了方便docker-compose的配置，我们将所有的镜像tag都改为latest，执行如下格式的命令：\n\n```\ndocker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）\ndocker tag 5eb2356665e7 docker.io/hyperledger/fabric-tools:latest\ndocker tag 760f304a3282 docker.io/hyperledger/fabric-peer:latest\ndocker tag 5fb8e97da88d docker.io/hyperledger/fabric-orderer:latest\ndocker tag aa2bdf8013af docker.io/hyperledger/fabric-baseos:latest\ndocker tag bbcd552150f4 docker.io/hyperledger/fabric-zookeeper:latest\ndocker tag 7e0396b6d64e docker.io/hyperledger/fabric-kafka:latest\ndocker tag b967e8b98b6b docker.io/hyperledger/fabric-couchdb:latest\ndocker tag 743a758fae29 docker.io/hyperledger/fabric-ca:latest\n```\n\n","source":"_posts/fabric搭建（二）.md","raw":"---\nlayout: post\ntitle: fabric搭建（二）\ndate: 2020-07-14 09:05:18\ntags: Fabric\ncategories: Fabric\n---\n\n# fabric搭建（二）\n\n\n## 前言\n\n上一节我们搭建了fabric所需要的基本环境 docker、docker-compose、go语言环境等，今天进行Fabric源码及镜像文件处理\n\n## 参考连接\n\nhttps://www.cnblogs.com/aberic/p/7532114.html\n\nhttps://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\n\nhttps://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\n\n## Fabric源码及镜像文件处理\n\n### 下载Fabric源码\n\n首先我们需要去到昨天下的go语言目录，因为下载的fabric列子和工具都需要go的环境\n\n通过命令\n\n```\necho $GOPATH\n```\n\n可以查看运行go的位置\n\n运行结果\n\n![](fabric搭建（二）/go-path.png) \n\n\n\n在去到刚刚go的目录\n\n```\ncd /opt/gopath\n```\n\n接下来需要用git下载源码，可以省事用下面的命令\n\n```\ngo get github.com/hyperledger/fabric\n```\n\n如果没有git环境的话，请跳至[Git安装](###Git安装)\n\n安装好了之后 进入到项目的目录，切换分支  可以根据自己的要求切换分支\n\n```\ncd /opt/gopath/src/github.com/hyperledger/fabric/\ngit checkout -b release-2.2 \n```\n\n项目文件结构\n![](fabric搭建（二）/fabric-file.png) \n\n### Git安装\n\n当你的linux上没有git时，我们需要安装git来完成某些拉取的功能\n\n参考链接：[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git](https://git-scm.com/book/zh/v2/起步-安装-Git)\n\nhttps://www.cnblogs.com/wulixia/p/11016684.html\n\n我采用的yum安装\n\n```\nyum -y install git\ngit --version\n```\n\n运行结果\n![](fabric搭建（二）/git-version.png) \n\n\n\n### 下载Fabric相关镜像文件\n\n本质上我们可以直接利用在/opt/gopath/src/github.com/hyperledger/fabric/scripts目录下有一个bootstrap-1.0.0.sh脚本文件，事实上如果外网访问条件优越的情况下，直接运行该脚本即可下载所有所需的fabric镜像文件及官方指定所需的二进制文件。\n\n```\ncd /opt/gopath/src/github.com/hyperledger/fabric/scripts\n./bootstrap.sh \n```\n\n网络不好的情况下考虑下面的做法\n\n利用docker下载fabric镜像\n\n```\n#后面的版本号可以不填 默认最新 但是用最新的可能会有pull出错的情况\ndocker pull hyperledger/fabric-peer:2.2\ndocker pull hyperledger/fabric-tools:2.2\ndocker pull hyperledger/fabric-orderer:2.2\ndocker pull hyperledger/fabric-couchdb:amd64-0.4\ndocker pull hyperledger/fabric-kafka:amd64-0.4\ndocker pull hyperledger/fabric-ca:1.4\ndocker pull hyperledger/fabric-zookeeper:amd64-0.4\ndocker pull hyperledger/fabric-baseos:2.2\n常用镜像\nhyperledger/fabric-peer\nhyperledger/fabric-tools\nhyperledger/fabric-orderer\nhyperledger/fabric-couchdb\nhyperledger/fabric-kafka\nhyperledger/fabric-ca\nhyperledger/fabric-zookeeper\nhyperledger/fabric-baseos\n```\n\n为了方便docker-compose的配置，我们将所有的镜像tag都改为latest，执行如下格式的命令：\n\n```\ndocker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）\ndocker tag 5eb2356665e7 docker.io/hyperledger/fabric-tools:latest\ndocker tag 760f304a3282 docker.io/hyperledger/fabric-peer:latest\ndocker tag 5fb8e97da88d docker.io/hyperledger/fabric-orderer:latest\ndocker tag aa2bdf8013af docker.io/hyperledger/fabric-baseos:latest\ndocker tag bbcd552150f4 docker.io/hyperledger/fabric-zookeeper:latest\ndocker tag 7e0396b6d64e docker.io/hyperledger/fabric-kafka:latest\ndocker tag b967e8b98b6b docker.io/hyperledger/fabric-couchdb:latest\ndocker tag 743a758fae29 docker.io/hyperledger/fabric-ca:latest\n```\n\n","slug":"fabric搭建（二）","published":1,"updated":"2020-07-15T02:03:47.402Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6e000ghcqa8oqrdlmc","content":"<h1 id=\"fabric搭建（二）\"><a href=\"#fabric搭建（二）\" class=\"headerlink\" title=\"fabric搭建（二）\"></a>fabric搭建（二）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一节我们搭建了fabric所需要的基本环境 docker、docker-compose、go语言环境等，今天进行Fabric源码及镜像文件处理</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><p><a href=\"https://www.cnblogs.com/aberic/p/7532114.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aberic/p/7532114.html</a></p>\n<p><a href=\"https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\" target=\"_blank\" rel=\"noopener\">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p>\n<p><a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\" target=\"_blank\" rel=\"noopener\">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p>\n<h2 id=\"Fabric源码及镜像文件处理\"><a href=\"#Fabric源码及镜像文件处理\" class=\"headerlink\" title=\"Fabric源码及镜像文件处理\"></a>Fabric源码及镜像文件处理</h2><h3 id=\"下载Fabric源码\"><a href=\"#下载Fabric源码\" class=\"headerlink\" title=\"下载Fabric源码\"></a>下载Fabric源码</h3><p>首先我们需要去到昨天下的go语言目录，因为下载的fabric列子和工具都需要go的环境</p>\n<p>通过命令</p>\n<pre><code>echo $GOPATH</code></pre><p>可以查看运行go的位置</p>\n<p>运行结果</p>\n<p><img src=\"/2020/07/14/fabric-da-jian-er/go-path.png\" alt> </p>\n<p>在去到刚刚go的目录</p>\n<pre><code>cd /opt/gopath</code></pre><p>接下来需要用git下载源码，可以省事用下面的命令</p>\n<pre><code>go get github.com/hyperledger/fabric</code></pre><p>如果没有git环境的话，请跳至<a href=\"###Git安装\">Git安装</a></p>\n<p>安装好了之后 进入到项目的目录，切换分支  可以根据自己的要求切换分支</p>\n<pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/\ngit checkout -b release-2.2 </code></pre><p>项目文件结构<br><img src=\"/2020/07/14/fabric-da-jian-er/fabric-file.png\" alt> </p>\n<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>当你的linux上没有git时，我们需要安装git来完成某些拉取的功能</p>\n<p>参考链接：<a href=\"https://git-scm.com/book/zh/v2/起步-安装-Git\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</a></p>\n<p><a href=\"https://www.cnblogs.com/wulixia/p/11016684.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wulixia/p/11016684.html</a></p>\n<p>我采用的yum安装</p>\n<pre><code>yum -y install git\ngit --version</code></pre><p>运行结果<br><img src=\"/2020/07/14/fabric-da-jian-er/git-version.png\" alt> </p>\n<h3 id=\"下载Fabric相关镜像文件\"><a href=\"#下载Fabric相关镜像文件\" class=\"headerlink\" title=\"下载Fabric相关镜像文件\"></a>下载Fabric相关镜像文件</h3><p>本质上我们可以直接利用在/opt/gopath/src/github.com/hyperledger/fabric/scripts目录下有一个bootstrap-1.0.0.sh脚本文件，事实上如果外网访问条件优越的情况下，直接运行该脚本即可下载所有所需的fabric镜像文件及官方指定所需的二进制文件。</p>\n<pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/scripts\n./bootstrap.sh </code></pre><p>网络不好的情况下考虑下面的做法</p>\n<p>利用docker下载fabric镜像</p>\n<pre><code>#后面的版本号可以不填 默认最新 但是用最新的可能会有pull出错的情况\ndocker pull hyperledger/fabric-peer:2.2\ndocker pull hyperledger/fabric-tools:2.2\ndocker pull hyperledger/fabric-orderer:2.2\ndocker pull hyperledger/fabric-couchdb:amd64-0.4\ndocker pull hyperledger/fabric-kafka:amd64-0.4\ndocker pull hyperledger/fabric-ca:1.4\ndocker pull hyperledger/fabric-zookeeper:amd64-0.4\ndocker pull hyperledger/fabric-baseos:2.2\n常用镜像\nhyperledger/fabric-peer\nhyperledger/fabric-tools\nhyperledger/fabric-orderer\nhyperledger/fabric-couchdb\nhyperledger/fabric-kafka\nhyperledger/fabric-ca\nhyperledger/fabric-zookeeper\nhyperledger/fabric-baseos</code></pre><p>为了方便docker-compose的配置，我们将所有的镜像tag都改为latest，执行如下格式的命令：</p>\n<pre><code>docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）\ndocker tag 5eb2356665e7 docker.io/hyperledger/fabric-tools:latest\ndocker tag 760f304a3282 docker.io/hyperledger/fabric-peer:latest\ndocker tag 5fb8e97da88d docker.io/hyperledger/fabric-orderer:latest\ndocker tag aa2bdf8013af docker.io/hyperledger/fabric-baseos:latest\ndocker tag bbcd552150f4 docker.io/hyperledger/fabric-zookeeper:latest\ndocker tag 7e0396b6d64e docker.io/hyperledger/fabric-kafka:latest\ndocker tag b967e8b98b6b docker.io/hyperledger/fabric-couchdb:latest\ndocker tag 743a758fae29 docker.io/hyperledger/fabric-ca:latest</code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"fabric搭建（二）\"><a href=\"#fabric搭建（二）\" class=\"headerlink\" title=\"fabric搭建（二）\"></a>fabric搭建（二）</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一节我们搭建了fabric所需要的基本环境 docker、docker-compose、go语言环境等，今天进行Fabric源码及镜像文件处理</p>\n<h2 id=\"参考连接\"><a href=\"#参考连接\" class=\"headerlink\" title=\"参考连接\"></a>参考连接</h2><p><a href=\"https://www.cnblogs.com/aberic/p/7532114.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aberic/p/7532114.html</a></p>\n<p><a href=\"https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/\" target=\"_blank\" rel=\"noopener\">https://hyperledger.github.io/fabric-chaincode-java/release-2.2/api/</a></p>\n<p><a href=\"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html\" target=\"_blank\" rel=\"noopener\">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.0/whatis.html</a></p>\n<h2 id=\"Fabric源码及镜像文件处理\"><a href=\"#Fabric源码及镜像文件处理\" class=\"headerlink\" title=\"Fabric源码及镜像文件处理\"></a>Fabric源码及镜像文件处理</h2><h3 id=\"下载Fabric源码\"><a href=\"#下载Fabric源码\" class=\"headerlink\" title=\"下载Fabric源码\"></a>下载Fabric源码</h3><p>首先我们需要去到昨天下的go语言目录，因为下载的fabric列子和工具都需要go的环境</p>\n<p>通过命令</p>\n<pre><code>echo $GOPATH</code></pre><p>可以查看运行go的位置</p>\n<p>运行结果</p>\n<p><img src=\"/2020/07/14/fabric-da-jian-er/go-path.png\" alt> </p>\n<p>在去到刚刚go的目录</p>\n<pre><code>cd /opt/gopath</code></pre><p>接下来需要用git下载源码，可以省事用下面的命令</p>\n<pre><code>go get github.com/hyperledger/fabric</code></pre><p>如果没有git环境的话，请跳至<a href=\"###Git安装\">Git安装</a></p>\n<p>安装好了之后 进入到项目的目录，切换分支  可以根据自己的要求切换分支</p>\n<pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/\ngit checkout -b release-2.2 </code></pre><p>项目文件结构<br><img src=\"/2020/07/14/fabric-da-jian-er/fabric-file.png\" alt> </p>\n<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>当你的linux上没有git时，我们需要安装git来完成某些拉取的功能</p>\n<p>参考链接：<a href=\"https://git-scm.com/book/zh/v2/起步-安装-Git\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</a></p>\n<p><a href=\"https://www.cnblogs.com/wulixia/p/11016684.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wulixia/p/11016684.html</a></p>\n<p>我采用的yum安装</p>\n<pre><code>yum -y install git\ngit --version</code></pre><p>运行结果<br><img src=\"/2020/07/14/fabric-da-jian-er/git-version.png\" alt> </p>\n<h3 id=\"下载Fabric相关镜像文件\"><a href=\"#下载Fabric相关镜像文件\" class=\"headerlink\" title=\"下载Fabric相关镜像文件\"></a>下载Fabric相关镜像文件</h3><p>本质上我们可以直接利用在/opt/gopath/src/github.com/hyperledger/fabric/scripts目录下有一个bootstrap-1.0.0.sh脚本文件，事实上如果外网访问条件优越的情况下，直接运行该脚本即可下载所有所需的fabric镜像文件及官方指定所需的二进制文件。</p>\n<pre><code>cd /opt/gopath/src/github.com/hyperledger/fabric/scripts\n./bootstrap.sh </code></pre><p>网络不好的情况下考虑下面的做法</p>\n<p>利用docker下载fabric镜像</p>\n<pre><code>#后面的版本号可以不填 默认最新 但是用最新的可能会有pull出错的情况\ndocker pull hyperledger/fabric-peer:2.2\ndocker pull hyperledger/fabric-tools:2.2\ndocker pull hyperledger/fabric-orderer:2.2\ndocker pull hyperledger/fabric-couchdb:amd64-0.4\ndocker pull hyperledger/fabric-kafka:amd64-0.4\ndocker pull hyperledger/fabric-ca:1.4\ndocker pull hyperledger/fabric-zookeeper:amd64-0.4\ndocker pull hyperledger/fabric-baseos:2.2\n常用镜像\nhyperledger/fabric-peer\nhyperledger/fabric-tools\nhyperledger/fabric-orderer\nhyperledger/fabric-couchdb\nhyperledger/fabric-kafka\nhyperledger/fabric-ca\nhyperledger/fabric-zookeeper\nhyperledger/fabric-baseos</code></pre><p>为了方便docker-compose的配置，我们将所有的镜像tag都改为latest，执行如下格式的命令：</p>\n<pre><code>docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）\ndocker tag 5eb2356665e7 docker.io/hyperledger/fabric-tools:latest\ndocker tag 760f304a3282 docker.io/hyperledger/fabric-peer:latest\ndocker tag 5fb8e97da88d docker.io/hyperledger/fabric-orderer:latest\ndocker tag aa2bdf8013af docker.io/hyperledger/fabric-baseos:latest\ndocker tag bbcd552150f4 docker.io/hyperledger/fabric-zookeeper:latest\ndocker tag 7e0396b6d64e docker.io/hyperledger/fabric-kafka:latest\ndocker tag b967e8b98b6b docker.io/hyperledger/fabric-couchdb:latest\ndocker tag 743a758fae29 docker.io/hyperledger/fabric-ca:latest</code></pre>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-06-16T09:22:55.563Z","updated":"2020-06-16T09:22:55.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfnlni6g000khcqaejcgdv7k","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"post","title":"定时任务quartz 管理和日志","date":"2020-09-29T06:06:44.000Z","_content":"\n# 定时任务quartz 管理和日志\n\n## 前言\n\n上一篇介绍了quartz的结构和基础用法，现在则是利用反射来实现定时任务的抽取，实现动态配置定时任务和相关日志管理\n\n## 思路\n\n两个实体任务表和任务日志表。\n\n任务表存放：id、任务名、任务组名、调用类名方法名、调用目标参数、cron表达式、错误策略等\n\n```\nCREATE TABLE `td_sm_task` (\n  `task_id` varchar(64) NOT NULL COMMENT '任务ID',\n  `task_name` varchar(64) NOT NULL DEFAULT '' COMMENT '任务名称',\n  `task_group` varchar(64) DEFAULT 'DEFAULT' COMMENT '任务组名',\n  `invoke_target` varchar(500) NOT NULL COMMENT '注解value',\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT '调用目标参数',\n  `cron_expression` varchar(255) DEFAULT '' COMMENT 'cron执行表达式',\n  `misfire_policy` varchar(20) DEFAULT '3' COMMENT '计划执行错误策略（1立即执行 2执行一次 3放弃执行）',\n  `concurrent` char(1) DEFAULT '1' COMMENT '是否并发执行（0允许 1禁止）',\n  `status` char(1) DEFAULT '0' COMMENT '状态（0正常 1暂停）',\n  `create_by` varchar(64) DEFAULT '' COMMENT '创建者',\n  `create_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `update_by` varchar(64) DEFAULT '' COMMENT '更新者',\n  `update_time` datetime DEFAULT NULL COMMENT '更新时间',\n  `remark` varchar(500) DEFAULT '' COMMENT '备注信息',\n  PRIMARY KEY (`task_id`,`task_name`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定时任务调度表';\n```\n\n日志表存放：任务名、运行时间、运行结果等\n\n```\nCREATE TABLE `td_sm_task_log` (\n  `task_log_id` varchar(64) NOT NULL COMMENT '任务日志ID',\n  `task_name` varchar(64) NOT NULL COMMENT '任务名称',\n  `task_group` varchar(64) DEFAULT NULL COMMENT '任务组名',\n  `invoke_target` varchar(500) NOT NULL COMMENT '调用目标字符串',\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT '调用目标参数',\n  `task_message` varchar(2500) DEFAULT NULL COMMENT '日志信息',\n  `status` char(1) DEFAULT '0' COMMENT '执行状态（0正常 1失败）',\n  `exception_info` varchar(2000) DEFAULT '' COMMENT '异常信息',\n  `start_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `stop_time` datetime DEFAULT NULL COMMENT '停止时间',\n  PRIMARY KEY (`task_log_id`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定时任务调度日志表';\n```\n\n实现思路\n\n根据任务表里面的实体建立对应策略的任务实例，实例方法中，根据调用方法和参数反射调用对应方法，每次调用保存日志。\n\n应用启动时，查找所有任务表，并开启所有运行中的任务\n\n## Job类\n\n三个类 一个基础类 负责实现job接口和每次调用时新增日志\n\n两个继承类 主要是区分并发和非并发\n\n```\n//基础类\npublic abstract class AbstractQuartzTask implements Job\n{\n    private static final Logger log = LoggerFactory.getLogger(AbstractQuartzTask.class);\n\n    /**\n     * 线程本地变量\n     */\n    private static ThreadLocal<Date> threadLocal = new ThreadLocal<>();\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException\n    {\n    \tTaskDTO sysTask = new TaskDTO();\n        BeanCopierUtil.copy(context.getMergedJobDataMap().get(ScheduleConstants.TASK_PROPERTIES), sysTask);\n        try\n        {\n            before(context, sysTask);\n            if (sysTask != null)\n            {\n                doExecute(context, sysTask);\n            }\n            after(context, sysTask, null);\n        }\n        catch (Exception e)\n        {\n            log.error(\"任务执行异常  - ：\", e);\n            after(context, sysTask, e);\n        }\n    }\n\n    /**\n     * 执行前\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void before(JobExecutionContext context, TaskDTO sysTask)\n    {\n        threadLocal.set(new Date());\n    }\n\n    /**\n     * 执行后\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void after(JobExecutionContext context, TaskDTO sysTask, Exception e)\n    {\n        Date startTime = threadLocal.get();\n        threadLocal.remove();\n\n        final TaskLogDTO sysTaskLog = new TaskLogDTO();\n        sysTaskLog.setTaskName(sysTask.getTaskName());\n        sysTaskLog.setTaskGroup(sysTask.getTaskGroup());\n        sysTaskLog.setInvokeTarget(sysTask.getInvokeTarget());\n        sysTaskLog.setStartTime(startTime);\n        sysTaskLog.setStopTime(new Date());\n        long runMs = sysTaskLog.getStopTime().getTime() - sysTaskLog.getStartTime().getTime();\n       \n        String stautsMsg = \"\";\n        String errorMsg = \"\";\n        if (e != null)\n        {\n            sysTaskLog.setStatus(Constants.FAIL);\n            errorMsg = StringUtils.substring(ExceptionUtil.getExceptionMessage(e), 0, 2000);\n            stautsMsg = \"执行失败！\";\n        }\n        else\n        {\n            sysTaskLog.setStatus(Constants.SUCCESS);\n            stautsMsg = \"执行成功！\";\n        }\n        sysTaskLog.setTaskMessage(stautsMsg+\" 总共耗时：\" + runMs + \"毫秒\"+errorMsg);\n        // 写入数据库当中\n        SpringUtils.getBean(TaskLogService.class).addTaskLog(sysTaskLog);\n    }\n\n    /**\n     * 执行方法，由子类重载\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     * @throws Exception 执行过程中的异常\n     */\n    protected abstract void doExecute(JobExecutionContext context, TaskDTO sysTask) throws Exception;\n}\n\n//非并发\npublic class QuartzTaskExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n    \tTaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n//并发子类\n@DisallowConcurrentExecution\npublic class QuartzDisallowConcurrentExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n```\n\n## 反射\n\n有两种方式，一种是通过bean名+方法名确认，一种是通过注解，我使用的是通过注解\n\n通过注解  在应用启动 的时候扫描所有bean并查找其中添加了注解的方法，存储到静态变量里面。\n\n```\n// 在bean创建完成后 查找使用了C2SysTask注解的方法\n@Service\npublic class TaskBeanPostProcessor implements BeanPostProcessor {\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t\tClass<? extends Object> cla = bean.getClass();\n\t\t// 代理类的名字\n\t\tString agentName = cla.getName();\n\t\t// 原始类名字\n\t\tString originalName = cla.getName();\n\t\t// 如果被代理（事务管理、切面等） 找到原始类\n\t\tif (originalName.contains(Constants.SPRING_AGENT_NAME) || originalName.contains(Constants.SPRING_AGENT_SYMBOL)) {\n\t\t\toriginalName = originalName.substring(0, originalName.indexOf(\"$$\"));\n\t\t\ttry {\n\t\t\t\tcla = Class.forName(originalName);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\tMethod[] methods = cla.getMethods();\n\t\t// 循环方法 查找添加C2SysTask注解的方法\n\t\tfor (Method m : methods) {\n\t\t\tif (m.isAnnotationPresent(C2SysTask.class)) {\n\n\t\t\t\tC2SysTask annotation = m.getAnnotation(C2SysTask.class);\n\t\t\t\tTaskAnnotationBean beanC2SysTask = TaskInvokeUtil.getBeanFromC2SysTask(annotation.value());\n\t\t\t\t// 如果C2SysTask注解value值存在相同的值\n\t\t\t\tif (beanC2SysTask != null) {\n\t\t\t\t\tString msg = \"C2SysTask注解检测到了相同的value！->>\" + annotation.value() + \"\\n\";\n\t\t\t\t\tmsg += \"\\t\" + beanC2SysTask.getOriginalName() + \"中的方法\" + beanC2SysTask.getMethodName();\n\t\t\t\t\tmsg += \"和\" + originalName + \"中的方法\" + m.getName() + \"在注解C2SysTask中的value冲突！\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthrow new TaskAnnotationException(msg);\n\t\t\t\t\t} catch (TaskAnnotationException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tTaskAnnotationBean taskAnnotationBean = new TaskAnnotationBean();\n\t\t\t\ttaskAnnotationBean.setValue(annotation.value());\n\t\t\t\ttaskAnnotationBean.setBeanName(beanName);\n\t\t\t\ttaskAnnotationBean.setAgentName(agentName);\n\t\t\t\ttaskAnnotationBean.setOriginalName(originalName);\n\t\t\t\ttaskAnnotationBean.setMethodName(m.getName());\n\t\t\t\tParameter[] parameters = m.getParameters();\n\t\t\t\tList<C2SysTaskParameter> parametersList = new ArrayList<C2SysTaskParameter>();\n\t\t\t\t// 循环拿出参数\n\t\t\t\tfor (Parameter p : parameters) {\n\t\t\t\t\tC2SysTaskParameter c2Parameter = new C2SysTaskParameter();\n\t\t\t\t\tc2Parameter.setName(p.getName());\n\t\t\t\t\tc2Parameter.setType(p.getType());\n\t\t\t\t\tc2Parameter.setParameterizedType(p.getParameterizedType());\n\t\t\t\t\tparametersList.add(c2Parameter);\n\t\t\t\t}\n\t\t\t\ttaskAnnotationBean.setParametersList(parametersList);\n\t\t\t\tConstants.C2_SYS_TASK_ANNOTATION_BEANLIST.add(taskAnnotationBean);\n\t\t\t}\n\t\t}\n\t\treturn bean;\n\t}\n\n}\n```\n\n反射执行工具类\n\n```\npublic class TaskInvokeUtil {\n\t/**\n\t * 执行方法\n\t *\n\t * @param sysTask\n\t *            系统任务\n\t */\n\tpublic static void invokeMethod(TaskDTO sysTask) throws Exception {\n\t\tString invokeTarget = sysTask.getInvokeTarget();\n\t\tString paramStr = sysTask.getInvokeParam();\n\t\tTaskAnnotationBean task = getBeanFromC2SysTask(invokeTarget);\n\t\tif (task != null) {\n\t\t\tString beanName = task.getBeanName();\n\t\t\tString methodName = task.getMethodName();\n\t\t\tObject bean = null;\n\t\t\tList<Object[]> methodParams = getMethodParams(paramStr, task.getParametersList());\n\t\t\tif (!isValidClassName(beanName)) {\n\t\t\t\tbean = SpringUtils.getBean(beanName);\n\t\t\t} else {\n\t\t\t\tbean = Class.forName(beanName).newInstance();\n\t\t\t}\n\t\t\tinvokeMethod(bean, methodName, methodParams);\n\t\t}\n\n\t}\n\n\t/**\n\t * 调用任务方法\n\t *\n\t * @param bean\n\t *            目标对象\n\t * @param methodName\n\t *            方法名称\n\t * @param methodParams\n\t *            方法参数\n\t */\n\tprivate static void invokeMethod(Object bean, String methodName, List<Object[]> methodParams)\n\t\t\tthrows NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n\t\t\tInvocationTargetException {\n\t\tif (StringUtils.isNotNull(methodParams) && methodParams.size() > 0) {\n\t\t\tMethod method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n\t\t\tmethod.invoke(bean, getMethodParamsValue(methodParams));\n\t\t} else {\n\t\t\tMethod method = bean.getClass().getDeclaredMethod(methodName);\n\t\t\tmethod.invoke(bean);\n\t\t}\n\t}\n\n\t/**\n\t * 校验是否为为class包名\n\t * \n\t * @param str\n\t *            名称\n\t * @return true是 false否\n\t */\n\tpublic static boolean isValidClassName(String invokeTarget) {\n\t\treturn StringUtils.countMatches(invokeTarget, \".\") > 1;\n\t}\n\n\t/**\n\t * 获取method方法参数相关列表\n\t * \n\t * @param invokeTarget\n\t *            目标字符串\n\t * @param list\n\t * @return method方法相关参数列表\n\t */\n\tpublic static List<Object[]> getMethodParams(String invokeTarget, List<C2SysTaskParameter> list) {\n\t\t\n\t\tList<Object[]> classs = new LinkedList<>();\n\t\tif(StringUtils.isEmpty(invokeTarget)) {\n\t\t\treturn classs;\n\t\t}\n\t\tString[] methodParams = invokeTarget.split(\",\");\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tC2SysTaskParameter parameter = list.get(i);\n\t\t\tClass<?> type = parameter.getType();\n\t\t\tString par = methodParams[i];\n\t\t\tObject cast =null;\n\t\t\tif(type == Integer.class || type == Integer.TYPE) {\n\t\t\t\tcast = Integer.valueOf(par);\n\t\t\t}else if(type == Double.class || type == Double.TYPE) {\n\t\t\t\tcast = Double.valueOf(par);\n\t\t\t}else if(type == Float.class || type == Float.TYPE) {\n\t\t\t\tcast = Float.valueOf(par);\n\t\t\t}else if(type == Boolean.class || type == Boolean.TYPE) {\n\t\t\t\tcast = Boolean.valueOf(par);\n\t\t\t}else if(type == Byte.class || type == Byte.TYPE) {\n\t\t\t\tcast = Byte.valueOf(par);\n\t\t\t}else if(type == Short.class || type == Short.TYPE) {\n\t\t\t\tcast = Short.valueOf(par);\n\t\t\t}else if(type == Long.class || type == Long.TYPE) {\n\t\t\t\tcast = Long.valueOf(par);\n\t\t\t}else if(type == Character.class || type == Character.TYPE) {\n\t\t\t\tcast = par.charAt(0);\n\t\t\t}else if(type == String.class) {\n\t\t\t\tcast = par;\n\t\t\t}else {\n\t\t\t\tcast = type.cast(par);\n\t\t\t}\n\t\t\tclasss.add(new Object[] {cast,type});\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 获取参数类型\n\t * \n\t * @param methodParams\n\t *            参数相关列表\n\t * @return 参数类型列表\n\t */\n\tpublic static Class<?>[] getMethodParamsType(List<Object[]> methodParams) {\n\t\tClass<?>[] classs = new Class<?>[methodParams.size()];\n\t\tint index = 0;\n\t\tfor (Object[] os : methodParams) {\n\t\t\tclasss[index] = (Class<?>) os[1];\n\t\t\tindex++;\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 获取参数值\n\t * \n\t * @param methodParams\n\t *            参数相关列表\n\t * @return 参数值列表\n\t */\n\tpublic static Object[] getMethodParamsValue(List<Object[]> methodParams) {\n\t\tObject[] classs = new Object[methodParams.size()];\n\t\tint index = 0;\n\t\tfor (Object[] os : methodParams) {\n\t\t\tclasss[index] = (Object) os[0];\n\t\t\tindex++;\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 从C2_SYS_TASK_ANNOTATION_BEANLIST查找是否有相同的value\n\t * \n\t * @param key\n\t * @param value\n\t * @return\n\t */\n\tpublic static TaskAnnotationBean getBeanFromC2SysTask(String value) {\n\t\tfor (TaskAnnotationBean m : Constants.C2_SYS_TASK_ANNOTATION_BEANLIST) {\n\t\t\tif (value.equals(m.getValue())) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\n```\n\n## 启动任务\n\n工具任务实体 创建对应任务实体，并设置相关策略\n\n```\npublic class ScheduleUtils\n{\n    /**\n     * 得到quartz任务类\n     *\n     * @param sysTask 执行计划\n     * @return 具体执行任务类\n     */\n    private static Class<? extends Job> getQuartzTaskClass(TaskDTO sysTask)\n    {\n        boolean isConcurrent = \"0\".equals(sysTask.getConcurrent());\n        return isConcurrent ? QuartzTaskExecution.class : QuartzDisallowConcurrentExecution.class;\n    }\n\n    /**\n     * 构建任务触发对象\n     */\n    public static TriggerKey getTriggerKey(String jobId, String jobGroup)\n    {\n        return TriggerKey.triggerKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 构建任务键对象\n     */\n    public static JobKey getTaskKey(String jobId, String jobGroup)\n    {\n        return JobKey.jobKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 创建定时任务\n     */\n    public static void createScheduleTask(Scheduler scheduler, TaskDTO job) throws SchedulerException, TaskException\n    {\n        Class<? extends Job> jobClass = getQuartzTaskClass(job);\n        // 构建job信息\n        String jobId = job.getTaskId();\n        String jobGroup = job.getTaskGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getTaskKey(jobId, jobGroup)).build();\n\n        // 表达式调度构建器\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n\n        // 按新的cronExpression表达式构建一个新的trigger\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n\n        // 放入参数，运行时的方法可以获取\n        jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);\n\n        // 判断是否存在\n        if (scheduler.checkExists(getTaskKey(jobId, jobGroup)))\n        {\n            // 防止创建时存在数据问题 先移除，然后在执行创建操作\n            scheduler.deleteJob(getTaskKey(jobId, jobGroup));\n        }\n\n        scheduler.scheduleJob(jobDetail, trigger);\n\n        // 暂停任务\n        if (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))\n        {\n            scheduler.pauseJob(ScheduleUtils.getTaskKey(jobId, jobGroup));\n        }\n    }\n\n    /**\n     * 设置定时任务策略\n     */\n    public static CronScheduleBuilder handleCronScheduleMisfirePolicy(TaskDTO job, CronScheduleBuilder cb)\n            throws TaskException\n    {\n        switch (job.getMisfirePolicy())\n        {\n            case ScheduleConstants.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstants.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstants.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstants.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(\"The task misfire policy '\" + job.getMisfirePolicy()\n                        + \"' cannot be used in cron schedule tasks\", Code.CONFIG_ERROR);\n        }\n    }\n}\n\n```\n\n## service启动任务\n\n应用启动时 初始化所有待运行任务\n\n```\n@Service\npublic class TaskServiceImpl implements TaskService {\n\t@Autowired\n\tprivate Scheduler scheduler;\n\n\t@Autowired\n\tprivate TaskDao taskDao;\n\n\t/**\n\t * 项目启动时，初始化定时器 主要是防止手动修改数据库导致未同步到定时任务处理（注：不能手动修改数据库ID和任务组名，否则会导致脏数据）\n\t */\n\t@PostConstruct\n\tpublic void init() throws SchedulerException, TaskException {\n\t\tscheduler.clear();\n\t\t//scheduler = StdSchedulerFactory.getDefaultScheduler();\n\t\tList<TaskEO> taskList = taskDao.selectTaskAll();\n\t\tfor (TaskEO task : taskList) {\n\t\t\tTaskDTO taskDTO = new TaskDTO();\n\t\t\tif (null != task) {\n\t\t\t\tBeanCopierUtil.copy(task, taskDTO);\n\t\t\t}\n\t\t\tif(ScheduleConstants.Status.NORMAL.getValue().equals(taskDTO.getStatus())) {\n\t\t\t\tScheduleUtils.createScheduleTask(scheduler, taskDTO);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * 立即运行任务\n\t * \n\t * @param task\n\t *            调度信息\n\t */\n\t@Override\n\t@Transactional\n\tpublic void run(TaskDTO task) throws SchedulerException {\n\t\tString taskId = task.getTaskId();\n\t\tString taskGroup = task.getTaskGroup();\n\t\tTaskDTO properties = selectTaskById(task.getTaskId());\n\t\t// 参数\n\t\tJobDataMap dataMap = new JobDataMap();\n\t\tdataMap.put(ScheduleConstants.TASK_PROPERTIES, properties);\n\t\tscheduler.triggerJob(ScheduleUtils.getTaskKey(taskId, taskGroup), dataMap);\n\t}\n}\n```\n\n","source":"_posts/定时任务quartz 管理和日志.md","raw":"---\nlayout: post\ntitle: 定时任务quartz 管理和日志\ndate: 2020-09-29 14:06:44\ntags: Quartz\ncategories: Quartz\n---\n\n# 定时任务quartz 管理和日志\n\n## 前言\n\n上一篇介绍了quartz的结构和基础用法，现在则是利用反射来实现定时任务的抽取，实现动态配置定时任务和相关日志管理\n\n## 思路\n\n两个实体任务表和任务日志表。\n\n任务表存放：id、任务名、任务组名、调用类名方法名、调用目标参数、cron表达式、错误策略等\n\n```\nCREATE TABLE `td_sm_task` (\n  `task_id` varchar(64) NOT NULL COMMENT '任务ID',\n  `task_name` varchar(64) NOT NULL DEFAULT '' COMMENT '任务名称',\n  `task_group` varchar(64) DEFAULT 'DEFAULT' COMMENT '任务组名',\n  `invoke_target` varchar(500) NOT NULL COMMENT '注解value',\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT '调用目标参数',\n  `cron_expression` varchar(255) DEFAULT '' COMMENT 'cron执行表达式',\n  `misfire_policy` varchar(20) DEFAULT '3' COMMENT '计划执行错误策略（1立即执行 2执行一次 3放弃执行）',\n  `concurrent` char(1) DEFAULT '1' COMMENT '是否并发执行（0允许 1禁止）',\n  `status` char(1) DEFAULT '0' COMMENT '状态（0正常 1暂停）',\n  `create_by` varchar(64) DEFAULT '' COMMENT '创建者',\n  `create_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `update_by` varchar(64) DEFAULT '' COMMENT '更新者',\n  `update_time` datetime DEFAULT NULL COMMENT '更新时间',\n  `remark` varchar(500) DEFAULT '' COMMENT '备注信息',\n  PRIMARY KEY (`task_id`,`task_name`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定时任务调度表';\n```\n\n日志表存放：任务名、运行时间、运行结果等\n\n```\nCREATE TABLE `td_sm_task_log` (\n  `task_log_id` varchar(64) NOT NULL COMMENT '任务日志ID',\n  `task_name` varchar(64) NOT NULL COMMENT '任务名称',\n  `task_group` varchar(64) DEFAULT NULL COMMENT '任务组名',\n  `invoke_target` varchar(500) NOT NULL COMMENT '调用目标字符串',\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT '调用目标参数',\n  `task_message` varchar(2500) DEFAULT NULL COMMENT '日志信息',\n  `status` char(1) DEFAULT '0' COMMENT '执行状态（0正常 1失败）',\n  `exception_info` varchar(2000) DEFAULT '' COMMENT '异常信息',\n  `start_time` datetime DEFAULT NULL COMMENT '创建时间',\n  `stop_time` datetime DEFAULT NULL COMMENT '停止时间',\n  PRIMARY KEY (`task_log_id`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定时任务调度日志表';\n```\n\n实现思路\n\n根据任务表里面的实体建立对应策略的任务实例，实例方法中，根据调用方法和参数反射调用对应方法，每次调用保存日志。\n\n应用启动时，查找所有任务表，并开启所有运行中的任务\n\n## Job类\n\n三个类 一个基础类 负责实现job接口和每次调用时新增日志\n\n两个继承类 主要是区分并发和非并发\n\n```\n//基础类\npublic abstract class AbstractQuartzTask implements Job\n{\n    private static final Logger log = LoggerFactory.getLogger(AbstractQuartzTask.class);\n\n    /**\n     * 线程本地变量\n     */\n    private static ThreadLocal<Date> threadLocal = new ThreadLocal<>();\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException\n    {\n    \tTaskDTO sysTask = new TaskDTO();\n        BeanCopierUtil.copy(context.getMergedJobDataMap().get(ScheduleConstants.TASK_PROPERTIES), sysTask);\n        try\n        {\n            before(context, sysTask);\n            if (sysTask != null)\n            {\n                doExecute(context, sysTask);\n            }\n            after(context, sysTask, null);\n        }\n        catch (Exception e)\n        {\n            log.error(\"任务执行异常  - ：\", e);\n            after(context, sysTask, e);\n        }\n    }\n\n    /**\n     * 执行前\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void before(JobExecutionContext context, TaskDTO sysTask)\n    {\n        threadLocal.set(new Date());\n    }\n\n    /**\n     * 执行后\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void after(JobExecutionContext context, TaskDTO sysTask, Exception e)\n    {\n        Date startTime = threadLocal.get();\n        threadLocal.remove();\n\n        final TaskLogDTO sysTaskLog = new TaskLogDTO();\n        sysTaskLog.setTaskName(sysTask.getTaskName());\n        sysTaskLog.setTaskGroup(sysTask.getTaskGroup());\n        sysTaskLog.setInvokeTarget(sysTask.getInvokeTarget());\n        sysTaskLog.setStartTime(startTime);\n        sysTaskLog.setStopTime(new Date());\n        long runMs = sysTaskLog.getStopTime().getTime() - sysTaskLog.getStartTime().getTime();\n       \n        String stautsMsg = \"\";\n        String errorMsg = \"\";\n        if (e != null)\n        {\n            sysTaskLog.setStatus(Constants.FAIL);\n            errorMsg = StringUtils.substring(ExceptionUtil.getExceptionMessage(e), 0, 2000);\n            stautsMsg = \"执行失败！\";\n        }\n        else\n        {\n            sysTaskLog.setStatus(Constants.SUCCESS);\n            stautsMsg = \"执行成功！\";\n        }\n        sysTaskLog.setTaskMessage(stautsMsg+\" 总共耗时：\" + runMs + \"毫秒\"+errorMsg);\n        // 写入数据库当中\n        SpringUtils.getBean(TaskLogService.class).addTaskLog(sysTaskLog);\n    }\n\n    /**\n     * 执行方法，由子类重载\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     * @throws Exception 执行过程中的异常\n     */\n    protected abstract void doExecute(JobExecutionContext context, TaskDTO sysTask) throws Exception;\n}\n\n//非并发\npublic class QuartzTaskExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n    \tTaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n//并发子类\n@DisallowConcurrentExecution\npublic class QuartzDisallowConcurrentExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n```\n\n## 反射\n\n有两种方式，一种是通过bean名+方法名确认，一种是通过注解，我使用的是通过注解\n\n通过注解  在应用启动 的时候扫描所有bean并查找其中添加了注解的方法，存储到静态变量里面。\n\n```\n// 在bean创建完成后 查找使用了C2SysTask注解的方法\n@Service\npublic class TaskBeanPostProcessor implements BeanPostProcessor {\n\t@Override\n\tpublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n\t\tClass<? extends Object> cla = bean.getClass();\n\t\t// 代理类的名字\n\t\tString agentName = cla.getName();\n\t\t// 原始类名字\n\t\tString originalName = cla.getName();\n\t\t// 如果被代理（事务管理、切面等） 找到原始类\n\t\tif (originalName.contains(Constants.SPRING_AGENT_NAME) || originalName.contains(Constants.SPRING_AGENT_SYMBOL)) {\n\t\t\toriginalName = originalName.substring(0, originalName.indexOf(\"$$\"));\n\t\t\ttry {\n\t\t\t\tcla = Class.forName(originalName);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\tMethod[] methods = cla.getMethods();\n\t\t// 循环方法 查找添加C2SysTask注解的方法\n\t\tfor (Method m : methods) {\n\t\t\tif (m.isAnnotationPresent(C2SysTask.class)) {\n\n\t\t\t\tC2SysTask annotation = m.getAnnotation(C2SysTask.class);\n\t\t\t\tTaskAnnotationBean beanC2SysTask = TaskInvokeUtil.getBeanFromC2SysTask(annotation.value());\n\t\t\t\t// 如果C2SysTask注解value值存在相同的值\n\t\t\t\tif (beanC2SysTask != null) {\n\t\t\t\t\tString msg = \"C2SysTask注解检测到了相同的value！->>\" + annotation.value() + \"\\n\";\n\t\t\t\t\tmsg += \"\\t\" + beanC2SysTask.getOriginalName() + \"中的方法\" + beanC2SysTask.getMethodName();\n\t\t\t\t\tmsg += \"和\" + originalName + \"中的方法\" + m.getName() + \"在注解C2SysTask中的value冲突！\";\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthrow new TaskAnnotationException(msg);\n\t\t\t\t\t} catch (TaskAnnotationException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\tSystem.exit(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tTaskAnnotationBean taskAnnotationBean = new TaskAnnotationBean();\n\t\t\t\ttaskAnnotationBean.setValue(annotation.value());\n\t\t\t\ttaskAnnotationBean.setBeanName(beanName);\n\t\t\t\ttaskAnnotationBean.setAgentName(agentName);\n\t\t\t\ttaskAnnotationBean.setOriginalName(originalName);\n\t\t\t\ttaskAnnotationBean.setMethodName(m.getName());\n\t\t\t\tParameter[] parameters = m.getParameters();\n\t\t\t\tList<C2SysTaskParameter> parametersList = new ArrayList<C2SysTaskParameter>();\n\t\t\t\t// 循环拿出参数\n\t\t\t\tfor (Parameter p : parameters) {\n\t\t\t\t\tC2SysTaskParameter c2Parameter = new C2SysTaskParameter();\n\t\t\t\t\tc2Parameter.setName(p.getName());\n\t\t\t\t\tc2Parameter.setType(p.getType());\n\t\t\t\t\tc2Parameter.setParameterizedType(p.getParameterizedType());\n\t\t\t\t\tparametersList.add(c2Parameter);\n\t\t\t\t}\n\t\t\t\ttaskAnnotationBean.setParametersList(parametersList);\n\t\t\t\tConstants.C2_SYS_TASK_ANNOTATION_BEANLIST.add(taskAnnotationBean);\n\t\t\t}\n\t\t}\n\t\treturn bean;\n\t}\n\n}\n```\n\n反射执行工具类\n\n```\npublic class TaskInvokeUtil {\n\t/**\n\t * 执行方法\n\t *\n\t * @param sysTask\n\t *            系统任务\n\t */\n\tpublic static void invokeMethod(TaskDTO sysTask) throws Exception {\n\t\tString invokeTarget = sysTask.getInvokeTarget();\n\t\tString paramStr = sysTask.getInvokeParam();\n\t\tTaskAnnotationBean task = getBeanFromC2SysTask(invokeTarget);\n\t\tif (task != null) {\n\t\t\tString beanName = task.getBeanName();\n\t\t\tString methodName = task.getMethodName();\n\t\t\tObject bean = null;\n\t\t\tList<Object[]> methodParams = getMethodParams(paramStr, task.getParametersList());\n\t\t\tif (!isValidClassName(beanName)) {\n\t\t\t\tbean = SpringUtils.getBean(beanName);\n\t\t\t} else {\n\t\t\t\tbean = Class.forName(beanName).newInstance();\n\t\t\t}\n\t\t\tinvokeMethod(bean, methodName, methodParams);\n\t\t}\n\n\t}\n\n\t/**\n\t * 调用任务方法\n\t *\n\t * @param bean\n\t *            目标对象\n\t * @param methodName\n\t *            方法名称\n\t * @param methodParams\n\t *            方法参数\n\t */\n\tprivate static void invokeMethod(Object bean, String methodName, List<Object[]> methodParams)\n\t\t\tthrows NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n\t\t\tInvocationTargetException {\n\t\tif (StringUtils.isNotNull(methodParams) && methodParams.size() > 0) {\n\t\t\tMethod method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n\t\t\tmethod.invoke(bean, getMethodParamsValue(methodParams));\n\t\t} else {\n\t\t\tMethod method = bean.getClass().getDeclaredMethod(methodName);\n\t\t\tmethod.invoke(bean);\n\t\t}\n\t}\n\n\t/**\n\t * 校验是否为为class包名\n\t * \n\t * @param str\n\t *            名称\n\t * @return true是 false否\n\t */\n\tpublic static boolean isValidClassName(String invokeTarget) {\n\t\treturn StringUtils.countMatches(invokeTarget, \".\") > 1;\n\t}\n\n\t/**\n\t * 获取method方法参数相关列表\n\t * \n\t * @param invokeTarget\n\t *            目标字符串\n\t * @param list\n\t * @return method方法相关参数列表\n\t */\n\tpublic static List<Object[]> getMethodParams(String invokeTarget, List<C2SysTaskParameter> list) {\n\t\t\n\t\tList<Object[]> classs = new LinkedList<>();\n\t\tif(StringUtils.isEmpty(invokeTarget)) {\n\t\t\treturn classs;\n\t\t}\n\t\tString[] methodParams = invokeTarget.split(\",\");\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tC2SysTaskParameter parameter = list.get(i);\n\t\t\tClass<?> type = parameter.getType();\n\t\t\tString par = methodParams[i];\n\t\t\tObject cast =null;\n\t\t\tif(type == Integer.class || type == Integer.TYPE) {\n\t\t\t\tcast = Integer.valueOf(par);\n\t\t\t}else if(type == Double.class || type == Double.TYPE) {\n\t\t\t\tcast = Double.valueOf(par);\n\t\t\t}else if(type == Float.class || type == Float.TYPE) {\n\t\t\t\tcast = Float.valueOf(par);\n\t\t\t}else if(type == Boolean.class || type == Boolean.TYPE) {\n\t\t\t\tcast = Boolean.valueOf(par);\n\t\t\t}else if(type == Byte.class || type == Byte.TYPE) {\n\t\t\t\tcast = Byte.valueOf(par);\n\t\t\t}else if(type == Short.class || type == Short.TYPE) {\n\t\t\t\tcast = Short.valueOf(par);\n\t\t\t}else if(type == Long.class || type == Long.TYPE) {\n\t\t\t\tcast = Long.valueOf(par);\n\t\t\t}else if(type == Character.class || type == Character.TYPE) {\n\t\t\t\tcast = par.charAt(0);\n\t\t\t}else if(type == String.class) {\n\t\t\t\tcast = par;\n\t\t\t}else {\n\t\t\t\tcast = type.cast(par);\n\t\t\t}\n\t\t\tclasss.add(new Object[] {cast,type});\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 获取参数类型\n\t * \n\t * @param methodParams\n\t *            参数相关列表\n\t * @return 参数类型列表\n\t */\n\tpublic static Class<?>[] getMethodParamsType(List<Object[]> methodParams) {\n\t\tClass<?>[] classs = new Class<?>[methodParams.size()];\n\t\tint index = 0;\n\t\tfor (Object[] os : methodParams) {\n\t\t\tclasss[index] = (Class<?>) os[1];\n\t\t\tindex++;\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 获取参数值\n\t * \n\t * @param methodParams\n\t *            参数相关列表\n\t * @return 参数值列表\n\t */\n\tpublic static Object[] getMethodParamsValue(List<Object[]> methodParams) {\n\t\tObject[] classs = new Object[methodParams.size()];\n\t\tint index = 0;\n\t\tfor (Object[] os : methodParams) {\n\t\t\tclasss[index] = (Object) os[0];\n\t\t\tindex++;\n\t\t}\n\t\treturn classs;\n\t}\n\n\t/**\n\t * 从C2_SYS_TASK_ANNOTATION_BEANLIST查找是否有相同的value\n\t * \n\t * @param key\n\t * @param value\n\t * @return\n\t */\n\tpublic static TaskAnnotationBean getBeanFromC2SysTask(String value) {\n\t\tfor (TaskAnnotationBean m : Constants.C2_SYS_TASK_ANNOTATION_BEANLIST) {\n\t\t\tif (value.equals(m.getValue())) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\n```\n\n## 启动任务\n\n工具任务实体 创建对应任务实体，并设置相关策略\n\n```\npublic class ScheduleUtils\n{\n    /**\n     * 得到quartz任务类\n     *\n     * @param sysTask 执行计划\n     * @return 具体执行任务类\n     */\n    private static Class<? extends Job> getQuartzTaskClass(TaskDTO sysTask)\n    {\n        boolean isConcurrent = \"0\".equals(sysTask.getConcurrent());\n        return isConcurrent ? QuartzTaskExecution.class : QuartzDisallowConcurrentExecution.class;\n    }\n\n    /**\n     * 构建任务触发对象\n     */\n    public static TriggerKey getTriggerKey(String jobId, String jobGroup)\n    {\n        return TriggerKey.triggerKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 构建任务键对象\n     */\n    public static JobKey getTaskKey(String jobId, String jobGroup)\n    {\n        return JobKey.jobKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 创建定时任务\n     */\n    public static void createScheduleTask(Scheduler scheduler, TaskDTO job) throws SchedulerException, TaskException\n    {\n        Class<? extends Job> jobClass = getQuartzTaskClass(job);\n        // 构建job信息\n        String jobId = job.getTaskId();\n        String jobGroup = job.getTaskGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getTaskKey(jobId, jobGroup)).build();\n\n        // 表达式调度构建器\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n\n        // 按新的cronExpression表达式构建一个新的trigger\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n\n        // 放入参数，运行时的方法可以获取\n        jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);\n\n        // 判断是否存在\n        if (scheduler.checkExists(getTaskKey(jobId, jobGroup)))\n        {\n            // 防止创建时存在数据问题 先移除，然后在执行创建操作\n            scheduler.deleteJob(getTaskKey(jobId, jobGroup));\n        }\n\n        scheduler.scheduleJob(jobDetail, trigger);\n\n        // 暂停任务\n        if (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))\n        {\n            scheduler.pauseJob(ScheduleUtils.getTaskKey(jobId, jobGroup));\n        }\n    }\n\n    /**\n     * 设置定时任务策略\n     */\n    public static CronScheduleBuilder handleCronScheduleMisfirePolicy(TaskDTO job, CronScheduleBuilder cb)\n            throws TaskException\n    {\n        switch (job.getMisfirePolicy())\n        {\n            case ScheduleConstants.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstants.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstants.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstants.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(\"The task misfire policy '\" + job.getMisfirePolicy()\n                        + \"' cannot be used in cron schedule tasks\", Code.CONFIG_ERROR);\n        }\n    }\n}\n\n```\n\n## service启动任务\n\n应用启动时 初始化所有待运行任务\n\n```\n@Service\npublic class TaskServiceImpl implements TaskService {\n\t@Autowired\n\tprivate Scheduler scheduler;\n\n\t@Autowired\n\tprivate TaskDao taskDao;\n\n\t/**\n\t * 项目启动时，初始化定时器 主要是防止手动修改数据库导致未同步到定时任务处理（注：不能手动修改数据库ID和任务组名，否则会导致脏数据）\n\t */\n\t@PostConstruct\n\tpublic void init() throws SchedulerException, TaskException {\n\t\tscheduler.clear();\n\t\t//scheduler = StdSchedulerFactory.getDefaultScheduler();\n\t\tList<TaskEO> taskList = taskDao.selectTaskAll();\n\t\tfor (TaskEO task : taskList) {\n\t\t\tTaskDTO taskDTO = new TaskDTO();\n\t\t\tif (null != task) {\n\t\t\t\tBeanCopierUtil.copy(task, taskDTO);\n\t\t\t}\n\t\t\tif(ScheduleConstants.Status.NORMAL.getValue().equals(taskDTO.getStatus())) {\n\t\t\t\tScheduleUtils.createScheduleTask(scheduler, taskDTO);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * 立即运行任务\n\t * \n\t * @param task\n\t *            调度信息\n\t */\n\t@Override\n\t@Transactional\n\tpublic void run(TaskDTO task) throws SchedulerException {\n\t\tString taskId = task.getTaskId();\n\t\tString taskGroup = task.getTaskGroup();\n\t\tTaskDTO properties = selectTaskById(task.getTaskId());\n\t\t// 参数\n\t\tJobDataMap dataMap = new JobDataMap();\n\t\tdataMap.put(ScheduleConstants.TASK_PROPERTIES, properties);\n\t\tscheduler.triggerJob(ScheduleUtils.getTaskKey(taskId, taskGroup), dataMap);\n\t}\n}\n```\n\n","slug":"定时任务quartz 管理和日志","published":1,"updated":"2020-09-29T06:48:16.306Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6h000mhcqaarxqexf6","content":"<h1 id=\"定时任务quartz-管理和日志\"><a href=\"#定时任务quartz-管理和日志\" class=\"headerlink\" title=\"定时任务quartz 管理和日志\"></a>定时任务quartz 管理和日志</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇介绍了quartz的结构和基础用法，现在则是利用反射来实现定时任务的抽取，实现动态配置定时任务和相关日志管理</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>两个实体任务表和任务日志表。</p>\n<p>任务表存放：id、任务名、任务组名、调用类名方法名、调用目标参数、cron表达式、错误策略等</p>\n<pre><code>CREATE TABLE `td_sm_task` (\n  `task_id` varchar(64) NOT NULL COMMENT &#39;任务ID&#39;,\n  `task_name` varchar(64) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;任务名称&#39;,\n  `task_group` varchar(64) DEFAULT &#39;DEFAULT&#39; COMMENT &#39;任务组名&#39;,\n  `invoke_target` varchar(500) NOT NULL COMMENT &#39;注解value&#39;,\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT &#39;调用目标参数&#39;,\n  `cron_expression` varchar(255) DEFAULT &#39;&#39; COMMENT &#39;cron执行表达式&#39;,\n  `misfire_policy` varchar(20) DEFAULT &#39;3&#39; COMMENT &#39;计划执行错误策略（1立即执行 2执行一次 3放弃执行）&#39;,\n  `concurrent` char(1) DEFAULT &#39;1&#39; COMMENT &#39;是否并发执行（0允许 1禁止）&#39;,\n  `status` char(1) DEFAULT &#39;0&#39; COMMENT &#39;状态（0正常 1暂停）&#39;,\n  `create_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,\n  `create_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,\n  `update_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,\n  `update_time` datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,\n  `remark` varchar(500) DEFAULT &#39;&#39; COMMENT &#39;备注信息&#39;,\n  PRIMARY KEY (`task_id`,`task_name`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;定时任务调度表&#39;;</code></pre><p>日志表存放：任务名、运行时间、运行结果等</p>\n<pre><code>CREATE TABLE `td_sm_task_log` (\n  `task_log_id` varchar(64) NOT NULL COMMENT &#39;任务日志ID&#39;,\n  `task_name` varchar(64) NOT NULL COMMENT &#39;任务名称&#39;,\n  `task_group` varchar(64) DEFAULT NULL COMMENT &#39;任务组名&#39;,\n  `invoke_target` varchar(500) NOT NULL COMMENT &#39;调用目标字符串&#39;,\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT &#39;调用目标参数&#39;,\n  `task_message` varchar(2500) DEFAULT NULL COMMENT &#39;日志信息&#39;,\n  `status` char(1) DEFAULT &#39;0&#39; COMMENT &#39;执行状态（0正常 1失败）&#39;,\n  `exception_info` varchar(2000) DEFAULT &#39;&#39; COMMENT &#39;异常信息&#39;,\n  `start_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,\n  `stop_time` datetime DEFAULT NULL COMMENT &#39;停止时间&#39;,\n  PRIMARY KEY (`task_log_id`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;定时任务调度日志表&#39;;</code></pre><p>实现思路</p>\n<p>根据任务表里面的实体建立对应策略的任务实例，实例方法中，根据调用方法和参数反射调用对应方法，每次调用保存日志。</p>\n<p>应用启动时，查找所有任务表，并开启所有运行中的任务</p>\n<h2 id=\"Job类\"><a href=\"#Job类\" class=\"headerlink\" title=\"Job类\"></a>Job类</h2><p>三个类 一个基础类 负责实现job接口和每次调用时新增日志</p>\n<p>两个继承类 主要是区分并发和非并发</p>\n<pre><code>//基础类\npublic abstract class AbstractQuartzTask implements Job\n{\n    private static final Logger log = LoggerFactory.getLogger(AbstractQuartzTask.class);\n\n    /**\n     * 线程本地变量\n     */\n    private static ThreadLocal&lt;Date&gt; threadLocal = new ThreadLocal&lt;&gt;();\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException\n    {\n        TaskDTO sysTask = new TaskDTO();\n        BeanCopierUtil.copy(context.getMergedJobDataMap().get(ScheduleConstants.TASK_PROPERTIES), sysTask);\n        try\n        {\n            before(context, sysTask);\n            if (sysTask != null)\n            {\n                doExecute(context, sysTask);\n            }\n            after(context, sysTask, null);\n        }\n        catch (Exception e)\n        {\n            log.error(&quot;任务执行异常  - ：&quot;, e);\n            after(context, sysTask, e);\n        }\n    }\n\n    /**\n     * 执行前\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void before(JobExecutionContext context, TaskDTO sysTask)\n    {\n        threadLocal.set(new Date());\n    }\n\n    /**\n     * 执行后\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void after(JobExecutionContext context, TaskDTO sysTask, Exception e)\n    {\n        Date startTime = threadLocal.get();\n        threadLocal.remove();\n\n        final TaskLogDTO sysTaskLog = new TaskLogDTO();\n        sysTaskLog.setTaskName(sysTask.getTaskName());\n        sysTaskLog.setTaskGroup(sysTask.getTaskGroup());\n        sysTaskLog.setInvokeTarget(sysTask.getInvokeTarget());\n        sysTaskLog.setStartTime(startTime);\n        sysTaskLog.setStopTime(new Date());\n        long runMs = sysTaskLog.getStopTime().getTime() - sysTaskLog.getStartTime().getTime();\n\n        String stautsMsg = &quot;&quot;;\n        String errorMsg = &quot;&quot;;\n        if (e != null)\n        {\n            sysTaskLog.setStatus(Constants.FAIL);\n            errorMsg = StringUtils.substring(ExceptionUtil.getExceptionMessage(e), 0, 2000);\n            stautsMsg = &quot;执行失败！&quot;;\n        }\n        else\n        {\n            sysTaskLog.setStatus(Constants.SUCCESS);\n            stautsMsg = &quot;执行成功！&quot;;\n        }\n        sysTaskLog.setTaskMessage(stautsMsg+&quot; 总共耗时：&quot; + runMs + &quot;毫秒&quot;+errorMsg);\n        // 写入数据库当中\n        SpringUtils.getBean(TaskLogService.class).addTaskLog(sysTaskLog);\n    }\n\n    /**\n     * 执行方法，由子类重载\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     * @throws Exception 执行过程中的异常\n     */\n    protected abstract void doExecute(JobExecutionContext context, TaskDTO sysTask) throws Exception;\n}\n\n//非并发\npublic class QuartzTaskExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n//并发子类\n@DisallowConcurrentExecution\npublic class QuartzDisallowConcurrentExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n</code></pre><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>有两种方式，一种是通过bean名+方法名确认，一种是通过注解，我使用的是通过注解</p>\n<p>通过注解  在应用启动 的时候扫描所有bean并查找其中添加了注解的方法，存储到静态变量里面。</p>\n<pre><code>// 在bean创建完成后 查找使用了C2SysTask注解的方法\n@Service\npublic class TaskBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        Class&lt;? extends Object&gt; cla = bean.getClass();\n        // 代理类的名字\n        String agentName = cla.getName();\n        // 原始类名字\n        String originalName = cla.getName();\n        // 如果被代理（事务管理、切面等） 找到原始类\n        if (originalName.contains(Constants.SPRING_AGENT_NAME) || originalName.contains(Constants.SPRING_AGENT_SYMBOL)) {\n            originalName = originalName.substring(0, originalName.indexOf(&quot;$$&quot;));\n            try {\n                cla = Class.forName(originalName);\n            } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        Method[] methods = cla.getMethods();\n        // 循环方法 查找添加C2SysTask注解的方法\n        for (Method m : methods) {\n            if (m.isAnnotationPresent(C2SysTask.class)) {\n\n                C2SysTask annotation = m.getAnnotation(C2SysTask.class);\n                TaskAnnotationBean beanC2SysTask = TaskInvokeUtil.getBeanFromC2SysTask(annotation.value());\n                // 如果C2SysTask注解value值存在相同的值\n                if (beanC2SysTask != null) {\n                    String msg = &quot;C2SysTask注解检测到了相同的value！-&gt;&gt;&quot; + annotation.value() + &quot;\\n&quot;;\n                    msg += &quot;\\t&quot; + beanC2SysTask.getOriginalName() + &quot;中的方法&quot; + beanC2SysTask.getMethodName();\n                    msg += &quot;和&quot; + originalName + &quot;中的方法&quot; + m.getName() + &quot;在注解C2SysTask中的value冲突！&quot;;\n                    try {\n                        throw new TaskAnnotationException(msg);\n                    } catch (TaskAnnotationException e) {\n                        e.printStackTrace();\n                        System.exit(0);\n                    }\n                }\n                TaskAnnotationBean taskAnnotationBean = new TaskAnnotationBean();\n                taskAnnotationBean.setValue(annotation.value());\n                taskAnnotationBean.setBeanName(beanName);\n                taskAnnotationBean.setAgentName(agentName);\n                taskAnnotationBean.setOriginalName(originalName);\n                taskAnnotationBean.setMethodName(m.getName());\n                Parameter[] parameters = m.getParameters();\n                List&lt;C2SysTaskParameter&gt; parametersList = new ArrayList&lt;C2SysTaskParameter&gt;();\n                // 循环拿出参数\n                for (Parameter p : parameters) {\n                    C2SysTaskParameter c2Parameter = new C2SysTaskParameter();\n                    c2Parameter.setName(p.getName());\n                    c2Parameter.setType(p.getType());\n                    c2Parameter.setParameterizedType(p.getParameterizedType());\n                    parametersList.add(c2Parameter);\n                }\n                taskAnnotationBean.setParametersList(parametersList);\n                Constants.C2_SYS_TASK_ANNOTATION_BEANLIST.add(taskAnnotationBean);\n            }\n        }\n        return bean;\n    }\n\n}</code></pre><p>反射执行工具类</p>\n<pre><code>public class TaskInvokeUtil {\n    /**\n     * 执行方法\n     *\n     * @param sysTask\n     *            系统任务\n     */\n    public static void invokeMethod(TaskDTO sysTask) throws Exception {\n        String invokeTarget = sysTask.getInvokeTarget();\n        String paramStr = sysTask.getInvokeParam();\n        TaskAnnotationBean task = getBeanFromC2SysTask(invokeTarget);\n        if (task != null) {\n            String beanName = task.getBeanName();\n            String methodName = task.getMethodName();\n            Object bean = null;\n            List&lt;Object[]&gt; methodParams = getMethodParams(paramStr, task.getParametersList());\n            if (!isValidClassName(beanName)) {\n                bean = SpringUtils.getBean(beanName);\n            } else {\n                bean = Class.forName(beanName).newInstance();\n            }\n            invokeMethod(bean, methodName, methodParams);\n        }\n\n    }\n\n    /**\n     * 调用任务方法\n     *\n     * @param bean\n     *            目标对象\n     * @param methodName\n     *            方法名称\n     * @param methodParams\n     *            方法参数\n     */\n    private static void invokeMethod(Object bean, String methodName, List&lt;Object[]&gt; methodParams)\n            throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n            InvocationTargetException {\n        if (StringUtils.isNotNull(methodParams) &amp;&amp; methodParams.size() &gt; 0) {\n            Method method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n            method.invoke(bean, getMethodParamsValue(methodParams));\n        } else {\n            Method method = bean.getClass().getDeclaredMethod(methodName);\n            method.invoke(bean);\n        }\n    }\n\n    /**\n     * 校验是否为为class包名\n     * \n     * @param str\n     *            名称\n     * @return true是 false否\n     */\n    public static boolean isValidClassName(String invokeTarget) {\n        return StringUtils.countMatches(invokeTarget, &quot;.&quot;) &gt; 1;\n    }\n\n    /**\n     * 获取method方法参数相关列表\n     * \n     * @param invokeTarget\n     *            目标字符串\n     * @param list\n     * @return method方法相关参数列表\n     */\n    public static List&lt;Object[]&gt; getMethodParams(String invokeTarget, List&lt;C2SysTaskParameter&gt; list) {\n\n        List&lt;Object[]&gt; classs = new LinkedList&lt;&gt;();\n        if(StringUtils.isEmpty(invokeTarget)) {\n            return classs;\n        }\n        String[] methodParams = invokeTarget.split(&quot;,&quot;);\n        for (int i = 0; i &lt; list.size(); i++) {\n            C2SysTaskParameter parameter = list.get(i);\n            Class&lt;?&gt; type = parameter.getType();\n            String par = methodParams[i];\n            Object cast =null;\n            if(type == Integer.class || type == Integer.TYPE) {\n                cast = Integer.valueOf(par);\n            }else if(type == Double.class || type == Double.TYPE) {\n                cast = Double.valueOf(par);\n            }else if(type == Float.class || type == Float.TYPE) {\n                cast = Float.valueOf(par);\n            }else if(type == Boolean.class || type == Boolean.TYPE) {\n                cast = Boolean.valueOf(par);\n            }else if(type == Byte.class || type == Byte.TYPE) {\n                cast = Byte.valueOf(par);\n            }else if(type == Short.class || type == Short.TYPE) {\n                cast = Short.valueOf(par);\n            }else if(type == Long.class || type == Long.TYPE) {\n                cast = Long.valueOf(par);\n            }else if(type == Character.class || type == Character.TYPE) {\n                cast = par.charAt(0);\n            }else if(type == String.class) {\n                cast = par;\n            }else {\n                cast = type.cast(par);\n            }\n            classs.add(new Object[] {cast,type});\n        }\n        return classs;\n    }\n\n    /**\n     * 获取参数类型\n     * \n     * @param methodParams\n     *            参数相关列表\n     * @return 参数类型列表\n     */\n    public static Class&lt;?&gt;[] getMethodParamsType(List&lt;Object[]&gt; methodParams) {\n        Class&lt;?&gt;[] classs = new Class&lt;?&gt;[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classs[index] = (Class&lt;?&gt;) os[1];\n            index++;\n        }\n        return classs;\n    }\n\n    /**\n     * 获取参数值\n     * \n     * @param methodParams\n     *            参数相关列表\n     * @return 参数值列表\n     */\n    public static Object[] getMethodParamsValue(List&lt;Object[]&gt; methodParams) {\n        Object[] classs = new Object[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classs[index] = (Object) os[0];\n            index++;\n        }\n        return classs;\n    }\n\n    /**\n     * 从C2_SYS_TASK_ANNOTATION_BEANLIST查找是否有相同的value\n     * \n     * @param key\n     * @param value\n     * @return\n     */\n    public static TaskAnnotationBean getBeanFromC2SysTask(String value) {\n        for (TaskAnnotationBean m : Constants.C2_SYS_TASK_ANNOTATION_BEANLIST) {\n            if (value.equals(m.getValue())) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n</code></pre><h2 id=\"启动任务\"><a href=\"#启动任务\" class=\"headerlink\" title=\"启动任务\"></a>启动任务</h2><p>工具任务实体 创建对应任务实体，并设置相关策略</p>\n<pre><code>public class ScheduleUtils\n{\n    /**\n     * 得到quartz任务类\n     *\n     * @param sysTask 执行计划\n     * @return 具体执行任务类\n     */\n    private static Class&lt;? extends Job&gt; getQuartzTaskClass(TaskDTO sysTask)\n    {\n        boolean isConcurrent = &quot;0&quot;.equals(sysTask.getConcurrent());\n        return isConcurrent ? QuartzTaskExecution.class : QuartzDisallowConcurrentExecution.class;\n    }\n\n    /**\n     * 构建任务触发对象\n     */\n    public static TriggerKey getTriggerKey(String jobId, String jobGroup)\n    {\n        return TriggerKey.triggerKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 构建任务键对象\n     */\n    public static JobKey getTaskKey(String jobId, String jobGroup)\n    {\n        return JobKey.jobKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 创建定时任务\n     */\n    public static void createScheduleTask(Scheduler scheduler, TaskDTO job) throws SchedulerException, TaskException\n    {\n        Class&lt;? extends Job&gt; jobClass = getQuartzTaskClass(job);\n        // 构建job信息\n        String jobId = job.getTaskId();\n        String jobGroup = job.getTaskGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getTaskKey(jobId, jobGroup)).build();\n\n        // 表达式调度构建器\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n\n        // 按新的cronExpression表达式构建一个新的trigger\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n\n        // 放入参数，运行时的方法可以获取\n        jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);\n\n        // 判断是否存在\n        if (scheduler.checkExists(getTaskKey(jobId, jobGroup)))\n        {\n            // 防止创建时存在数据问题 先移除，然后在执行创建操作\n            scheduler.deleteJob(getTaskKey(jobId, jobGroup));\n        }\n\n        scheduler.scheduleJob(jobDetail, trigger);\n\n        // 暂停任务\n        if (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))\n        {\n            scheduler.pauseJob(ScheduleUtils.getTaskKey(jobId, jobGroup));\n        }\n    }\n\n    /**\n     * 设置定时任务策略\n     */\n    public static CronScheduleBuilder handleCronScheduleMisfirePolicy(TaskDTO job, CronScheduleBuilder cb)\n            throws TaskException\n    {\n        switch (job.getMisfirePolicy())\n        {\n            case ScheduleConstants.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstants.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstants.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstants.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(&quot;The task misfire policy &#39;&quot; + job.getMisfirePolicy()\n                        + &quot;&#39; cannot be used in cron schedule tasks&quot;, Code.CONFIG_ERROR);\n        }\n    }\n}\n</code></pre><h2 id=\"service启动任务\"><a href=\"#service启动任务\" class=\"headerlink\" title=\"service启动任务\"></a>service启动任务</h2><p>应用启动时 初始化所有待运行任务</p>\n<pre><code>@Service\npublic class TaskServiceImpl implements TaskService {\n    @Autowired\n    private Scheduler scheduler;\n\n    @Autowired\n    private TaskDao taskDao;\n\n    /**\n     * 项目启动时，初始化定时器 主要是防止手动修改数据库导致未同步到定时任务处理（注：不能手动修改数据库ID和任务组名，否则会导致脏数据）\n     */\n    @PostConstruct\n    public void init() throws SchedulerException, TaskException {\n        scheduler.clear();\n        //scheduler = StdSchedulerFactory.getDefaultScheduler();\n        List&lt;TaskEO&gt; taskList = taskDao.selectTaskAll();\n        for (TaskEO task : taskList) {\n            TaskDTO taskDTO = new TaskDTO();\n            if (null != task) {\n                BeanCopierUtil.copy(task, taskDTO);\n            }\n            if(ScheduleConstants.Status.NORMAL.getValue().equals(taskDTO.getStatus())) {\n                ScheduleUtils.createScheduleTask(scheduler, taskDTO);\n            }\n        }\n    }\n\n\n    /**\n     * 立即运行任务\n     * \n     * @param task\n     *            调度信息\n     */\n    @Override\n    @Transactional\n    public void run(TaskDTO task) throws SchedulerException {\n        String taskId = task.getTaskId();\n        String taskGroup = task.getTaskGroup();\n        TaskDTO properties = selectTaskById(task.getTaskId());\n        // 参数\n        JobDataMap dataMap = new JobDataMap();\n        dataMap.put(ScheduleConstants.TASK_PROPERTIES, properties);\n        scheduler.triggerJob(ScheduleUtils.getTaskKey(taskId, taskGroup), dataMap);\n    }\n}</code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"定时任务quartz-管理和日志\"><a href=\"#定时任务quartz-管理和日志\" class=\"headerlink\" title=\"定时任务quartz 管理和日志\"></a>定时任务quartz 管理和日志</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇介绍了quartz的结构和基础用法，现在则是利用反射来实现定时任务的抽取，实现动态配置定时任务和相关日志管理</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>两个实体任务表和任务日志表。</p>\n<p>任务表存放：id、任务名、任务组名、调用类名方法名、调用目标参数、cron表达式、错误策略等</p>\n<pre><code>CREATE TABLE `td_sm_task` (\n  `task_id` varchar(64) NOT NULL COMMENT &#39;任务ID&#39;,\n  `task_name` varchar(64) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;任务名称&#39;,\n  `task_group` varchar(64) DEFAULT &#39;DEFAULT&#39; COMMENT &#39;任务组名&#39;,\n  `invoke_target` varchar(500) NOT NULL COMMENT &#39;注解value&#39;,\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT &#39;调用目标参数&#39;,\n  `cron_expression` varchar(255) DEFAULT &#39;&#39; COMMENT &#39;cron执行表达式&#39;,\n  `misfire_policy` varchar(20) DEFAULT &#39;3&#39; COMMENT &#39;计划执行错误策略（1立即执行 2执行一次 3放弃执行）&#39;,\n  `concurrent` char(1) DEFAULT &#39;1&#39; COMMENT &#39;是否并发执行（0允许 1禁止）&#39;,\n  `status` char(1) DEFAULT &#39;0&#39; COMMENT &#39;状态（0正常 1暂停）&#39;,\n  `create_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;创建者&#39;,\n  `create_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,\n  `update_by` varchar(64) DEFAULT &#39;&#39; COMMENT &#39;更新者&#39;,\n  `update_time` datetime DEFAULT NULL COMMENT &#39;更新时间&#39;,\n  `remark` varchar(500) DEFAULT &#39;&#39; COMMENT &#39;备注信息&#39;,\n  PRIMARY KEY (`task_id`,`task_name`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;定时任务调度表&#39;;</code></pre><p>日志表存放：任务名、运行时间、运行结果等</p>\n<pre><code>CREATE TABLE `td_sm_task_log` (\n  `task_log_id` varchar(64) NOT NULL COMMENT &#39;任务日志ID&#39;,\n  `task_name` varchar(64) NOT NULL COMMENT &#39;任务名称&#39;,\n  `task_group` varchar(64) DEFAULT NULL COMMENT &#39;任务组名&#39;,\n  `invoke_target` varchar(500) NOT NULL COMMENT &#39;调用目标字符串&#39;,\n  `invoke_param` varchar(500) DEFAULT NULL COMMENT &#39;调用目标参数&#39;,\n  `task_message` varchar(2500) DEFAULT NULL COMMENT &#39;日志信息&#39;,\n  `status` char(1) DEFAULT &#39;0&#39; COMMENT &#39;执行状态（0正常 1失败）&#39;,\n  `exception_info` varchar(2000) DEFAULT &#39;&#39; COMMENT &#39;异常信息&#39;,\n  `start_time` datetime DEFAULT NULL COMMENT &#39;创建时间&#39;,\n  `stop_time` datetime DEFAULT NULL COMMENT &#39;停止时间&#39;,\n  PRIMARY KEY (`task_log_id`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;定时任务调度日志表&#39;;</code></pre><p>实现思路</p>\n<p>根据任务表里面的实体建立对应策略的任务实例，实例方法中，根据调用方法和参数反射调用对应方法，每次调用保存日志。</p>\n<p>应用启动时，查找所有任务表，并开启所有运行中的任务</p>\n<h2 id=\"Job类\"><a href=\"#Job类\" class=\"headerlink\" title=\"Job类\"></a>Job类</h2><p>三个类 一个基础类 负责实现job接口和每次调用时新增日志</p>\n<p>两个继承类 主要是区分并发和非并发</p>\n<pre><code>//基础类\npublic abstract class AbstractQuartzTask implements Job\n{\n    private static final Logger log = LoggerFactory.getLogger(AbstractQuartzTask.class);\n\n    /**\n     * 线程本地变量\n     */\n    private static ThreadLocal&lt;Date&gt; threadLocal = new ThreadLocal&lt;&gt;();\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException\n    {\n        TaskDTO sysTask = new TaskDTO();\n        BeanCopierUtil.copy(context.getMergedJobDataMap().get(ScheduleConstants.TASK_PROPERTIES), sysTask);\n        try\n        {\n            before(context, sysTask);\n            if (sysTask != null)\n            {\n                doExecute(context, sysTask);\n            }\n            after(context, sysTask, null);\n        }\n        catch (Exception e)\n        {\n            log.error(&quot;任务执行异常  - ：&quot;, e);\n            after(context, sysTask, e);\n        }\n    }\n\n    /**\n     * 执行前\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void before(JobExecutionContext context, TaskDTO sysTask)\n    {\n        threadLocal.set(new Date());\n    }\n\n    /**\n     * 执行后\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     */\n    protected void after(JobExecutionContext context, TaskDTO sysTask, Exception e)\n    {\n        Date startTime = threadLocal.get();\n        threadLocal.remove();\n\n        final TaskLogDTO sysTaskLog = new TaskLogDTO();\n        sysTaskLog.setTaskName(sysTask.getTaskName());\n        sysTaskLog.setTaskGroup(sysTask.getTaskGroup());\n        sysTaskLog.setInvokeTarget(sysTask.getInvokeTarget());\n        sysTaskLog.setStartTime(startTime);\n        sysTaskLog.setStopTime(new Date());\n        long runMs = sysTaskLog.getStopTime().getTime() - sysTaskLog.getStartTime().getTime();\n\n        String stautsMsg = &quot;&quot;;\n        String errorMsg = &quot;&quot;;\n        if (e != null)\n        {\n            sysTaskLog.setStatus(Constants.FAIL);\n            errorMsg = StringUtils.substring(ExceptionUtil.getExceptionMessage(e), 0, 2000);\n            stautsMsg = &quot;执行失败！&quot;;\n        }\n        else\n        {\n            sysTaskLog.setStatus(Constants.SUCCESS);\n            stautsMsg = &quot;执行成功！&quot;;\n        }\n        sysTaskLog.setTaskMessage(stautsMsg+&quot; 总共耗时：&quot; + runMs + &quot;毫秒&quot;+errorMsg);\n        // 写入数据库当中\n        SpringUtils.getBean(TaskLogService.class).addTaskLog(sysTaskLog);\n    }\n\n    /**\n     * 执行方法，由子类重载\n     *\n     * @param context 工作执行上下文对象\n     * @param sysTask 系统计划任务\n     * @throws Exception 执行过程中的异常\n     */\n    protected abstract void doExecute(JobExecutionContext context, TaskDTO sysTask) throws Exception;\n}\n\n//非并发\npublic class QuartzTaskExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n\n//并发子类\n@DisallowConcurrentExecution\npublic class QuartzDisallowConcurrentExecution extends AbstractQuartzTask\n{\n    @Override\n    protected void doExecute(JobExecutionContext context, TaskDTO sysJob) throws Exception\n    {\n        TaskInvokeUtil.invokeMethod(sysJob);\n    }\n}\n</code></pre><h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>有两种方式，一种是通过bean名+方法名确认，一种是通过注解，我使用的是通过注解</p>\n<p>通过注解  在应用启动 的时候扫描所有bean并查找其中添加了注解的方法，存储到静态变量里面。</p>\n<pre><code>// 在bean创建完成后 查找使用了C2SysTask注解的方法\n@Service\npublic class TaskBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        Class&lt;? extends Object&gt; cla = bean.getClass();\n        // 代理类的名字\n        String agentName = cla.getName();\n        // 原始类名字\n        String originalName = cla.getName();\n        // 如果被代理（事务管理、切面等） 找到原始类\n        if (originalName.contains(Constants.SPRING_AGENT_NAME) || originalName.contains(Constants.SPRING_AGENT_SYMBOL)) {\n            originalName = originalName.substring(0, originalName.indexOf(&quot;$$&quot;));\n            try {\n                cla = Class.forName(originalName);\n            } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        Method[] methods = cla.getMethods();\n        // 循环方法 查找添加C2SysTask注解的方法\n        for (Method m : methods) {\n            if (m.isAnnotationPresent(C2SysTask.class)) {\n\n                C2SysTask annotation = m.getAnnotation(C2SysTask.class);\n                TaskAnnotationBean beanC2SysTask = TaskInvokeUtil.getBeanFromC2SysTask(annotation.value());\n                // 如果C2SysTask注解value值存在相同的值\n                if (beanC2SysTask != null) {\n                    String msg = &quot;C2SysTask注解检测到了相同的value！-&gt;&gt;&quot; + annotation.value() + &quot;\\n&quot;;\n                    msg += &quot;\\t&quot; + beanC2SysTask.getOriginalName() + &quot;中的方法&quot; + beanC2SysTask.getMethodName();\n                    msg += &quot;和&quot; + originalName + &quot;中的方法&quot; + m.getName() + &quot;在注解C2SysTask中的value冲突！&quot;;\n                    try {\n                        throw new TaskAnnotationException(msg);\n                    } catch (TaskAnnotationException e) {\n                        e.printStackTrace();\n                        System.exit(0);\n                    }\n                }\n                TaskAnnotationBean taskAnnotationBean = new TaskAnnotationBean();\n                taskAnnotationBean.setValue(annotation.value());\n                taskAnnotationBean.setBeanName(beanName);\n                taskAnnotationBean.setAgentName(agentName);\n                taskAnnotationBean.setOriginalName(originalName);\n                taskAnnotationBean.setMethodName(m.getName());\n                Parameter[] parameters = m.getParameters();\n                List&lt;C2SysTaskParameter&gt; parametersList = new ArrayList&lt;C2SysTaskParameter&gt;();\n                // 循环拿出参数\n                for (Parameter p : parameters) {\n                    C2SysTaskParameter c2Parameter = new C2SysTaskParameter();\n                    c2Parameter.setName(p.getName());\n                    c2Parameter.setType(p.getType());\n                    c2Parameter.setParameterizedType(p.getParameterizedType());\n                    parametersList.add(c2Parameter);\n                }\n                taskAnnotationBean.setParametersList(parametersList);\n                Constants.C2_SYS_TASK_ANNOTATION_BEANLIST.add(taskAnnotationBean);\n            }\n        }\n        return bean;\n    }\n\n}</code></pre><p>反射执行工具类</p>\n<pre><code>public class TaskInvokeUtil {\n    /**\n     * 执行方法\n     *\n     * @param sysTask\n     *            系统任务\n     */\n    public static void invokeMethod(TaskDTO sysTask) throws Exception {\n        String invokeTarget = sysTask.getInvokeTarget();\n        String paramStr = sysTask.getInvokeParam();\n        TaskAnnotationBean task = getBeanFromC2SysTask(invokeTarget);\n        if (task != null) {\n            String beanName = task.getBeanName();\n            String methodName = task.getMethodName();\n            Object bean = null;\n            List&lt;Object[]&gt; methodParams = getMethodParams(paramStr, task.getParametersList());\n            if (!isValidClassName(beanName)) {\n                bean = SpringUtils.getBean(beanName);\n            } else {\n                bean = Class.forName(beanName).newInstance();\n            }\n            invokeMethod(bean, methodName, methodParams);\n        }\n\n    }\n\n    /**\n     * 调用任务方法\n     *\n     * @param bean\n     *            目标对象\n     * @param methodName\n     *            方法名称\n     * @param methodParams\n     *            方法参数\n     */\n    private static void invokeMethod(Object bean, String methodName, List&lt;Object[]&gt; methodParams)\n            throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,\n            InvocationTargetException {\n        if (StringUtils.isNotNull(methodParams) &amp;&amp; methodParams.size() &gt; 0) {\n            Method method = bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));\n            method.invoke(bean, getMethodParamsValue(methodParams));\n        } else {\n            Method method = bean.getClass().getDeclaredMethod(methodName);\n            method.invoke(bean);\n        }\n    }\n\n    /**\n     * 校验是否为为class包名\n     * \n     * @param str\n     *            名称\n     * @return true是 false否\n     */\n    public static boolean isValidClassName(String invokeTarget) {\n        return StringUtils.countMatches(invokeTarget, &quot;.&quot;) &gt; 1;\n    }\n\n    /**\n     * 获取method方法参数相关列表\n     * \n     * @param invokeTarget\n     *            目标字符串\n     * @param list\n     * @return method方法相关参数列表\n     */\n    public static List&lt;Object[]&gt; getMethodParams(String invokeTarget, List&lt;C2SysTaskParameter&gt; list) {\n\n        List&lt;Object[]&gt; classs = new LinkedList&lt;&gt;();\n        if(StringUtils.isEmpty(invokeTarget)) {\n            return classs;\n        }\n        String[] methodParams = invokeTarget.split(&quot;,&quot;);\n        for (int i = 0; i &lt; list.size(); i++) {\n            C2SysTaskParameter parameter = list.get(i);\n            Class&lt;?&gt; type = parameter.getType();\n            String par = methodParams[i];\n            Object cast =null;\n            if(type == Integer.class || type == Integer.TYPE) {\n                cast = Integer.valueOf(par);\n            }else if(type == Double.class || type == Double.TYPE) {\n                cast = Double.valueOf(par);\n            }else if(type == Float.class || type == Float.TYPE) {\n                cast = Float.valueOf(par);\n            }else if(type == Boolean.class || type == Boolean.TYPE) {\n                cast = Boolean.valueOf(par);\n            }else if(type == Byte.class || type == Byte.TYPE) {\n                cast = Byte.valueOf(par);\n            }else if(type == Short.class || type == Short.TYPE) {\n                cast = Short.valueOf(par);\n            }else if(type == Long.class || type == Long.TYPE) {\n                cast = Long.valueOf(par);\n            }else if(type == Character.class || type == Character.TYPE) {\n                cast = par.charAt(0);\n            }else if(type == String.class) {\n                cast = par;\n            }else {\n                cast = type.cast(par);\n            }\n            classs.add(new Object[] {cast,type});\n        }\n        return classs;\n    }\n\n    /**\n     * 获取参数类型\n     * \n     * @param methodParams\n     *            参数相关列表\n     * @return 参数类型列表\n     */\n    public static Class&lt;?&gt;[] getMethodParamsType(List&lt;Object[]&gt; methodParams) {\n        Class&lt;?&gt;[] classs = new Class&lt;?&gt;[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classs[index] = (Class&lt;?&gt;) os[1];\n            index++;\n        }\n        return classs;\n    }\n\n    /**\n     * 获取参数值\n     * \n     * @param methodParams\n     *            参数相关列表\n     * @return 参数值列表\n     */\n    public static Object[] getMethodParamsValue(List&lt;Object[]&gt; methodParams) {\n        Object[] classs = new Object[methodParams.size()];\n        int index = 0;\n        for (Object[] os : methodParams) {\n            classs[index] = (Object) os[0];\n            index++;\n        }\n        return classs;\n    }\n\n    /**\n     * 从C2_SYS_TASK_ANNOTATION_BEANLIST查找是否有相同的value\n     * \n     * @param key\n     * @param value\n     * @return\n     */\n    public static TaskAnnotationBean getBeanFromC2SysTask(String value) {\n        for (TaskAnnotationBean m : Constants.C2_SYS_TASK_ANNOTATION_BEANLIST) {\n            if (value.equals(m.getValue())) {\n                return m;\n            }\n        }\n        return null;\n    }\n}\n</code></pre><h2 id=\"启动任务\"><a href=\"#启动任务\" class=\"headerlink\" title=\"启动任务\"></a>启动任务</h2><p>工具任务实体 创建对应任务实体，并设置相关策略</p>\n<pre><code>public class ScheduleUtils\n{\n    /**\n     * 得到quartz任务类\n     *\n     * @param sysTask 执行计划\n     * @return 具体执行任务类\n     */\n    private static Class&lt;? extends Job&gt; getQuartzTaskClass(TaskDTO sysTask)\n    {\n        boolean isConcurrent = &quot;0&quot;.equals(sysTask.getConcurrent());\n        return isConcurrent ? QuartzTaskExecution.class : QuartzDisallowConcurrentExecution.class;\n    }\n\n    /**\n     * 构建任务触发对象\n     */\n    public static TriggerKey getTriggerKey(String jobId, String jobGroup)\n    {\n        return TriggerKey.triggerKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 构建任务键对象\n     */\n    public static JobKey getTaskKey(String jobId, String jobGroup)\n    {\n        return JobKey.jobKey(ScheduleConstants.TASK_CLASS_NAME + jobId, jobGroup);\n    }\n\n    /**\n     * 创建定时任务\n     */\n    public static void createScheduleTask(Scheduler scheduler, TaskDTO job) throws SchedulerException, TaskException\n    {\n        Class&lt;? extends Job&gt; jobClass = getQuartzTaskClass(job);\n        // 构建job信息\n        String jobId = job.getTaskId();\n        String jobGroup = job.getTaskGroup();\n        JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(getTaskKey(jobId, jobGroup)).build();\n\n        // 表达式调度构建器\n        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(job.getCronExpression());\n        cronScheduleBuilder = handleCronScheduleMisfirePolicy(job, cronScheduleBuilder);\n\n        // 按新的cronExpression表达式构建一个新的trigger\n        CronTrigger trigger = TriggerBuilder.newTrigger().withIdentity(getTriggerKey(jobId, jobGroup))\n                .withSchedule(cronScheduleBuilder).build();\n\n        // 放入参数，运行时的方法可以获取\n        jobDetail.getJobDataMap().put(ScheduleConstants.TASK_PROPERTIES, job);\n\n        // 判断是否存在\n        if (scheduler.checkExists(getTaskKey(jobId, jobGroup)))\n        {\n            // 防止创建时存在数据问题 先移除，然后在执行创建操作\n            scheduler.deleteJob(getTaskKey(jobId, jobGroup));\n        }\n\n        scheduler.scheduleJob(jobDetail, trigger);\n\n        // 暂停任务\n        if (job.getStatus().equals(ScheduleConstants.Status.PAUSE.getValue()))\n        {\n            scheduler.pauseJob(ScheduleUtils.getTaskKey(jobId, jobGroup));\n        }\n    }\n\n    /**\n     * 设置定时任务策略\n     */\n    public static CronScheduleBuilder handleCronScheduleMisfirePolicy(TaskDTO job, CronScheduleBuilder cb)\n            throws TaskException\n    {\n        switch (job.getMisfirePolicy())\n        {\n            case ScheduleConstants.MISFIRE_DEFAULT:\n                return cb;\n            case ScheduleConstants.MISFIRE_IGNORE_MISFIRES:\n                return cb.withMisfireHandlingInstructionIgnoreMisfires();\n            case ScheduleConstants.MISFIRE_FIRE_AND_PROCEED:\n                return cb.withMisfireHandlingInstructionFireAndProceed();\n            case ScheduleConstants.MISFIRE_DO_NOTHING:\n                return cb.withMisfireHandlingInstructionDoNothing();\n            default:\n                throw new TaskException(&quot;The task misfire policy &#39;&quot; + job.getMisfirePolicy()\n                        + &quot;&#39; cannot be used in cron schedule tasks&quot;, Code.CONFIG_ERROR);\n        }\n    }\n}\n</code></pre><h2 id=\"service启动任务\"><a href=\"#service启动任务\" class=\"headerlink\" title=\"service启动任务\"></a>service启动任务</h2><p>应用启动时 初始化所有待运行任务</p>\n<pre><code>@Service\npublic class TaskServiceImpl implements TaskService {\n    @Autowired\n    private Scheduler scheduler;\n\n    @Autowired\n    private TaskDao taskDao;\n\n    /**\n     * 项目启动时，初始化定时器 主要是防止手动修改数据库导致未同步到定时任务处理（注：不能手动修改数据库ID和任务组名，否则会导致脏数据）\n     */\n    @PostConstruct\n    public void init() throws SchedulerException, TaskException {\n        scheduler.clear();\n        //scheduler = StdSchedulerFactory.getDefaultScheduler();\n        List&lt;TaskEO&gt; taskList = taskDao.selectTaskAll();\n        for (TaskEO task : taskList) {\n            TaskDTO taskDTO = new TaskDTO();\n            if (null != task) {\n                BeanCopierUtil.copy(task, taskDTO);\n            }\n            if(ScheduleConstants.Status.NORMAL.getValue().equals(taskDTO.getStatus())) {\n                ScheduleUtils.createScheduleTask(scheduler, taskDTO);\n            }\n        }\n    }\n\n\n    /**\n     * 立即运行任务\n     * \n     * @param task\n     *            调度信息\n     */\n    @Override\n    @Transactional\n    public void run(TaskDTO task) throws SchedulerException {\n        String taskId = task.getTaskId();\n        String taskGroup = task.getTaskGroup();\n        TaskDTO properties = selectTaskById(task.getTaskId());\n        // 参数\n        JobDataMap dataMap = new JobDataMap();\n        dataMap.put(ScheduleConstants.TASK_PROPERTIES, properties);\n        scheduler.triggerJob(ScheduleUtils.getTaskKey(taskId, taskGroup), dataMap);\n    }\n}</code></pre>"},{"layout":"post","title":"文件字符串替换","date":"2020-07-16T01:44:39.000Z","_content":"\n# 文件字符串替换脚本\n\n## 前言\n\n由于在工作中会遇到一些文件的处理问题或者其他可以使用脚本完成的工作，这个系列将记录一些我用到过的脚本\n\n## 文件夹下所有文件替换某个字符串\n\n有个需求，我们需要替换某个目录下，所有文件下面的某个字符串，我们采用python来制作这个脚本\n\n精简模式\n\n这个脚本将该脚本目录下，所有文件中的“souceStr”替换成用户输入的destStr，可以自己根据需要手动更改相关地方\n\n```\n#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path, souceStr, destStr):\n\t#读取目录下所有文件\n\tfiles = os.listdir(path)\n\t#遍历这些文件\n\tfor f in files:\n\t\t#如果文件名等于该脚本的名字 不执行\n\t\tif f == os.path.basename(__file__):\n\t\t\tcontinue\n\t\t#如果文件是一个目录 执行递归\n\t\telif os.path.isdir(path + '/' + f):\n\t\t\treplace(path+ '/' + f, souceStr, destStr)\n\t\t#否则 是一个文件\n\t\telse:\n\t\t\tfilePath = path+'/'+f\n\t\t\tf=open(filePath,'r')\n\t\t\t#读出该文件所有的行\n\t\t\talllines=f.readlines()\n\t\t\tf.close()\n\t\t\tf=open(filePath,'w+')\n\t\t\t#对所有的行进行循环\n\t\t\tfor eachline in alllines:\n\t\t\t\t#替换字符串\n\t\t\t\ta=re.sub(souceStr,destStr,eachline)\n\t\t\t\tf.writelines(a)\n\t\t\tf.close()\n\nreplace('./', \"souceStr\", input(\"please input destStr, rember to add ' at the beginning and end :\"))\n\n```\n\n详细模式\n\n这个脚本和上一个脚本是一样的，只是添加了一些输出和隐藏文件夹的判断，可以根据需要更改相应变量\n\n```\n#!/usr/bin/python  \n# -*- coding:utf8 -*-  \n  \nimport os  \nimport re\ntotalFile = 0 \nprint os.path.basename(__file__) \ndef replace(path,str1,str2):\n    # 返回一个列表，其中包含在目录条目的名称(google翻译)  \n    files = os.listdir(path)    \n    for f in files:  \n        if(os.path.isdir(path + '/' + f)):  \n            # 排除隐藏文件夹。因为隐藏文件夹过多  \n            if(f[0] == '.'):  \n                pass  \n            else:  \n                # 进入下一层文件夹  \n                replace(path+ '/' + f,str1,str2)  \n        if(os.path.isfile(path + '/' + f)):\n\t\t\tfilePath = path+'/'+f\n\t\t\tf=open(filePath,'r')\n\t\t\talllines=f.readlines()\n\t\t\tf.close()\n\t\t\tf=open(filePath,'w+')\n\t\t\tfor eachline in alllines:\n\t\t\t\ta=re.sub(str1,str2,eachline)\n\t\t\t\tf.writelines(a)\n\t\t\tprint filePath+\"-->>>\"+str1+\" replace \"+str2+\" success!\"\n\t\t\tglobal totalFile\n\t\t\ttotalFile = totalFile + 1\n\t\t\tf.close()\n  \nif __name__ == '__main__':\n    replace('E:/python/test',\"hi\",input(\"input str(rember to add '' at the beginning and end):\"))\n    #输出执行文件的总数量\n    print 'totalFile =', totalFile\n\n```\n\n\n\n## 去除文件中的注释和空白行\n\n我们有一个需求，就是去掉某些文件中的注释或者是空白行\n\n可以根据需要结合上面的脚本实现对某个目录下的所有文件去除注释和空白行\n\n```\n#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path):\n\tf=open(path,'r')\n\talllines=f.readlines()\n\tf.close()\n\tf=open(path,'w+')\n\tfor eachline in alllines:\n\t\t#去除首尾空格\n\t\tline = eachline.strip()\n\t\tif not len(line) or line.startswith('#'):\n\t\t\tcontinue\n\t\telse:\n\t\t\tf.writelines(eachline)\n\tf.close()\n\nreplace('E:/python/test/core.yaml')\n\n```\n\n","source":"_posts/文件字符串替换.md","raw":"---\nlayout: post\ntitle: 文件字符串替换\ndate: 2020-07-16 09:44:39\ntags: 脚本\ncategories: 脚本\n---\n\n# 文件字符串替换脚本\n\n## 前言\n\n由于在工作中会遇到一些文件的处理问题或者其他可以使用脚本完成的工作，这个系列将记录一些我用到过的脚本\n\n## 文件夹下所有文件替换某个字符串\n\n有个需求，我们需要替换某个目录下，所有文件下面的某个字符串，我们采用python来制作这个脚本\n\n精简模式\n\n这个脚本将该脚本目录下，所有文件中的“souceStr”替换成用户输入的destStr，可以自己根据需要手动更改相关地方\n\n```\n#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path, souceStr, destStr):\n\t#读取目录下所有文件\n\tfiles = os.listdir(path)\n\t#遍历这些文件\n\tfor f in files:\n\t\t#如果文件名等于该脚本的名字 不执行\n\t\tif f == os.path.basename(__file__):\n\t\t\tcontinue\n\t\t#如果文件是一个目录 执行递归\n\t\telif os.path.isdir(path + '/' + f):\n\t\t\treplace(path+ '/' + f, souceStr, destStr)\n\t\t#否则 是一个文件\n\t\telse:\n\t\t\tfilePath = path+'/'+f\n\t\t\tf=open(filePath,'r')\n\t\t\t#读出该文件所有的行\n\t\t\talllines=f.readlines()\n\t\t\tf.close()\n\t\t\tf=open(filePath,'w+')\n\t\t\t#对所有的行进行循环\n\t\t\tfor eachline in alllines:\n\t\t\t\t#替换字符串\n\t\t\t\ta=re.sub(souceStr,destStr,eachline)\n\t\t\t\tf.writelines(a)\n\t\t\tf.close()\n\nreplace('./', \"souceStr\", input(\"please input destStr, rember to add ' at the beginning and end :\"))\n\n```\n\n详细模式\n\n这个脚本和上一个脚本是一样的，只是添加了一些输出和隐藏文件夹的判断，可以根据需要更改相应变量\n\n```\n#!/usr/bin/python  \n# -*- coding:utf8 -*-  \n  \nimport os  \nimport re\ntotalFile = 0 \nprint os.path.basename(__file__) \ndef replace(path,str1,str2):\n    # 返回一个列表，其中包含在目录条目的名称(google翻译)  \n    files = os.listdir(path)    \n    for f in files:  \n        if(os.path.isdir(path + '/' + f)):  \n            # 排除隐藏文件夹。因为隐藏文件夹过多  \n            if(f[0] == '.'):  \n                pass  \n            else:  \n                # 进入下一层文件夹  \n                replace(path+ '/' + f,str1,str2)  \n        if(os.path.isfile(path + '/' + f)):\n\t\t\tfilePath = path+'/'+f\n\t\t\tf=open(filePath,'r')\n\t\t\talllines=f.readlines()\n\t\t\tf.close()\n\t\t\tf=open(filePath,'w+')\n\t\t\tfor eachline in alllines:\n\t\t\t\ta=re.sub(str1,str2,eachline)\n\t\t\t\tf.writelines(a)\n\t\t\tprint filePath+\"-->>>\"+str1+\" replace \"+str2+\" success!\"\n\t\t\tglobal totalFile\n\t\t\ttotalFile = totalFile + 1\n\t\t\tf.close()\n  \nif __name__ == '__main__':\n    replace('E:/python/test',\"hi\",input(\"input str(rember to add '' at the beginning and end):\"))\n    #输出执行文件的总数量\n    print 'totalFile =', totalFile\n\n```\n\n\n\n## 去除文件中的注释和空白行\n\n我们有一个需求，就是去掉某些文件中的注释或者是空白行\n\n可以根据需要结合上面的脚本实现对某个目录下的所有文件去除注释和空白行\n\n```\n#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path):\n\tf=open(path,'r')\n\talllines=f.readlines()\n\tf.close()\n\tf=open(path,'w+')\n\tfor eachline in alllines:\n\t\t#去除首尾空格\n\t\tline = eachline.strip()\n\t\tif not len(line) or line.startswith('#'):\n\t\t\tcontinue\n\t\telse:\n\t\t\tf.writelines(eachline)\n\tf.close()\n\nreplace('E:/python/test/core.yaml')\n\n```\n\n","slug":"文件字符串替换","published":1,"updated":"2020-07-16T07:26:20.298Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6j000qhcqa5tff05xj","content":"<h1 id=\"文件字符串替换脚本\"><a href=\"#文件字符串替换脚本\" class=\"headerlink\" title=\"文件字符串替换脚本\"></a>文件字符串替换脚本</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于在工作中会遇到一些文件的处理问题或者其他可以使用脚本完成的工作，这个系列将记录一些我用到过的脚本</p>\n<h2 id=\"文件夹下所有文件替换某个字符串\"><a href=\"#文件夹下所有文件替换某个字符串\" class=\"headerlink\" title=\"文件夹下所有文件替换某个字符串\"></a>文件夹下所有文件替换某个字符串</h2><p>有个需求，我们需要替换某个目录下，所有文件下面的某个字符串，我们采用python来制作这个脚本</p>\n<p>精简模式</p>\n<p>这个脚本将该脚本目录下，所有文件中的“souceStr”替换成用户输入的destStr，可以自己根据需要手动更改相关地方</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path, souceStr, destStr):\n    #读取目录下所有文件\n    files = os.listdir(path)\n    #遍历这些文件\n    for f in files:\n        #如果文件名等于该脚本的名字 不执行\n        if f == os.path.basename(__file__):\n            continue\n        #如果文件是一个目录 执行递归\n        elif os.path.isdir(path + &#39;/&#39; + f):\n            replace(path+ &#39;/&#39; + f, souceStr, destStr)\n        #否则 是一个文件\n        else:\n            filePath = path+&#39;/&#39;+f\n            f=open(filePath,&#39;r&#39;)\n            #读出该文件所有的行\n            alllines=f.readlines()\n            f.close()\n            f=open(filePath,&#39;w+&#39;)\n            #对所有的行进行循环\n            for eachline in alllines:\n                #替换字符串\n                a=re.sub(souceStr,destStr,eachline)\n                f.writelines(a)\n            f.close()\n\nreplace(&#39;./&#39;, &quot;souceStr&quot;, input(&quot;please input destStr, rember to add &#39; at the beginning and end :&quot;))\n</code></pre><p>详细模式</p>\n<p>这个脚本和上一个脚本是一样的，只是添加了一些输出和隐藏文件夹的判断，可以根据需要更改相应变量</p>\n<pre><code>#!/usr/bin/python  \n# -*- coding:utf8 -*-  \n\nimport os  \nimport re\ntotalFile = 0 \nprint os.path.basename(__file__) \ndef replace(path,str1,str2):\n    # 返回一个列表，其中包含在目录条目的名称(google翻译)  \n    files = os.listdir(path)    \n    for f in files:  \n        if(os.path.isdir(path + &#39;/&#39; + f)):  \n            # 排除隐藏文件夹。因为隐藏文件夹过多  \n            if(f[0] == &#39;.&#39;):  \n                pass  \n            else:  \n                # 进入下一层文件夹  \n                replace(path+ &#39;/&#39; + f,str1,str2)  \n        if(os.path.isfile(path + &#39;/&#39; + f)):\n            filePath = path+&#39;/&#39;+f\n            f=open(filePath,&#39;r&#39;)\n            alllines=f.readlines()\n            f.close()\n            f=open(filePath,&#39;w+&#39;)\n            for eachline in alllines:\n                a=re.sub(str1,str2,eachline)\n                f.writelines(a)\n            print filePath+&quot;--&gt;&gt;&gt;&quot;+str1+&quot; replace &quot;+str2+&quot; success!&quot;\n            global totalFile\n            totalFile = totalFile + 1\n            f.close()\n\nif __name__ == &#39;__main__&#39;:\n    replace(&#39;E:/python/test&#39;,&quot;hi&quot;,input(&quot;input str(rember to add &#39;&#39; at the beginning and end):&quot;))\n    #输出执行文件的总数量\n    print &#39;totalFile =&#39;, totalFile\n</code></pre><h2 id=\"去除文件中的注释和空白行\"><a href=\"#去除文件中的注释和空白行\" class=\"headerlink\" title=\"去除文件中的注释和空白行\"></a>去除文件中的注释和空白行</h2><p>我们有一个需求，就是去掉某些文件中的注释或者是空白行</p>\n<p>可以根据需要结合上面的脚本实现对某个目录下的所有文件去除注释和空白行</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path):\n    f=open(path,&#39;r&#39;)\n    alllines=f.readlines()\n    f.close()\n    f=open(path,&#39;w+&#39;)\n    for eachline in alllines:\n        #去除首尾空格\n        line = eachline.strip()\n        if not len(line) or line.startswith(&#39;#&#39;):\n            continue\n        else:\n            f.writelines(eachline)\n    f.close()\n\nreplace(&#39;E:/python/test/core.yaml&#39;)\n</code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"文件字符串替换脚本\"><a href=\"#文件字符串替换脚本\" class=\"headerlink\" title=\"文件字符串替换脚本\"></a>文件字符串替换脚本</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于在工作中会遇到一些文件的处理问题或者其他可以使用脚本完成的工作，这个系列将记录一些我用到过的脚本</p>\n<h2 id=\"文件夹下所有文件替换某个字符串\"><a href=\"#文件夹下所有文件替换某个字符串\" class=\"headerlink\" title=\"文件夹下所有文件替换某个字符串\"></a>文件夹下所有文件替换某个字符串</h2><p>有个需求，我们需要替换某个目录下，所有文件下面的某个字符串，我们采用python来制作这个脚本</p>\n<p>精简模式</p>\n<p>这个脚本将该脚本目录下，所有文件中的“souceStr”替换成用户输入的destStr，可以自己根据需要手动更改相关地方</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path, souceStr, destStr):\n    #读取目录下所有文件\n    files = os.listdir(path)\n    #遍历这些文件\n    for f in files:\n        #如果文件名等于该脚本的名字 不执行\n        if f == os.path.basename(__file__):\n            continue\n        #如果文件是一个目录 执行递归\n        elif os.path.isdir(path + &#39;/&#39; + f):\n            replace(path+ &#39;/&#39; + f, souceStr, destStr)\n        #否则 是一个文件\n        else:\n            filePath = path+&#39;/&#39;+f\n            f=open(filePath,&#39;r&#39;)\n            #读出该文件所有的行\n            alllines=f.readlines()\n            f.close()\n            f=open(filePath,&#39;w+&#39;)\n            #对所有的行进行循环\n            for eachline in alllines:\n                #替换字符串\n                a=re.sub(souceStr,destStr,eachline)\n                f.writelines(a)\n            f.close()\n\nreplace(&#39;./&#39;, &quot;souceStr&quot;, input(&quot;please input destStr, rember to add &#39; at the beginning and end :&quot;))\n</code></pre><p>详细模式</p>\n<p>这个脚本和上一个脚本是一样的，只是添加了一些输出和隐藏文件夹的判断，可以根据需要更改相应变量</p>\n<pre><code>#!/usr/bin/python  \n# -*- coding:utf8 -*-  \n\nimport os  \nimport re\ntotalFile = 0 \nprint os.path.basename(__file__) \ndef replace(path,str1,str2):\n    # 返回一个列表，其中包含在目录条目的名称(google翻译)  \n    files = os.listdir(path)    \n    for f in files:  \n        if(os.path.isdir(path + &#39;/&#39; + f)):  \n            # 排除隐藏文件夹。因为隐藏文件夹过多  \n            if(f[0] == &#39;.&#39;):  \n                pass  \n            else:  \n                # 进入下一层文件夹  \n                replace(path+ &#39;/&#39; + f,str1,str2)  \n        if(os.path.isfile(path + &#39;/&#39; + f)):\n            filePath = path+&#39;/&#39;+f\n            f=open(filePath,&#39;r&#39;)\n            alllines=f.readlines()\n            f.close()\n            f=open(filePath,&#39;w+&#39;)\n            for eachline in alllines:\n                a=re.sub(str1,str2,eachline)\n                f.writelines(a)\n            print filePath+&quot;--&gt;&gt;&gt;&quot;+str1+&quot; replace &quot;+str2+&quot; success!&quot;\n            global totalFile\n            totalFile = totalFile + 1\n            f.close()\n\nif __name__ == &#39;__main__&#39;:\n    replace(&#39;E:/python/test&#39;,&quot;hi&quot;,input(&quot;input str(rember to add &#39;&#39; at the beginning and end):&quot;))\n    #输出执行文件的总数量\n    print &#39;totalFile =&#39;, totalFile\n</code></pre><h2 id=\"去除文件中的注释和空白行\"><a href=\"#去除文件中的注释和空白行\" class=\"headerlink\" title=\"去除文件中的注释和空白行\"></a>去除文件中的注释和空白行</h2><p>我们有一个需求，就是去掉某些文件中的注释或者是空白行</p>\n<p>可以根据需要结合上面的脚本实现对某个目录下的所有文件去除注释和空白行</p>\n<pre><code>#!/usr/bin/python\n# -*- coding:utf8 -*-\n\nimport os\nimport re\n\ndef replace(path):\n    f=open(path,&#39;r&#39;)\n    alllines=f.readlines()\n    f.close()\n    f=open(path,&#39;w+&#39;)\n    for eachline in alllines:\n        #去除首尾空格\n        line = eachline.strip()\n        if not len(line) or line.startswith(&#39;#&#39;):\n            continue\n        else:\n            f.writelines(eachline)\n    f.close()\n\nreplace(&#39;E:/python/test/core.yaml&#39;)\n</code></pre>"},{"layout":"post","title":"定时任务quartz","date":"2020-09-29T01:29:51.000Z","_content":"\n# 定时任务Quartz框架\n\n## 前言\n\n最近工作上接触到了定时任务，开始了解Quartz框架\n\n## 参考链接\n\nW3Cschool文档：https://www.w3cschool.cn/quartz_doc/\n\nQuartz官方地址：http://www.quartz-scheduler.org/documentation/\n\n## Quartz主要部分\n\nQuartz是一个开源的任务调度框架，有着简单、轻量的优势，但在集群环境中Quartz的表现不怎么友好，如果使用集群环境可以考虑[xxl-job](https://www.xuxueli.com/xxl-job/)\n\n- Scheduler - 与调度程序交互的主要API，主要用于开始、暂停、删除任务等操作。\n\n- Job - 你想要调度器执行的任务组件需要实现的接口，任务的实现类，实现 Job接口，execute方法为任务的主体实现部分\n\n- JobDetail - 用于定义作业的实例。job的实例化，一个job类 可以用于构造多个JobDetail \n\n- Trigger（即触发器） - 定义执行给定作业的计划的组件。实现定时功能（多少天、分等执行一次）\n\n- JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。简单来说JobBuilder 将一个job类实例化成JobDetail 实例，JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(\"myTrigger\", \"group1\").build();\n\n- TriggerBuilder - 用于定义/构建触发器实例。Trigger的构建方法\n\n- Scheduler 的生命期，从 SchedulerFactory 创建它时开始，到 Scheduler 调用shutdown() 方法时结束；Scheduler 被创建后，可以增加、删除和列举 Job 和 Trigger，以及执行其它与调度相关的操作（如暂停 Trigger）。但是，Scheduler 只有在调用 start() 方法后，才会真正地触发 trigger（即执行 job）\n\n\n## 简单例子\n\nmaven引入jar包\n\n```\n<dependency>\n\t<groupId>org.quartz-scheduler</groupId>\n    <artifactId>quartz</artifactId>\n    <version>2.3.1</version>\n    </exclusions>\n</dependency>\n```\n\n测试类   HelloJob类实现job接口即可\n\n```\n public class QuartzTest {\n\n      public static void main(String[] args) {\n\n          try {\n              Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n              scheduler.start();\n\t\t\t  JobDetail job = newJob(HelloJob.class)\n\t\t\t  .withIdentity(\"job1\",\"group1\")\n\t\t\t  .build();\n\t\t\t  Trigger trigger = newTrigger()\n\t\t\t  .withIdentity(\"trigger1\", \"group1\")\n\t\t\t  .startNow().withSchedule(simpleSchedule()\n              .withIntervalInSeconds(40)\n              .repeatForever()).build();\n              scheduler.scheduleJob(job, trigger);\n              scheduler.shutdown();\n          } catch (SchedulerException se) {\n              se.printStackTrace();\n          }\n      }\n  }\n```\n\n## Job与JobDetail介绍\n\nJob就是任务的实体，其中的execute方法为任务的执行方法，每一个job都需要实现Job接口\n\nJobDetail则用于包装Job实例所包含的属性，如任务名、组名等\n\n```\n //最常见的构建方法\n JobDetail job = JobBuilder.newJob(HelloJob.class)\n      .withIdentity(\"myJob\", \"group1\") // name \"myJob\", group \"group1\"\n      .build();\n\n```\n\n在job类中我们可以看到execute方法只有一个参数JobExecutionContext，那如果我们需要向job传递参数应该怎么实现呢？\n\n```\npublic void execute(JobExecutionContext context) throws JobExecutionException{\n\t\n}\n```\n\n答案是通过JobDataMap，是JobDetail的一部分\n\n```\n//这样定义我们就通过JobDataMap 存储了两个变量jobSays和myFloatValue\nJobDetail job = newJob(DumbJob.class)\n      .withIdentity(\"myJob\", \"group1\") // name \"myJob\", group \"group1\"\n      .usingJobData(\"jobSays\", \"Hello World!\")\n      .usingJobData(\"myFloatValue\", 3.141f)\n      .build();\n      \n//在execute方法中我们就可以通过key取出来了      \n  \t  JobDataMap dataMap = context.getJobDetail().getJobDataMap();\n      String jobSays = dataMap.getString(\"jobSays\");\n      float myFloatValue = dataMap.getFloat(\"myFloatValue\");\n```\n\nJob的注解\n\n```\n/*\n@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例。请注意这里的用词。拿前一小节的例子来说，如果“SalesReportJob”类上有该注解，则同一时刻仅允许执行一个“SalesReportForJoe”实例，但可以并发地执行“SalesReportForMike”类的一个实例。所以该限制是针对JobDetail的，而不是job类的。但是我们认为（在设计Quartz的时候）应该将该注解放在job类上，因为job类的改变经常会导致其行为发生变化。\n*/\n@DisallowConcurrentExecution\n/*\n@PersistJobDataAfterExecution：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据。和 @DisallowConcurrentExecution注解一样，尽管注解是加在job类上的，但其限制作用是针对job实例的，而不是job类的。由job类来承载注解，是因为job类的内容经常会影响其行为状态（比如，job类的execute方法需要显式地“理解”其”状态“）。\n如果你使用了@PersistJobDataAfterExecution注解，我们强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。\n*/\n@PersistJobDataAfterExecution\n```\n\n## Triggers\n\nTriggers用于规定任务何时执行、按何种规律执行（如每月一号执行一次备份数据任务）\n\nTriggers有两种常用子类：SimpleTrigger、CronTrigger\n\nTriggers的公共属性：\n\n- jobKey属性：当trigger触发时被执行的job的身份；\n- startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。\n- endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。\n\n优先级：\n\n如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。\n\npriority属性的值可以是任意整数，正数、负数都可以。\n\n注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。\n\n注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。\n\n```\n//优先级、开始时间、结束时间\nTriggerBuilder.newTrigger().withPriority(1).startAt(startDate).endAt(endDate).withIdentity(\"job1\",\"group1\");\n\n```\n\n错过触发(misfire Instructions)\n\n如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。\n\n不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。\n\n当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。\n\n### SimpleTrigger\n\nSimpleTrigger可以满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次。\n\nSimpleTrigger的属性包括：开始时间、结束时间、重复次数以及重复的间隔。\n\n```\n //指定时间触发，每隔10秒执行一次，重复10次：\n trigger = newTrigger()\n        .withIdentity(\"trigger3\", \"group1\")\n        .startAt(myTimeToStartFiring)\n        .withSchedule(simpleSchedule()\n            .withIntervalInSeconds(10)\n            .withRepeatCount(10)) \n        .forJob(myJob)                   \n        .build();\n```\n\nSimpleTrigger Misfire策略\n\n- withMisfireHandlingInstructionFireNow ：立即执行一次\n- withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期\n- withMisfireHandlingInstructionNextWithExistingCount：不立即执行，即放弃错过的\n- withMisfireHandlingInstructionNowWithExistingCount：立即执行一次\n- withMisfireHandlingInstructionNextWithRemainingCount：不立即执行，即放弃错过的\n- withMisfireHandlingInstructionNowWithRemainingCount：立即执行一次\n- MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT：此指令导致trigger忘记原始设置的starttime和repeat-count，触发器的repeat-count将被设置为剩余的次数\n\n### CronTrigger\n\n基于日历，可以指定号时间表，如每周五，但同时也可以设置startTime和endTime\n\n```\n //建立一个触发器，每隔一分钟，每天上午8点至下午5点之间：\n trigger = newTrigger()\n    .withIdentity(\"trigger3\", \"group1\")\n    .withSchedule(cronSchedule(\"0 0/2 8-17 * * ?\"))\n    .forJob(\"myJob\", \"group1\")\n    .build();\n```\n\nCronTrigger Misfire策略\n\n- withMisfireHandlingInstructionDoNothing：不触发立即执行，即放弃错过的\n- withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期\n- withMisfireHandlingInstructionFireAndProceed：立即执行一次","source":"_posts/定时任务quartz.md","raw":"---\n\nlayout: post\ntitle: 定时任务quartz\ndate: 2020-09-29 09:29:51\ntags: Quartz\ncategories: Quartz\n---\n\n# 定时任务Quartz框架\n\n## 前言\n\n最近工作上接触到了定时任务，开始了解Quartz框架\n\n## 参考链接\n\nW3Cschool文档：https://www.w3cschool.cn/quartz_doc/\n\nQuartz官方地址：http://www.quartz-scheduler.org/documentation/\n\n## Quartz主要部分\n\nQuartz是一个开源的任务调度框架，有着简单、轻量的优势，但在集群环境中Quartz的表现不怎么友好，如果使用集群环境可以考虑[xxl-job](https://www.xuxueli.com/xxl-job/)\n\n- Scheduler - 与调度程序交互的主要API，主要用于开始、暂停、删除任务等操作。\n\n- Job - 你想要调度器执行的任务组件需要实现的接口，任务的实现类，实现 Job接口，execute方法为任务的主体实现部分\n\n- JobDetail - 用于定义作业的实例。job的实例化，一个job类 可以用于构造多个JobDetail \n\n- Trigger（即触发器） - 定义执行给定作业的计划的组件。实现定时功能（多少天、分等执行一次）\n\n- JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。简单来说JobBuilder 将一个job类实例化成JobDetail 实例，JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(\"myTrigger\", \"group1\").build();\n\n- TriggerBuilder - 用于定义/构建触发器实例。Trigger的构建方法\n\n- Scheduler 的生命期，从 SchedulerFactory 创建它时开始，到 Scheduler 调用shutdown() 方法时结束；Scheduler 被创建后，可以增加、删除和列举 Job 和 Trigger，以及执行其它与调度相关的操作（如暂停 Trigger）。但是，Scheduler 只有在调用 start() 方法后，才会真正地触发 trigger（即执行 job）\n\n\n## 简单例子\n\nmaven引入jar包\n\n```\n<dependency>\n\t<groupId>org.quartz-scheduler</groupId>\n    <artifactId>quartz</artifactId>\n    <version>2.3.1</version>\n    </exclusions>\n</dependency>\n```\n\n测试类   HelloJob类实现job接口即可\n\n```\n public class QuartzTest {\n\n      public static void main(String[] args) {\n\n          try {\n              Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n              scheduler.start();\n\t\t\t  JobDetail job = newJob(HelloJob.class)\n\t\t\t  .withIdentity(\"job1\",\"group1\")\n\t\t\t  .build();\n\t\t\t  Trigger trigger = newTrigger()\n\t\t\t  .withIdentity(\"trigger1\", \"group1\")\n\t\t\t  .startNow().withSchedule(simpleSchedule()\n              .withIntervalInSeconds(40)\n              .repeatForever()).build();\n              scheduler.scheduleJob(job, trigger);\n              scheduler.shutdown();\n          } catch (SchedulerException se) {\n              se.printStackTrace();\n          }\n      }\n  }\n```\n\n## Job与JobDetail介绍\n\nJob就是任务的实体，其中的execute方法为任务的执行方法，每一个job都需要实现Job接口\n\nJobDetail则用于包装Job实例所包含的属性，如任务名、组名等\n\n```\n //最常见的构建方法\n JobDetail job = JobBuilder.newJob(HelloJob.class)\n      .withIdentity(\"myJob\", \"group1\") // name \"myJob\", group \"group1\"\n      .build();\n\n```\n\n在job类中我们可以看到execute方法只有一个参数JobExecutionContext，那如果我们需要向job传递参数应该怎么实现呢？\n\n```\npublic void execute(JobExecutionContext context) throws JobExecutionException{\n\t\n}\n```\n\n答案是通过JobDataMap，是JobDetail的一部分\n\n```\n//这样定义我们就通过JobDataMap 存储了两个变量jobSays和myFloatValue\nJobDetail job = newJob(DumbJob.class)\n      .withIdentity(\"myJob\", \"group1\") // name \"myJob\", group \"group1\"\n      .usingJobData(\"jobSays\", \"Hello World!\")\n      .usingJobData(\"myFloatValue\", 3.141f)\n      .build();\n      \n//在execute方法中我们就可以通过key取出来了      \n  \t  JobDataMap dataMap = context.getJobDetail().getJobDataMap();\n      String jobSays = dataMap.getString(\"jobSays\");\n      float myFloatValue = dataMap.getFloat(\"myFloatValue\");\n```\n\nJob的注解\n\n```\n/*\n@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例。请注意这里的用词。拿前一小节的例子来说，如果“SalesReportJob”类上有该注解，则同一时刻仅允许执行一个“SalesReportForJoe”实例，但可以并发地执行“SalesReportForMike”类的一个实例。所以该限制是针对JobDetail的，而不是job类的。但是我们认为（在设计Quartz的时候）应该将该注解放在job类上，因为job类的改变经常会导致其行为发生变化。\n*/\n@DisallowConcurrentExecution\n/*\n@PersistJobDataAfterExecution：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据。和 @DisallowConcurrentExecution注解一样，尽管注解是加在job类上的，但其限制作用是针对job实例的，而不是job类的。由job类来承载注解，是因为job类的内容经常会影响其行为状态（比如，job类的execute方法需要显式地“理解”其”状态“）。\n如果你使用了@PersistJobDataAfterExecution注解，我们强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。\n*/\n@PersistJobDataAfterExecution\n```\n\n## Triggers\n\nTriggers用于规定任务何时执行、按何种规律执行（如每月一号执行一次备份数据任务）\n\nTriggers有两种常用子类：SimpleTrigger、CronTrigger\n\nTriggers的公共属性：\n\n- jobKey属性：当trigger触发时被执行的job的身份；\n- startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。\n- endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。\n\n优先级：\n\n如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。\n\npriority属性的值可以是任意整数，正数、负数都可以。\n\n注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。\n\n注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。\n\n```\n//优先级、开始时间、结束时间\nTriggerBuilder.newTrigger().withPriority(1).startAt(startDate).endAt(endDate).withIdentity(\"job1\",\"group1\");\n\n```\n\n错过触发(misfire Instructions)\n\n如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。\n\n不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。\n\n当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。\n\n### SimpleTrigger\n\nSimpleTrigger可以满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次。\n\nSimpleTrigger的属性包括：开始时间、结束时间、重复次数以及重复的间隔。\n\n```\n //指定时间触发，每隔10秒执行一次，重复10次：\n trigger = newTrigger()\n        .withIdentity(\"trigger3\", \"group1\")\n        .startAt(myTimeToStartFiring)\n        .withSchedule(simpleSchedule()\n            .withIntervalInSeconds(10)\n            .withRepeatCount(10)) \n        .forJob(myJob)                   \n        .build();\n```\n\nSimpleTrigger Misfire策略\n\n- withMisfireHandlingInstructionFireNow ：立即执行一次\n- withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期\n- withMisfireHandlingInstructionNextWithExistingCount：不立即执行，即放弃错过的\n- withMisfireHandlingInstructionNowWithExistingCount：立即执行一次\n- withMisfireHandlingInstructionNextWithRemainingCount：不立即执行，即放弃错过的\n- withMisfireHandlingInstructionNowWithRemainingCount：立即执行一次\n- MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT：此指令导致trigger忘记原始设置的starttime和repeat-count，触发器的repeat-count将被设置为剩余的次数\n\n### CronTrigger\n\n基于日历，可以指定号时间表，如每周五，但同时也可以设置startTime和endTime\n\n```\n //建立一个触发器，每隔一分钟，每天上午8点至下午5点之间：\n trigger = newTrigger()\n    .withIdentity(\"trigger3\", \"group1\")\n    .withSchedule(cronSchedule(\"0 0/2 8-17 * * ?\"))\n    .forJob(\"myJob\", \"group1\")\n    .build();\n```\n\nCronTrigger Misfire策略\n\n- withMisfireHandlingInstructionDoNothing：不触发立即执行，即放弃错过的\n- withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期\n- withMisfireHandlingInstructionFireAndProceed：立即执行一次","slug":"定时任务quartz","published":1,"updated":"2020-09-29T05:47:20.203Z","comments":1,"photos":[],"link":"","_id":"ckfnlni6j000shcqa73g73jo2","content":"<h1 id=\"定时任务Quartz框架\"><a href=\"#定时任务Quartz框架\" class=\"headerlink\" title=\"定时任务Quartz框架\"></a>定时任务Quartz框架</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近工作上接触到了定时任务，开始了解Quartz框架</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>W3Cschool文档：<a href=\"https://www.w3cschool.cn/quartz_doc/\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/quartz_doc/</a></p>\n<p>Quartz官方地址：<a href=\"http://www.quartz-scheduler.org/documentation/\" target=\"_blank\" rel=\"noopener\">http://www.quartz-scheduler.org/documentation/</a></p>\n<h2 id=\"Quartz主要部分\"><a href=\"#Quartz主要部分\" class=\"headerlink\" title=\"Quartz主要部分\"></a>Quartz主要部分</h2><p>Quartz是一个开源的任务调度框架，有着简单、轻量的优势，但在集群环境中Quartz的表现不怎么友好，如果使用集群环境可以考虑<a href=\"https://www.xuxueli.com/xxl-job/\" target=\"_blank\" rel=\"noopener\">xxl-job</a></p>\n<ul>\n<li><p>Scheduler - 与调度程序交互的主要API，主要用于开始、暂停、删除任务等操作。</p>\n</li>\n<li><p>Job - 你想要调度器执行的任务组件需要实现的接口，任务的实现类，实现 Job接口，execute方法为任务的主体实现部分</p>\n</li>\n<li><p>JobDetail - 用于定义作业的实例。job的实例化，一个job类 可以用于构造多个JobDetail </p>\n</li>\n<li><p>Trigger（即触发器） - 定义执行给定作业的计划的组件。实现定时功能（多少天、分等执行一次）</p>\n</li>\n<li><p>JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。简单来说JobBuilder 将一个job类实例化成JobDetail 实例，JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(“myTrigger”, “group1”).build();</p>\n</li>\n<li><p>TriggerBuilder - 用于定义/构建触发器实例。Trigger的构建方法</p>\n</li>\n<li><p>Scheduler 的生命期，从 SchedulerFactory 创建它时开始，到 Scheduler 调用shutdown() 方法时结束；Scheduler 被创建后，可以增加、删除和列举 Job 和 Trigger，以及执行其它与调度相关的操作（如暂停 Trigger）。但是，Scheduler 只有在调用 start() 方法后，才会真正地触发 trigger（即执行 job）</p>\n</li>\n</ul>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><p>maven引入jar包</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;\n    &lt;artifactId&gt;quartz&lt;/artifactId&gt;\n    &lt;version&gt;2.3.1&lt;/version&gt;\n    &lt;/exclusions&gt;\n&lt;/dependency&gt;</code></pre><p>测试类   HelloJob类实现job接口即可</p>\n<pre><code> public class QuartzTest {\n\n      public static void main(String[] args) {\n\n          try {\n              Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n              scheduler.start();\n              JobDetail job = newJob(HelloJob.class)\n              .withIdentity(&quot;job1&quot;,&quot;group1&quot;)\n              .build();\n              Trigger trigger = newTrigger()\n              .withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)\n              .startNow().withSchedule(simpleSchedule()\n              .withIntervalInSeconds(40)\n              .repeatForever()).build();\n              scheduler.scheduleJob(job, trigger);\n              scheduler.shutdown();\n          } catch (SchedulerException se) {\n              se.printStackTrace();\n          }\n      }\n  }</code></pre><h2 id=\"Job与JobDetail介绍\"><a href=\"#Job与JobDetail介绍\" class=\"headerlink\" title=\"Job与JobDetail介绍\"></a>Job与JobDetail介绍</h2><p>Job就是任务的实体，其中的execute方法为任务的执行方法，每一个job都需要实现Job接口</p>\n<p>JobDetail则用于包装Job实例所包含的属性，如任务名、组名等</p>\n<pre><code> //最常见的构建方法\n JobDetail job = JobBuilder.newJob(HelloJob.class)\n      .withIdentity(&quot;myJob&quot;, &quot;group1&quot;) // name &quot;myJob&quot;, group &quot;group1&quot;\n      .build();\n</code></pre><p>在job类中我们可以看到execute方法只有一个参数JobExecutionContext，那如果我们需要向job传递参数应该怎么实现呢？</p>\n<pre><code>public void execute(JobExecutionContext context) throws JobExecutionException{\n\n}</code></pre><p>答案是通过JobDataMap，是JobDetail的一部分</p>\n<pre><code>//这样定义我们就通过JobDataMap 存储了两个变量jobSays和myFloatValue\nJobDetail job = newJob(DumbJob.class)\n      .withIdentity(&quot;myJob&quot;, &quot;group1&quot;) // name &quot;myJob&quot;, group &quot;group1&quot;\n      .usingJobData(&quot;jobSays&quot;, &quot;Hello World!&quot;)\n      .usingJobData(&quot;myFloatValue&quot;, 3.141f)\n      .build();\n\n//在execute方法中我们就可以通过key取出来了      \n        JobDataMap dataMap = context.getJobDetail().getJobDataMap();\n      String jobSays = dataMap.getString(&quot;jobSays&quot;);\n      float myFloatValue = dataMap.getFloat(&quot;myFloatValue&quot;);</code></pre><p>Job的注解</p>\n<pre><code>/*\n@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例。请注意这里的用词。拿前一小节的例子来说，如果“SalesReportJob”类上有该注解，则同一时刻仅允许执行一个“SalesReportForJoe”实例，但可以并发地执行“SalesReportForMike”类的一个实例。所以该限制是针对JobDetail的，而不是job类的。但是我们认为（在设计Quartz的时候）应该将该注解放在job类上，因为job类的改变经常会导致其行为发生变化。\n*/\n@DisallowConcurrentExecution\n/*\n@PersistJobDataAfterExecution：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据。和 @DisallowConcurrentExecution注解一样，尽管注解是加在job类上的，但其限制作用是针对job实例的，而不是job类的。由job类来承载注解，是因为job类的内容经常会影响其行为状态（比如，job类的execute方法需要显式地“理解”其”状态“）。\n如果你使用了@PersistJobDataAfterExecution注解，我们强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。\n*/\n@PersistJobDataAfterExecution</code></pre><h2 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h2><p>Triggers用于规定任务何时执行、按何种规律执行（如每月一号执行一次备份数据任务）</p>\n<p>Triggers有两种常用子类：SimpleTrigger、CronTrigger</p>\n<p>Triggers的公共属性：</p>\n<ul>\n<li>jobKey属性：当trigger触发时被执行的job的身份；</li>\n<li>startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。</li>\n<li>endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。</li>\n</ul>\n<p>优先级：</p>\n<p>如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。</p>\n<p>priority属性的值可以是任意整数，正数、负数都可以。</p>\n<p>注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。</p>\n<p>注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。</p>\n<pre><code>//优先级、开始时间、结束时间\nTriggerBuilder.newTrigger().withPriority(1).startAt(startDate).endAt(endDate).withIdentity(&quot;job1&quot;,&quot;group1&quot;);\n</code></pre><p>错过触发(misfire Instructions)</p>\n<p>如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。</p>\n<p>不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。</p>\n<p>当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。</p>\n<h3 id=\"SimpleTrigger\"><a href=\"#SimpleTrigger\" class=\"headerlink\" title=\"SimpleTrigger\"></a>SimpleTrigger</h3><p>SimpleTrigger可以满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次。</p>\n<p>SimpleTrigger的属性包括：开始时间、结束时间、重复次数以及重复的间隔。</p>\n<pre><code> //指定时间触发，每隔10秒执行一次，重复10次：\n trigger = newTrigger()\n        .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)\n        .startAt(myTimeToStartFiring)\n        .withSchedule(simpleSchedule()\n            .withIntervalInSeconds(10)\n            .withRepeatCount(10)) \n        .forJob(myJob)                   \n        .build();</code></pre><p>SimpleTrigger Misfire策略</p>\n<ul>\n<li>withMisfireHandlingInstructionFireNow ：立即执行一次</li>\n<li>withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期</li>\n<li>withMisfireHandlingInstructionNextWithExistingCount：不立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionNowWithExistingCount：立即执行一次</li>\n<li>withMisfireHandlingInstructionNextWithRemainingCount：不立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionNowWithRemainingCount：立即执行一次</li>\n<li>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT：此指令导致trigger忘记原始设置的starttime和repeat-count，触发器的repeat-count将被设置为剩余的次数</li>\n</ul>\n<h3 id=\"CronTrigger\"><a href=\"#CronTrigger\" class=\"headerlink\" title=\"CronTrigger\"></a>CronTrigger</h3><p>基于日历，可以指定号时间表，如每周五，但同时也可以设置startTime和endTime</p>\n<pre><code> //建立一个触发器，每隔一分钟，每天上午8点至下午5点之间：\n trigger = newTrigger()\n    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)\n    .withSchedule(cronSchedule(&quot;0 0/2 8-17 * * ?&quot;))\n    .forJob(&quot;myJob&quot;, &quot;group1&quot;)\n    .build();</code></pre><p>CronTrigger Misfire策略</p>\n<ul>\n<li>withMisfireHandlingInstructionDoNothing：不触发立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期</li>\n<li>withMisfireHandlingInstructionFireAndProceed：立即执行一次</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"/medias/avatar.jpg","name":"Liao QIng","introduction":"专业搬砖，从未被超越","url":"https://github.com/liaoqing1999","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"定时任务Quartz框架\"><a href=\"#定时任务Quartz框架\" class=\"headerlink\" title=\"定时任务Quartz框架\"></a>定时任务Quartz框架</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近工作上接触到了定时任务，开始了解Quartz框架</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>W3Cschool文档：<a href=\"https://www.w3cschool.cn/quartz_doc/\" target=\"_blank\" rel=\"noopener\">https://www.w3cschool.cn/quartz_doc/</a></p>\n<p>Quartz官方地址：<a href=\"http://www.quartz-scheduler.org/documentation/\" target=\"_blank\" rel=\"noopener\">http://www.quartz-scheduler.org/documentation/</a></p>\n<h2 id=\"Quartz主要部分\"><a href=\"#Quartz主要部分\" class=\"headerlink\" title=\"Quartz主要部分\"></a>Quartz主要部分</h2><p>Quartz是一个开源的任务调度框架，有着简单、轻量的优势，但在集群环境中Quartz的表现不怎么友好，如果使用集群环境可以考虑<a href=\"https://www.xuxueli.com/xxl-job/\" target=\"_blank\" rel=\"noopener\">xxl-job</a></p>\n<ul>\n<li><p>Scheduler - 与调度程序交互的主要API，主要用于开始、暂停、删除任务等操作。</p>\n</li>\n<li><p>Job - 你想要调度器执行的任务组件需要实现的接口，任务的实现类，实现 Job接口，execute方法为任务的主体实现部分</p>\n</li>\n<li><p>JobDetail - 用于定义作业的实例。job的实例化，一个job类 可以用于构造多个JobDetail </p>\n</li>\n<li><p>Trigger（即触发器） - 定义执行给定作业的计划的组件。实现定时功能（多少天、分等执行一次）</p>\n</li>\n<li><p>JobBuilder - 用于定义/构建 JobDetail 实例，用于定义作业的实例。简单来说JobBuilder 将一个job类实例化成JobDetail 实例，JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(“myTrigger”, “group1”).build();</p>\n</li>\n<li><p>TriggerBuilder - 用于定义/构建触发器实例。Trigger的构建方法</p>\n</li>\n<li><p>Scheduler 的生命期，从 SchedulerFactory 创建它时开始，到 Scheduler 调用shutdown() 方法时结束；Scheduler 被创建后，可以增加、删除和列举 Job 和 Trigger，以及执行其它与调度相关的操作（如暂停 Trigger）。但是，Scheduler 只有在调用 start() 方法后，才会真正地触发 trigger（即执行 job）</p>\n</li>\n</ul>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><p>maven引入jar包</p>\n<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;\n    &lt;artifactId&gt;quartz&lt;/artifactId&gt;\n    &lt;version&gt;2.3.1&lt;/version&gt;\n    &lt;/exclusions&gt;\n&lt;/dependency&gt;</code></pre><p>测试类   HelloJob类实现job接口即可</p>\n<pre><code> public class QuartzTest {\n\n      public static void main(String[] args) {\n\n          try {\n              Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n              scheduler.start();\n              JobDetail job = newJob(HelloJob.class)\n              .withIdentity(&quot;job1&quot;,&quot;group1&quot;)\n              .build();\n              Trigger trigger = newTrigger()\n              .withIdentity(&quot;trigger1&quot;, &quot;group1&quot;)\n              .startNow().withSchedule(simpleSchedule()\n              .withIntervalInSeconds(40)\n              .repeatForever()).build();\n              scheduler.scheduleJob(job, trigger);\n              scheduler.shutdown();\n          } catch (SchedulerException se) {\n              se.printStackTrace();\n          }\n      }\n  }</code></pre><h2 id=\"Job与JobDetail介绍\"><a href=\"#Job与JobDetail介绍\" class=\"headerlink\" title=\"Job与JobDetail介绍\"></a>Job与JobDetail介绍</h2><p>Job就是任务的实体，其中的execute方法为任务的执行方法，每一个job都需要实现Job接口</p>\n<p>JobDetail则用于包装Job实例所包含的属性，如任务名、组名等</p>\n<pre><code> //最常见的构建方法\n JobDetail job = JobBuilder.newJob(HelloJob.class)\n      .withIdentity(&quot;myJob&quot;, &quot;group1&quot;) // name &quot;myJob&quot;, group &quot;group1&quot;\n      .build();\n</code></pre><p>在job类中我们可以看到execute方法只有一个参数JobExecutionContext，那如果我们需要向job传递参数应该怎么实现呢？</p>\n<pre><code>public void execute(JobExecutionContext context) throws JobExecutionException{\n\n}</code></pre><p>答案是通过JobDataMap，是JobDetail的一部分</p>\n<pre><code>//这样定义我们就通过JobDataMap 存储了两个变量jobSays和myFloatValue\nJobDetail job = newJob(DumbJob.class)\n      .withIdentity(&quot;myJob&quot;, &quot;group1&quot;) // name &quot;myJob&quot;, group &quot;group1&quot;\n      .usingJobData(&quot;jobSays&quot;, &quot;Hello World!&quot;)\n      .usingJobData(&quot;myFloatValue&quot;, 3.141f)\n      .build();\n\n//在execute方法中我们就可以通过key取出来了      \n        JobDataMap dataMap = context.getJobDetail().getJobDataMap();\n      String jobSays = dataMap.getString(&quot;jobSays&quot;);\n      float myFloatValue = dataMap.getFloat(&quot;myFloatValue&quot;);</code></pre><p>Job的注解</p>\n<pre><code>/*\n@DisallowConcurrentExecution：将该注解加到job类上，告诉Quartz不要并发地执行同一个job定义（这里指特定的job类）的多个实例。请注意这里的用词。拿前一小节的例子来说，如果“SalesReportJob”类上有该注解，则同一时刻仅允许执行一个“SalesReportForJoe”实例，但可以并发地执行“SalesReportForMike”类的一个实例。所以该限制是针对JobDetail的，而不是job类的。但是我们认为（在设计Quartz的时候）应该将该注解放在job类上，因为job类的改变经常会导致其行为发生变化。\n*/\n@DisallowConcurrentExecution\n/*\n@PersistJobDataAfterExecution：将该注解加在job类上，告诉Quartz在成功执行了job类的execute方法后（没有发生任何异常），更新JobDetail中JobDataMap的数据，使得该job（即JobDetail）在下一次执行的时候，JobDataMap中是更新后的数据，而不是更新前的旧数据。和 @DisallowConcurrentExecution注解一样，尽管注解是加在job类上的，但其限制作用是针对job实例的，而不是job类的。由job类来承载注解，是因为job类的内容经常会影响其行为状态（比如，job类的execute方法需要显式地“理解”其”状态“）。\n如果你使用了@PersistJobDataAfterExecution注解，我们强烈建议你同时使用@DisallowConcurrentExecution注解，因为当同一个job（JobDetail）的两个实例被并发执行时，由于竞争，JobDataMap中存储的数据很可能是不确定的。\n*/\n@PersistJobDataAfterExecution</code></pre><h2 id=\"Triggers\"><a href=\"#Triggers\" class=\"headerlink\" title=\"Triggers\"></a>Triggers</h2><p>Triggers用于规定任务何时执行、按何种规律执行（如每月一号执行一次备份数据任务）</p>\n<p>Triggers有两种常用子类：SimpleTrigger、CronTrigger</p>\n<p>Triggers的公共属性：</p>\n<ul>\n<li>jobKey属性：当trigger触发时被执行的job的身份；</li>\n<li>startTime属性：设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；有些类型的trigger，会在设置的startTime时立即触发，有些类型的trigger，表示其触发是在startTime之后开始生效。比如，现在是1月份，你设置了一个trigger–“在每个月的第5天执行”，然后你将startTime属性设置为4月1号，则该trigger第一次触发会是在几个月以后了(即4月5号)。</li>\n<li>endTime属性：表示trigger失效的时间点。比如，”每月第5天执行”的trigger，如果其endTime是7月1号，则其最后一次执行时间是6月5号。</li>\n</ul>\n<p>优先级：</p>\n<p>如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性。</p>\n<p>priority属性的值可以是任意整数，正数、负数都可以。</p>\n<p>注意：只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行。</p>\n<p>注意：如果trigger是可恢复的，在恢复后再调度时，优先级与原trigger是一样的。</p>\n<pre><code>//优先级、开始时间、结束时间\nTriggerBuilder.newTrigger().withPriority(1).startAt(startDate).endAt(endDate).withIdentity(&quot;job1&quot;,&quot;group1&quot;);\n</code></pre><p>错过触发(misfire Instructions)</p>\n<p>如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)。</p>\n<p>不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”，即根据trigger的类型和配置动态调整行为。</p>\n<p>当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger。然后根据它们各自的misfire机制更新trigger的信息。</p>\n<h3 id=\"SimpleTrigger\"><a href=\"#SimpleTrigger\" class=\"headerlink\" title=\"SimpleTrigger\"></a>SimpleTrigger</h3><p>SimpleTrigger可以满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次。</p>\n<p>SimpleTrigger的属性包括：开始时间、结束时间、重复次数以及重复的间隔。</p>\n<pre><code> //指定时间触发，每隔10秒执行一次，重复10次：\n trigger = newTrigger()\n        .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)\n        .startAt(myTimeToStartFiring)\n        .withSchedule(simpleSchedule()\n            .withIntervalInSeconds(10)\n            .withRepeatCount(10)) \n        .forJob(myJob)                   \n        .build();</code></pre><p>SimpleTrigger Misfire策略</p>\n<ul>\n<li>withMisfireHandlingInstructionFireNow ：立即执行一次</li>\n<li>withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期</li>\n<li>withMisfireHandlingInstructionNextWithExistingCount：不立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionNowWithExistingCount：立即执行一次</li>\n<li>withMisfireHandlingInstructionNextWithRemainingCount：不立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionNowWithRemainingCount：立即执行一次</li>\n<li>MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT：此指令导致trigger忘记原始设置的starttime和repeat-count，触发器的repeat-count将被设置为剩余的次数</li>\n</ul>\n<h3 id=\"CronTrigger\"><a href=\"#CronTrigger\" class=\"headerlink\" title=\"CronTrigger\"></a>CronTrigger</h3><p>基于日历，可以指定号时间表，如每周五，但同时也可以设置startTime和endTime</p>\n<pre><code> //建立一个触发器，每隔一分钟，每天上午8点至下午5点之间：\n trigger = newTrigger()\n    .withIdentity(&quot;trigger3&quot;, &quot;group1&quot;)\n    .withSchedule(cronSchedule(&quot;0 0/2 8-17 * * ?&quot;))\n    .forJob(&quot;myJob&quot;, &quot;group1&quot;)\n    .build();</code></pre><p>CronTrigger Misfire策略</p>\n<ul>\n<li>withMisfireHandlingInstructionDoNothing：不触发立即执行，即放弃错过的</li>\n<li>withMisfireHandlingInstructionIgnoreMisfires：重做错过的所有频率周期</li>\n<li>withMisfireHandlingInstructionFireAndProceed：立即执行一次</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/fabric搭建（二）/fabric-file.png","post":"ckfnlni6e000ghcqa8oqrdlmc","slug":"fabric-file.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（二）/git-version.png","post":"ckfnlni6e000ghcqa8oqrdlmc","slug":"git-version.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（二）/go-path.png","post":"ckfnlni6e000ghcqa8oqrdlmc","slug":"go-path.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（一）/docker-compose-version.png","post":"ckfnlni6a0008hcqa3imi0bxy","slug":"docker-compose-version.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（一）/docker-version.png","post":"ckfnlni6a0008hcqa3imi0bxy","slug":"docker-version.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（一）/go-path.png","post":"ckfnlni6a0008hcqa3imi0bxy","slug":"go-path.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（一）/go-size.png","post":"ckfnlni6a0008hcqa3imi0bxy","slug":"go-size.png","modified":1,"renderable":1},{"_id":"source/_posts/fabric搭建（一）/go-version.png","post":"ckfnlni6a0008hcqa3imi0bxy","slug":"go-version.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckfnlni600000hcqa256qf3ar","category_id":"ckfnlni670004hcqah3sx535h","_id":"ckfnlni6f000hhcqahob4f0ne"},{"post_id":"ckfnlni650002hcqa4vtg0ok7","category_id":"ckfnlni6c000bhcqa2atihp5o","_id":"ckfnlni6i000nhcqa68fo2du4"},{"post_id":"ckfnlni690006hcqac46r79eg","category_id":"ckfnlni6f000ihcqa6fhj8980","_id":"ckfnlni6k000thcqa800m0e55"},{"post_id":"ckfnlni6a0008hcqa3imi0bxy","category_id":"ckfnlni6i000ohcqacwzi3dn8","_id":"ckfnlni6l000xhcqadt0rdk57"},{"post_id":"ckfnlni6b000ahcqah75tdpcj","category_id":"ckfnlni6k000uhcqafnv53usd","_id":"ckfnlni6n0012hcqa53lvhph6"},{"post_id":"ckfnlni6d000fhcqa0bpm9o9f","category_id":"ckfnlni6k000uhcqafnv53usd","_id":"ckfnlni6o0016hcqa0ngf7k33"},{"post_id":"ckfnlni6e000ghcqa8oqrdlmc","category_id":"ckfnlni6i000ohcqacwzi3dn8","_id":"ckfnlni6o0019hcqabbm42fx4"},{"post_id":"ckfnlni6h000mhcqaarxqexf6","category_id":"ckfnlni6n0015hcqaa4zd3qwz","_id":"ckfnlni6q001dhcqa9943cna0"},{"post_id":"ckfnlni6j000qhcqa5tff05xj","category_id":"ckfnlni6o001ahcqa1bto2ukg","_id":"ckfnlni6r001hhcqaahzff3e7"},{"post_id":"ckfnlni6j000shcqa73g73jo2","category_id":"ckfnlni6n0015hcqaa4zd3qwz","_id":"ckfnlni6r001jhcqa7bqth2em"}],"PostTag":[{"post_id":"ckfnlni600000hcqa256qf3ar","tag_id":"ckfnlni680005hcqac52lgeez","_id":"ckfnlni6d000ehcqaaujmha7z"},{"post_id":"ckfnlni650002hcqa4vtg0ok7","tag_id":"ckfnlni6c000chcqa7rrm0kk8","_id":"ckfnlni6h000lhcqaeo0reutr"},{"post_id":"ckfnlni690006hcqac46r79eg","tag_id":"ckfnlni6f000jhcqadg6jam9w","_id":"ckfnlni6j000rhcqa4ajse97b"},{"post_id":"ckfnlni6a0008hcqa3imi0bxy","tag_id":"ckfnlni6i000phcqa7xlu0h2t","_id":"ckfnlni6l000whcqa411jgbtl"},{"post_id":"ckfnlni6b000ahcqah75tdpcj","tag_id":"ckfnlni6k000vhcqa1py916m7","_id":"ckfnlni6m0010hcqaclad3mc4"},{"post_id":"ckfnlni6d000fhcqa0bpm9o9f","tag_id":"ckfnlni6k000vhcqa1py916m7","_id":"ckfnlni6n0014hcqahk6dfd3w"},{"post_id":"ckfnlni6e000ghcqa8oqrdlmc","tag_id":"ckfnlni6i000phcqa7xlu0h2t","_id":"ckfnlni6o0018hcqa7evt7v2u"},{"post_id":"ckfnlni6h000mhcqaarxqexf6","tag_id":"ckfnlni6o0017hcqa5fb4bqjd","_id":"ckfnlni6q001chcqad0omh6af"},{"post_id":"ckfnlni6j000qhcqa5tff05xj","tag_id":"ckfnlni6o001bhcqaftje6bnp","_id":"ckfnlni6r001ghcqacp8cgese"},{"post_id":"ckfnlni6j000shcqa73g73jo2","tag_id":"ckfnlni6o0017hcqa5fb4bqjd","_id":"ckfnlni6r001ihcqa6s0ta23q"}],"Tag":[{"name":"Chrome","_id":"ckfnlni680005hcqac52lgeez"},{"name":"Idea","_id":"ckfnlni6c000chcqa7rrm0kk8"},{"name":"eclipse","_id":"ckfnlni6f000jhcqadg6jam9w"},{"name":"Fabric","_id":"ckfnlni6i000phcqa7xlu0h2t"},{"name":"vue","_id":"ckfnlni6k000vhcqa1py916m7"},{"name":"Quartz","_id":"ckfnlni6o0017hcqa5fb4bqjd"},{"name":"脚本","_id":"ckfnlni6o001bhcqaftje6bnp"}]}}